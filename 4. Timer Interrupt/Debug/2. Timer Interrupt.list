
2. Timer Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000154c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080016d4  080016d4  000116d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001710  08001710  00011710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001714  08001714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e0  2000000c  08001724  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000ec  08001724  000200ec  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c990  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c89  00000000  00000000  0002c9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006e56  00000000  00000000  0002e655  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008e8  00000000  00000000  000354b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c78  00000000  00000000  00035d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004b04  00000000  00000000  00036a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000036e1  00000000  00000000  0003b514  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ebf5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a84  00000000  00000000  0003ec74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080016bc 	.word	0x080016bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080016bc 	.word	0x080016bc

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f88e 	bl	8000300 <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f842 	bl	800027c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f81b 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 f96a 	bl	8001500 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000260:	041b      	lsls	r3, r3, #16
 8000262:	0c1b      	lsrs	r3, r3, #16
 8000264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000268:	0200      	lsls	r0, r0, #8
 800026a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000272:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000274:	60d3      	str	r3, [r2, #12]
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027e:	b530      	push	{r4, r5, lr}
 8000280:	68dc      	ldr	r4, [r3, #12]
 8000282:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000286:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028c:	2b04      	cmp	r3, #4
 800028e:	bf28      	it	cs
 8000290:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	f04f 0501 	mov.w	r5, #1
 8000298:	fa05 f303 	lsl.w	r3, r5, r3
 800029c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a0:	bf8c      	ite	hi
 80002a2:	3c03      	subhi	r4, #3
 80002a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a6:	4019      	ands	r1, r3
 80002a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002aa:	fa05 f404 	lsl.w	r4, r5, r4
 80002ae:	3c01      	subs	r4, #1
 80002b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80002b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	ea42 0201 	orr.w	r2, r2, r1
 80002b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	bfad      	iteet	ge
 80002be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	f000 000f 	andlt.w	r0, r0, #15
 80002c6:	4b06      	ldrlt	r3, [pc, #24]	; (80002e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	bfb5      	itete	lt
 80002ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002d8:	bd30      	pop	{r4, r5, pc}
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000ed14 	.word	0xe000ed14

080002e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80002e4:	2800      	cmp	r0, #0
 80002e6:	db08      	blt.n	80002fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002e8:	0942      	lsrs	r2, r0, #5
 80002ea:	2301      	movs	r3, #1
 80002ec:	f000 001f 	and.w	r0, r0, #31
 80002f0:	fa03 f000 	lsl.w	r0, r3, r0
 80002f4:	4b01      	ldr	r3, [pc, #4]	; (80002fc <HAL_NVIC_EnableIRQ+0x18>)
 80002f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002fa:	4770      	bx	lr
 80002fc:	e000e100 	.word	0xe000e100

08000300 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000300:	3801      	subs	r0, #1
 8000302:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000306:	d20a      	bcs.n	800031e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800030c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030e:	21f0      	movs	r1, #240	; 0xf0
 8000310:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000314:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000316:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000318:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800031e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000e010 	.word	0xe000e010
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000330:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000332:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000334:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800049c <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000338:	4a56      	ldr	r2, [pc, #344]	; (8000494 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800033a:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800033c:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8000340:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000342:	9c01      	ldr	r4, [sp, #4]
 8000344:	40dc      	lsrs	r4, r3
 8000346:	d102      	bne.n	800034e <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8000348:	b005      	add	sp, #20
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800034e:	2401      	movs	r4, #1
 8000350:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000354:	9c01      	ldr	r4, [sp, #4]
 8000356:	ea14 050a 	ands.w	r5, r4, sl
 800035a:	f000 8093 	beq.w	8000484 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800035e:	684c      	ldr	r4, [r1, #4]
 8000360:	f024 0b10 	bic.w	fp, r4, #16
 8000364:	f1bb 0f02 	cmp.w	fp, #2
 8000368:	d111      	bne.n	800038e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 800036a:	08df      	lsrs	r7, r3, #3
 800036c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000370:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000374:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000376:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800037a:	fa09 fc0e 	lsl.w	ip, r9, lr
 800037e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000382:	690e      	ldr	r6, [r1, #16]
 8000384:	fa06 f60e 	lsl.w	r6, r6, lr
 8000388:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 800038c:	623e      	str	r6, [r7, #32]
 800038e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000392:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000394:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000396:	fa07 f70c 	lsl.w	r7, r7, ip
 800039a:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800039c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80003a0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80003a2:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80003aa:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ae:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003b2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b4:	d811      	bhi.n	80003da <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003b6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80003b8:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80003bc:	68ce      	ldr	r6, [r1, #12]
 80003be:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003c2:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003c6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003c8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003ca:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80003ce:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003d2:	409e      	lsls	r6, r3
 80003d4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003d8:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003da:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80003dc:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80003de:	688e      	ldr	r6, [r1, #8]
 80003e0:	fa06 f60c 	lsl.w	r6, r6, ip
 80003e4:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003e6:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003e8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003ea:	d54b      	bpl.n	8000484 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ec:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003f0:	f046 0601 	orr.w	r6, r6, #1
 80003f4:	f8c8 6018 	str.w	r6, [r8, #24]
 80003f8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003fc:	f023 0703 	bic.w	r7, r3, #3
 8000400:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000404:	f006 0601 	and.w	r6, r6, #1
 8000408:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800040c:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800040e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000414:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000416:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800041a:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800041e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000422:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000426:	d02f      	beq.n	8000488 <HAL_GPIO_Init+0x15c>
 8000428:	4e1b      	ldr	r6, [pc, #108]	; (8000498 <HAL_GPIO_Init+0x16c>)
 800042a:	42b0      	cmp	r0, r6
 800042c:	d02e      	beq.n	800048c <HAL_GPIO_Init+0x160>
 800042e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000432:	42b0      	cmp	r0, r6
 8000434:	d02c      	beq.n	8000490 <HAL_GPIO_Init+0x164>
 8000436:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800043a:	42b0      	cmp	r0, r6
 800043c:	bf14      	ite	ne
 800043e:	2605      	movne	r6, #5
 8000440:	2603      	moveq	r6, #3
 8000442:	fa06 f60e 	lsl.w	r6, r6, lr
 8000446:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800044a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800044c:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 800044e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000450:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000454:	bf0c      	ite	eq
 8000456:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000458:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800045a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800045c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800045e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000462:	bf0c      	ite	eq
 8000464:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000466:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000468:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800046a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800046c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000470:	bf0c      	ite	eq
 8000472:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000474:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000476:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000478:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800047a:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800047c:	bf54      	ite	pl
 800047e:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000480:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000482:	60d6      	str	r6, [r2, #12]
    position++;
 8000484:	3301      	adds	r3, #1
 8000486:	e75c      	b.n	8000342 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000488:	2600      	movs	r6, #0
 800048a:	e7da      	b.n	8000442 <HAL_GPIO_Init+0x116>
 800048c:	2601      	movs	r6, #1
 800048e:	e7d8      	b.n	8000442 <HAL_GPIO_Init+0x116>
 8000490:	2602      	movs	r6, #2
 8000492:	e7d6      	b.n	8000442 <HAL_GPIO_Init+0x116>
 8000494:	40010400 	.word	0x40010400
 8000498:	48000400 	.word	0x48000400
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004a0:	b10a      	cbz	r2, 80004a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004a2:	6181      	str	r1, [r0, #24]
 80004a4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004a6:	6281      	str	r1, [r0, #40]	; 0x28
 80004a8:	4770      	bx	lr

080004aa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80004aa:	6943      	ldr	r3, [r0, #20]
 80004ac:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80004ae:	bf18      	it	ne
 80004b0:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004b2:	6181      	str	r1, [r0, #24]
 80004b4:	4770      	bx	lr
	...

080004b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004bc:	4605      	mov	r5, r0
 80004be:	b908      	cbnz	r0, 80004c4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80004c0:	2001      	movs	r0, #1
 80004c2:	e05f      	b.n	8000584 <HAL_RCC_OscConfig+0xcc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c4:	6803      	ldr	r3, [r0, #0]
 80004c6:	07da      	lsls	r2, r3, #31
 80004c8:	d411      	bmi.n	80004ee <HAL_RCC_OscConfig+0x36>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004ca:	682b      	ldr	r3, [r5, #0]
 80004cc:	079b      	lsls	r3, r3, #30
 80004ce:	f100 8087 	bmi.w	80005e0 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004d2:	682b      	ldr	r3, [r5, #0]
 80004d4:	071c      	lsls	r4, r3, #28
 80004d6:	f100 80f8 	bmi.w	80006ca <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004da:	682b      	ldr	r3, [r5, #0]
 80004dc:	0758      	lsls	r0, r3, #29
 80004de:	f100 8141 	bmi.w	8000764 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004e2:	69e8      	ldr	r0, [r5, #28]
 80004e4:	2800      	cmp	r0, #0
 80004e6:	f040 81d8 	bne.w	800089a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }

  return HAL_OK;
 80004ea:	2000      	movs	r0, #0
 80004ec:	e04a      	b.n	8000584 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004ee:	4cbb      	ldr	r4, [pc, #748]	; (80007dc <HAL_RCC_OscConfig+0x324>)
 80004f0:	6863      	ldr	r3, [r4, #4]
 80004f2:	f003 030c 	and.w	r3, r3, #12
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	d007      	beq.n	800050a <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004fa:	6863      	ldr	r3, [r4, #4]
 80004fc:	f003 030c 	and.w	r3, r3, #12
 8000500:	2b08      	cmp	r3, #8
 8000502:	d116      	bne.n	8000532 <HAL_RCC_OscConfig+0x7a>
 8000504:	6863      	ldr	r3, [r4, #4]
 8000506:	03df      	lsls	r7, r3, #15
 8000508:	d513      	bpl.n	8000532 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800050a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800050e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000512:	6821      	ldr	r1, [r4, #0]
 8000514:	fa93 f3a3 	rbit	r3, r3
 8000518:	fab3 f383 	clz	r3, r3
 800051c:	f003 031f 	and.w	r3, r3, #31
 8000520:	2201      	movs	r2, #1
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	420b      	tst	r3, r1
 8000528:	d0cf      	beq.n	80004ca <HAL_RCC_OscConfig+0x12>
 800052a:	686b      	ldr	r3, [r5, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1cc      	bne.n	80004ca <HAL_RCC_OscConfig+0x12>
 8000530:	e7c6      	b.n	80004c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000532:	686a      	ldr	r2, [r5, #4]
 8000534:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000538:	d127      	bne.n	800058a <HAL_RCC_OscConfig+0xd2>
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000540:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000542:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000544:	68a9      	ldr	r1, [r5, #8]
 8000546:	f023 030f 	bic.w	r3, r3, #15
 800054a:	430b      	orrs	r3, r1
 800054c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800054e:	b362      	cbz	r2, 80005aa <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000550:	f7ff fe7c 	bl	800024c <HAL_GetTick>
 8000554:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000558:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800055a:	2701      	movs	r7, #1
 800055c:	fa96 f3a6 	rbit	r3, r6
 8000560:	6822      	ldr	r2, [r4, #0]
 8000562:	fa96 f3a6 	rbit	r3, r6
 8000566:	fab3 f383 	clz	r3, r3
 800056a:	f003 031f 	and.w	r3, r3, #31
 800056e:	fa07 f303 	lsl.w	r3, r7, r3
 8000572:	4213      	tst	r3, r2
 8000574:	d1a9      	bne.n	80004ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000576:	f7ff fe69 	bl	800024c <HAL_GetTick>
 800057a:	eba0 0008 	sub.w	r0, r0, r8
 800057e:	2864      	cmp	r0, #100	; 0x64
 8000580:	d9ec      	bls.n	800055c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000582:	2003      	movs	r0, #3
}
 8000584:	b002      	add	sp, #8
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	b932      	cbnz	r2, 800059c <HAL_RCC_OscConfig+0xe4>
 800058e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000592:	6023      	str	r3, [r4, #0]
 8000594:	6823      	ldr	r3, [r4, #0]
 8000596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800059a:	e7d1      	b.n	8000540 <HAL_RCC_OscConfig+0x88>
 800059c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005a0:	d1f5      	bne.n	800058e <HAL_RCC_OscConfig+0xd6>
 80005a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a6:	6023      	str	r3, [r4, #0]
 80005a8:	e7c7      	b.n	800053a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80005aa:	f7ff fe4f 	bl	800024c <HAL_GetTick>
 80005ae:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005b2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005b4:	2701      	movs	r7, #1
 80005b6:	fa96 f3a6 	rbit	r3, r6
 80005ba:	6822      	ldr	r2, [r4, #0]
 80005bc:	fa96 f3a6 	rbit	r3, r6
 80005c0:	fab3 f383 	clz	r3, r3
 80005c4:	f003 031f 	and.w	r3, r3, #31
 80005c8:	fa07 f303 	lsl.w	r3, r7, r3
 80005cc:	4213      	tst	r3, r2
 80005ce:	f43f af7c 	beq.w	80004ca <HAL_RCC_OscConfig+0x12>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005d2:	f7ff fe3b 	bl	800024c <HAL_GetTick>
 80005d6:	eba0 0008 	sub.w	r0, r0, r8
 80005da:	2864      	cmp	r0, #100	; 0x64
 80005dc:	d9eb      	bls.n	80005b6 <HAL_RCC_OscConfig+0xfe>
 80005de:	e7d0      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005e0:	4c7e      	ldr	r4, [pc, #504]	; (80007dc <HAL_RCC_OscConfig+0x324>)
 80005e2:	6863      	ldr	r3, [r4, #4]
 80005e4:	f013 0f0c 	tst.w	r3, #12
 80005e8:	d007      	beq.n	80005fa <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005ea:	6863      	ldr	r3, [r4, #4]
 80005ec:	f003 030c 	and.w	r3, r3, #12
 80005f0:	2b08      	cmp	r3, #8
 80005f2:	d122      	bne.n	800063a <HAL_RCC_OscConfig+0x182>
 80005f4:	6863      	ldr	r3, [r4, #4]
 80005f6:	03de      	lsls	r6, r3, #15
 80005f8:	d41f      	bmi.n	800063a <HAL_RCC_OscConfig+0x182>
 80005fa:	2302      	movs	r3, #2
 80005fc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000600:	6821      	ldr	r1, [r4, #0]
 8000602:	fa93 f3a3 	rbit	r3, r3
 8000606:	fab3 f383 	clz	r3, r3
 800060a:	f003 031f 	and.w	r3, r3, #31
 800060e:	2201      	movs	r2, #1
 8000610:	fa02 f303 	lsl.w	r3, r2, r3
 8000614:	420b      	tst	r3, r1
 8000616:	d003      	beq.n	8000620 <HAL_RCC_OscConfig+0x168>
 8000618:	692b      	ldr	r3, [r5, #16]
 800061a:	4293      	cmp	r3, r2
 800061c:	f47f af50 	bne.w	80004c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000620:	6821      	ldr	r1, [r4, #0]
 8000622:	23f8      	movs	r3, #248	; 0xf8
 8000624:	fa93 f3a3 	rbit	r3, r3
 8000628:	fab3 f283 	clz	r2, r3
 800062c:	696b      	ldr	r3, [r5, #20]
 800062e:	4093      	lsls	r3, r2
 8000630:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000634:	4313      	orrs	r3, r2
 8000636:	6023      	str	r3, [r4, #0]
 8000638:	e74b      	b.n	80004d2 <HAL_RCC_OscConfig+0x1a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800063a:	692a      	ldr	r2, [r5, #16]
 800063c:	2601      	movs	r6, #1
 800063e:	b30a      	cbz	r2, 8000684 <HAL_RCC_OscConfig+0x1cc>
 8000640:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000644:	fab3 f383 	clz	r3, r3
 8000648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800064c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	2702      	movs	r7, #2
 8000654:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000656:	f7ff fdf9 	bl	800024c <HAL_GetTick>
 800065a:	4680      	mov	r8, r0
 800065c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000660:	6822      	ldr	r2, [r4, #0]
 8000662:	fa97 f3a7 	rbit	r3, r7
 8000666:	fab3 f383 	clz	r3, r3
 800066a:	f003 031f 	and.w	r3, r3, #31
 800066e:	fa06 f303 	lsl.w	r3, r6, r3
 8000672:	4213      	tst	r3, r2
 8000674:	d1d4      	bne.n	8000620 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000676:	f7ff fde9 	bl	800024c <HAL_GetTick>
 800067a:	eba0 0008 	sub.w	r0, r0, r8
 800067e:	2802      	cmp	r0, #2
 8000680:	d9ec      	bls.n	800065c <HAL_RCC_OscConfig+0x1a4>
 8000682:	e77e      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
 8000684:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000688:	fab3 f383 	clz	r3, r3
 800068c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	2702      	movs	r7, #2
 8000698:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800069a:	f7ff fdd7 	bl	800024c <HAL_GetTick>
 800069e:	4680      	mov	r8, r0
 80006a0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a4:	6822      	ldr	r2, [r4, #0]
 80006a6:	fa97 f3a7 	rbit	r3, r7
 80006aa:	fab3 f383 	clz	r3, r3
 80006ae:	f003 031f 	and.w	r3, r3, #31
 80006b2:	fa06 f303 	lsl.w	r3, r6, r3
 80006b6:	4213      	tst	r3, r2
 80006b8:	f43f af0b 	beq.w	80004d2 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006bc:	f7ff fdc6 	bl	800024c <HAL_GetTick>
 80006c0:	eba0 0008 	sub.w	r0, r0, r8
 80006c4:	2802      	cmp	r0, #2
 80006c6:	d9eb      	bls.n	80006a0 <HAL_RCC_OscConfig+0x1e8>
 80006c8:	e75b      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006ca:	69aa      	ldr	r2, [r5, #24]
 80006cc:	4e43      	ldr	r6, [pc, #268]	; (80007dc <HAL_RCC_OscConfig+0x324>)
 80006ce:	4944      	ldr	r1, [pc, #272]	; (80007e0 <HAL_RCC_OscConfig+0x328>)
 80006d0:	2401      	movs	r4, #1
 80006d2:	b31a      	cbz	r2, 800071c <HAL_RCC_OscConfig+0x264>
 80006d4:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006d8:	fab3 f383 	clz	r3, r3
 80006dc:	440b      	add	r3, r1
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	2702      	movs	r7, #2
 80006e2:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80006e4:	f7ff fdb2 	bl	800024c <HAL_GetTick>
 80006e8:	4680      	mov	r8, r0
 80006ea:	fa97 f3a7 	rbit	r3, r7
 80006ee:	fa97 f3a7 	rbit	r3, r7
 80006f2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006f6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80006f8:	fa97 f3a7 	rbit	r3, r7
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	f003 031f 	and.w	r3, r3, #31
 8000704:	fa04 f303 	lsl.w	r3, r4, r3
 8000708:	4213      	tst	r3, r2
 800070a:	f47f aee6 	bne.w	80004da <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800070e:	f7ff fd9d 	bl	800024c <HAL_GetTick>
 8000712:	eba0 0008 	sub.w	r0, r0, r8
 8000716:	2802      	cmp	r0, #2
 8000718:	d9e7      	bls.n	80006ea <HAL_RCC_OscConfig+0x232>
 800071a:	e732      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
 800071c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000720:	fab3 f383 	clz	r3, r3
 8000724:	440b      	add	r3, r1
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	2702      	movs	r7, #2
 800072a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800072c:	f7ff fd8e 	bl	800024c <HAL_GetTick>
 8000730:	4680      	mov	r8, r0
 8000732:	fa97 f3a7 	rbit	r3, r7
 8000736:	fa97 f3a7 	rbit	r3, r7
 800073a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800073e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000740:	fa97 f3a7 	rbit	r3, r7
 8000744:	fab3 f383 	clz	r3, r3
 8000748:	f003 031f 	and.w	r3, r3, #31
 800074c:	fa04 f303 	lsl.w	r3, r4, r3
 8000750:	4213      	tst	r3, r2
 8000752:	f43f aec2 	beq.w	80004da <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000756:	f7ff fd79 	bl	800024c <HAL_GetTick>
 800075a:	eba0 0008 	sub.w	r0, r0, r8
 800075e:	2802      	cmp	r0, #2
 8000760:	d9e7      	bls.n	8000732 <HAL_RCC_OscConfig+0x27a>
 8000762:	e70e      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000764:	4c1d      	ldr	r4, [pc, #116]	; (80007dc <HAL_RCC_OscConfig+0x324>)
 8000766:	69e3      	ldr	r3, [r4, #28]
 8000768:	00d9      	lsls	r1, r3, #3
 800076a:	d434      	bmi.n	80007d6 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	69e3      	ldr	r3, [r4, #28]
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	61e3      	str	r3, [r4, #28]
 8000774:	69e3      	ldr	r3, [r4, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800077e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000780:	4f18      	ldr	r7, [pc, #96]	; (80007e4 <HAL_RCC_OscConfig+0x32c>)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	05da      	lsls	r2, r3, #23
 8000786:	d52f      	bpl.n	80007e8 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000788:	68eb      	ldr	r3, [r5, #12]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d13d      	bne.n	800080a <HAL_RCC_OscConfig+0x352>
 800078e:	6a23      	ldr	r3, [r4, #32]
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000796:	f7ff fd59 	bl	800024c <HAL_GetTick>
 800079a:	2702      	movs	r7, #2
 800079c:	4682      	mov	sl, r0
 800079e:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007a0:	f04f 0801 	mov.w	r8, #1
 80007a4:	fa97 f3a7 	rbit	r3, r7
 80007a8:	fa97 f3a7 	rbit	r3, r7
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d06c      	beq.n	800088a <HAL_RCC_OscConfig+0x3d2>
 80007b0:	6a22      	ldr	r2, [r4, #32]
 80007b2:	fa99 f3a9 	rbit	r3, r9
 80007b6:	fab3 f383 	clz	r3, r3
 80007ba:	f003 031f 	and.w	r3, r3, #31
 80007be:	fa08 f303 	lsl.w	r3, r8, r3
 80007c2:	4213      	tst	r3, r2
 80007c4:	d058      	beq.n	8000878 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80007c6:	2e00      	cmp	r6, #0
 80007c8:	f43f ae8b 	beq.w	80004e2 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007cc:	69e3      	ldr	r3, [r4, #28]
 80007ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007d2:	61e3      	str	r3, [r4, #28]
 80007d4:	e685      	b.n	80004e2 <HAL_RCC_OscConfig+0x2a>
    FlagStatus       pwrclkchanged = RESET;
 80007d6:	2600      	movs	r6, #0
 80007d8:	e7d2      	b.n	8000780 <HAL_RCC_OscConfig+0x2c8>
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	10908120 	.word	0x10908120
 80007e4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80007f0:	f7ff fd2c 	bl	800024c <HAL_GetTick>
 80007f4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	d4c5      	bmi.n	8000788 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007fc:	f7ff fd26 	bl	800024c <HAL_GetTick>
 8000800:	eba0 0008 	sub.w	r0, r0, r8
 8000804:	2864      	cmp	r0, #100	; 0x64
 8000806:	d9f6      	bls.n	80007f6 <HAL_RCC_OscConfig+0x33e>
 8000808:	e6bb      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800080a:	bb3b      	cbnz	r3, 800085c <HAL_RCC_OscConfig+0x3a4>
 800080c:	6a23      	ldr	r3, [r4, #32]
 800080e:	f023 0301 	bic.w	r3, r3, #1
 8000812:	6223      	str	r3, [r4, #32]
 8000814:	6a23      	ldr	r3, [r4, #32]
 8000816:	f023 0304 	bic.w	r3, r3, #4
 800081a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800081c:	f7ff fd16 	bl	800024c <HAL_GetTick>
 8000820:	2702      	movs	r7, #2
 8000822:	4682      	mov	sl, r0
 8000824:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000826:	f04f 0801 	mov.w	r8, #1
 800082a:	fa97 f3a7 	rbit	r3, r7
 800082e:	fa97 f3a7 	rbit	r3, r7
 8000832:	b373      	cbz	r3, 8000892 <HAL_RCC_OscConfig+0x3da>
 8000834:	6a22      	ldr	r2, [r4, #32]
 8000836:	fa99 f3a9 	rbit	r3, r9
 800083a:	fab3 f383 	clz	r3, r3
 800083e:	f003 031f 	and.w	r3, r3, #31
 8000842:	fa08 f303 	lsl.w	r3, r8, r3
 8000846:	4213      	tst	r3, r2
 8000848:	d0bd      	beq.n	80007c6 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800084a:	f7ff fcff 	bl	800024c <HAL_GetTick>
 800084e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000852:	eba0 000a 	sub.w	r0, r0, sl
 8000856:	4298      	cmp	r0, r3
 8000858:	d9e7      	bls.n	800082a <HAL_RCC_OscConfig+0x372>
 800085a:	e692      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800085c:	2b05      	cmp	r3, #5
 800085e:	6a23      	ldr	r3, [r4, #32]
 8000860:	d103      	bne.n	800086a <HAL_RCC_OscConfig+0x3b2>
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6223      	str	r3, [r4, #32]
 8000868:	e791      	b.n	800078e <HAL_RCC_OscConfig+0x2d6>
 800086a:	f023 0301 	bic.w	r3, r3, #1
 800086e:	6223      	str	r3, [r4, #32]
 8000870:	6a23      	ldr	r3, [r4, #32]
 8000872:	f023 0304 	bic.w	r3, r3, #4
 8000876:	e78d      	b.n	8000794 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000878:	f7ff fce8 	bl	800024c <HAL_GetTick>
 800087c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000880:	eba0 000a 	sub.w	r0, r0, sl
 8000884:	4298      	cmp	r0, r3
 8000886:	d98d      	bls.n	80007a4 <HAL_RCC_OscConfig+0x2ec>
 8000888:	e67b      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
 800088a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800088e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000890:	e78f      	b.n	80007b2 <HAL_RCC_OscConfig+0x2fa>
 8000892:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000896:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000898:	e7cd      	b.n	8000836 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800089a:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <HAL_RCC_OscConfig+0x50c>)
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	f002 020c 	and.w	r2, r2, #12
 80008a2:	2a08      	cmp	r2, #8
 80008a4:	461c      	mov	r4, r3
 80008a6:	d07b      	beq.n	80009a0 <HAL_RCC_OscConfig+0x4e8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008a8:	2802      	cmp	r0, #2
 80008aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ae:	d152      	bne.n	8000956 <HAL_RCC_OscConfig+0x49e>
 80008b0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008b4:	fab3 f383 	clz	r3, r3
 80008b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008c6:	f7ff fcc1 	bl	800024c <HAL_GetTick>
 80008ca:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008ce:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008d0:	2601      	movs	r6, #1
 80008d2:	fa97 f3a7 	rbit	r3, r7
 80008d6:	6822      	ldr	r2, [r4, #0]
 80008d8:	fa97 f3a7 	rbit	r3, r7
 80008dc:	fab3 f383 	clz	r3, r3
 80008e0:	f003 031f 	and.w	r3, r3, #31
 80008e4:	fa06 f303 	lsl.w	r3, r6, r3
 80008e8:	4213      	tst	r3, r2
 80008ea:	d12d      	bne.n	8000948 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008ec:	6862      	ldr	r2, [r4, #4]
 80008ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008f0:	6a29      	ldr	r1, [r5, #32]
 80008f2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80008f6:	430b      	orrs	r3, r1
 80008f8:	4313      	orrs	r3, r2
 80008fa:	6063      	str	r3, [r4, #4]
 80008fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000900:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000904:	fab3 f383 	clz	r3, r3
 8000908:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800090c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000916:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000918:	f7ff fc98 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800091c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800091e:	4607      	mov	r7, r0
 8000920:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000924:	6822      	ldr	r2, [r4, #0]
 8000926:	fa95 f3a5 	rbit	r3, r5
 800092a:	fab3 f383 	clz	r3, r3
 800092e:	f003 031f 	and.w	r3, r3, #31
 8000932:	fa06 f303 	lsl.w	r3, r6, r3
 8000936:	4213      	tst	r3, r2
 8000938:	f47f add7 	bne.w	80004ea <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800093c:	f7ff fc86 	bl	800024c <HAL_GetTick>
 8000940:	1bc0      	subs	r0, r0, r7
 8000942:	2802      	cmp	r0, #2
 8000944:	d9ec      	bls.n	8000920 <HAL_RCC_OscConfig+0x468>
 8000946:	e61c      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000948:	f7ff fc80 	bl	800024c <HAL_GetTick>
 800094c:	eba0 0008 	sub.w	r0, r0, r8
 8000950:	2802      	cmp	r0, #2
 8000952:	d9be      	bls.n	80008d2 <HAL_RCC_OscConfig+0x41a>
 8000954:	e615      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
 8000956:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800095a:	fab3 f383 	clz	r3, r3
 800095e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000962:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800096c:	f7ff fc6e 	bl	800024c <HAL_GetTick>
 8000970:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000974:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000976:	2601      	movs	r6, #1
 8000978:	fa95 f3a5 	rbit	r3, r5
 800097c:	6822      	ldr	r2, [r4, #0]
 800097e:	fa95 f3a5 	rbit	r3, r5
 8000982:	fab3 f383 	clz	r3, r3
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	fa06 f303 	lsl.w	r3, r6, r3
 800098e:	4213      	tst	r3, r2
 8000990:	f43f adab 	beq.w	80004ea <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000994:	f7ff fc5a 	bl	800024c <HAL_GetTick>
 8000998:	1bc0      	subs	r0, r0, r7
 800099a:	2802      	cmp	r0, #2
 800099c:	d9ec      	bls.n	8000978 <HAL_RCC_OscConfig+0x4c0>
 800099e:	e5f0      	b.n	8000582 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80009a0:	2801      	cmp	r0, #1
 80009a2:	f43f adef 	beq.w	8000584 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 80009a6:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80009a8:	6a2b      	ldr	r3, [r5, #32]
 80009aa:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80009ae:	429a      	cmp	r2, r3
 80009b0:	f47f ad86 	bne.w	80004c0 <HAL_RCC_OscConfig+0x8>
 80009b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80009b6:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80009ba:	1ac0      	subs	r0, r0, r3
 80009bc:	bf18      	it	ne
 80009be:	2001      	movne	r0, #1
 80009c0:	e5e0      	b.n	8000584 <HAL_RCC_OscConfig+0xcc>
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009c8:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009ca:	4c13      	ldr	r4, [pc, #76]	; (8000a18 <HAL_RCC_GetSysClockFreq+0x50>)
 80009cc:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009ce:	f001 030c 	and.w	r3, r1, #12
 80009d2:	2b08      	cmp	r3, #8
 80009d4:	d11e      	bne.n	8000a14 <HAL_RCC_GetSysClockFreq+0x4c>
 80009d6:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009da:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009de:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009e2:	fab3 f383 	clz	r3, r3
 80009e6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ea:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x54>)
 80009ec:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009f0:	220f      	movs	r2, #15
 80009f2:	fa92 f2a2 	rbit	r2, r2
 80009f6:	fab2 f282 	clz	r2, r2
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	40d3      	lsrs	r3, r2
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a02:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000a04:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000a06:	bf4a      	itet	mi
 8000a08:	4b06      	ldrmi	r3, [pc, #24]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000a0a:	4b07      	ldrpl	r3, [pc, #28]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000a0c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000a10:	4358      	muls	r0, r3
 8000a12:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a16:	bd10      	pop	{r4, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	080016d4 	.word	0x080016d4
 8000a20:	080016e4 	.word	0x080016e4
 8000a24:	007a1200 	.word	0x007a1200
 8000a28:	003d0900 	.word	0x003d0900

08000a2c <HAL_RCC_ClockConfig>:
{
 8000a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a30:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a32:	4604      	mov	r4, r0
 8000a34:	b910      	cbnz	r0, 8000a3c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a36:	2001      	movs	r0, #1
 8000a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a3c:	4a4d      	ldr	r2, [pc, #308]	; (8000b74 <HAL_RCC_ClockConfig+0x148>)
 8000a3e:	6813      	ldr	r3, [r2, #0]
 8000a40:	f003 0307 	and.w	r3, r3, #7
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d32f      	bcc.n	8000aa8 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a48:	6822      	ldr	r2, [r4, #0]
 8000a4a:	0791      	lsls	r1, r2, #30
 8000a4c:	d437      	bmi.n	8000abe <HAL_RCC_ClockConfig+0x92>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a4e:	07d2      	lsls	r2, r2, #31
 8000a50:	d43d      	bmi.n	8000ace <HAL_RCC_ClockConfig+0xa2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a52:	4a48      	ldr	r2, [pc, #288]	; (8000b74 <HAL_RCC_ClockConfig+0x148>)
 8000a54:	6813      	ldr	r3, [r2, #0]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	429d      	cmp	r5, r3
 8000a5c:	d376      	bcc.n	8000b4c <HAL_RCC_ClockConfig+0x120>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a5e:	6822      	ldr	r2, [r4, #0]
 8000a60:	4d45      	ldr	r5, [pc, #276]	; (8000b78 <HAL_RCC_ClockConfig+0x14c>)
 8000a62:	f012 0f04 	tst.w	r2, #4
 8000a66:	d17d      	bne.n	8000b64 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a68:	0713      	lsls	r3, r2, #28
 8000a6a:	d506      	bpl.n	8000a7a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a6c:	686b      	ldr	r3, [r5, #4]
 8000a6e:	6922      	ldr	r2, [r4, #16]
 8000a70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a78:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a7a:	f7ff ffa5 	bl	80009c8 <HAL_RCC_GetSysClockFreq>
 8000a7e:	686b      	ldr	r3, [r5, #4]
 8000a80:	22f0      	movs	r2, #240	; 0xf0
 8000a82:	fa92 f2a2 	rbit	r2, r2
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a8e:	40d3      	lsrs	r3, r2
 8000a90:	4a3a      	ldr	r2, [pc, #232]	; (8000b7c <HAL_RCC_ClockConfig+0x150>)
 8000a92:	5cd3      	ldrb	r3, [r2, r3]
 8000a94:	40d8      	lsrs	r0, r3
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <HAL_RCC_ClockConfig+0x154>)
 8000a98:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000a9a:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <HAL_RCC_ClockConfig+0x158>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f7ff fb93 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	f023 0307 	bic.w	r3, r3, #7
 8000aae:	430b      	orrs	r3, r1
 8000ab0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ab2:	6813      	ldr	r3, [r2, #0]
 8000ab4:	f003 0307 	and.w	r3, r3, #7
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d1bc      	bne.n	8000a36 <HAL_RCC_ClockConfig+0xa>
 8000abc:	e7c4      	b.n	8000a48 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000abe:	492e      	ldr	r1, [pc, #184]	; (8000b78 <HAL_RCC_ClockConfig+0x14c>)
 8000ac0:	68a0      	ldr	r0, [r4, #8]
 8000ac2:	684b      	ldr	r3, [r1, #4]
 8000ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ac8:	4303      	orrs	r3, r0
 8000aca:	604b      	str	r3, [r1, #4]
 8000acc:	e7bf      	b.n	8000a4e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ace:	6862      	ldr	r2, [r4, #4]
 8000ad0:	4e29      	ldr	r6, [pc, #164]	; (8000b78 <HAL_RCC_ClockConfig+0x14c>)
 8000ad2:	2a01      	cmp	r2, #1
 8000ad4:	d127      	bne.n	8000b26 <HAL_RCC_ClockConfig+0xfa>
 8000ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ada:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ade:	6831      	ldr	r1, [r6, #0]
 8000ae0:	fa93 f3a3 	rbit	r3, r3
 8000ae4:	fab3 f383 	clz	r3, r3
 8000ae8:	f003 031f 	and.w	r3, r3, #31
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000af2:	d0a0      	beq.n	8000a36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000af4:	6873      	ldr	r3, [r6, #4]
 8000af6:	f023 0303 	bic.w	r3, r3, #3
 8000afa:	431a      	orrs	r2, r3
 8000afc:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000afe:	f7ff fba5 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b02:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000b06:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b08:	6873      	ldr	r3, [r6, #4]
 8000b0a:	6862      	ldr	r2, [r4, #4]
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b14:	d09d      	beq.n	8000a52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b16:	f7ff fb99 	bl	800024c <HAL_GetTick>
 8000b1a:	1bc0      	subs	r0, r0, r7
 8000b1c:	4540      	cmp	r0, r8
 8000b1e:	d9f3      	bls.n	8000b08 <HAL_RCC_ClockConfig+0xdc>
        return HAL_TIMEOUT;
 8000b20:	2003      	movs	r0, #3
}
 8000b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b26:	2a02      	cmp	r2, #2
 8000b28:	bf0c      	ite	eq
 8000b2a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b2e:	2302      	movne	r3, #2
 8000b30:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b34:	6830      	ldr	r0, [r6, #0]
 8000b36:	fa93 f3a3 	rbit	r3, r3
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	f003 031f 	and.w	r3, r3, #31
 8000b42:	2101      	movs	r1, #1
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	4203      	tst	r3, r0
 8000b4a:	e7d2      	b.n	8000af2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b4c:	6813      	ldr	r3, [r2, #0]
 8000b4e:	f023 0307 	bic.w	r3, r3, #7
 8000b52:	432b      	orrs	r3, r5
 8000b54:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b56:	6813      	ldr	r3, [r2, #0]
 8000b58:	f003 0307 	and.w	r3, r3, #7
 8000b5c:	429d      	cmp	r5, r3
 8000b5e:	f47f af6a 	bne.w	8000a36 <HAL_RCC_ClockConfig+0xa>
 8000b62:	e77c      	b.n	8000a5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b64:	686b      	ldr	r3, [r5, #4]
 8000b66:	68e1      	ldr	r1, [r4, #12]
 8000b68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	606b      	str	r3, [r5, #4]
 8000b70:	e77a      	b.n	8000a68 <HAL_RCC_ClockConfig+0x3c>
 8000b72:	bf00      	nop
 8000b74:	40022000 	.word	0x40022000
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	080016f8 	.word	0x080016f8
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	fa92 f2a2 	rbit	r2, r2
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b9c:	40d3      	lsrs	r3, r2
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000ba4:	6810      	ldr	r0, [r2, #0]
}    
 8000ba6:	40d8      	lsrs	r0, r3
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	08001708 	.word	0x08001708
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000bba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	fa92 f2a2 	rbit	r2, r2
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000bcc:	40d3      	lsrs	r3, r2
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000bd4:	6810      	ldr	r0, [r2, #0]
} 
 8000bd6:	40d8      	lsrs	r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	08001708 	.word	0x08001708
 8000be4:	20000008 	.word	0x20000008

08000be8 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000be8:	6803      	ldr	r3, [r0, #0]
{
 8000bea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bee:	03dd      	lsls	r5, r3, #15
{
 8000bf0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bf2:	d522      	bpl.n	8000c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf4:	4d72      	ldr	r5, [pc, #456]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000bf6:	69eb      	ldr	r3, [r5, #28]
 8000bf8:	00d8      	lsls	r0, r3, #3
 8000bfa:	f100 8085 	bmi.w	8000d08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	69eb      	ldr	r3, [r5, #28]
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	61eb      	str	r3, [r5, #28]
 8000c06:	69eb      	ldr	r3, [r5, #28]
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c10:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c12:	4f6c      	ldr	r7, [pc, #432]	; (8000dc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	05d9      	lsls	r1, r3, #23
 8000c18:	d578      	bpl.n	8000d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c1a:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c1c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c20:	f040 8089 	bne.w	8000d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c24:	6a2b      	ldr	r3, [r5, #32]
 8000c26:	6862      	ldr	r2, [r4, #4]
 8000c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c30:	b11e      	cbz	r6, 8000c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c32:	69eb      	ldr	r3, [r5, #28]
 8000c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c38:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c3a:	6820      	ldr	r0, [r4, #0]
 8000c3c:	07c5      	lsls	r5, r0, #31
 8000c3e:	d506      	bpl.n	8000c4e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c40:	4a5f      	ldr	r2, [pc, #380]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000c42:	68a1      	ldr	r1, [r4, #8]
 8000c44:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c46:	f023 0303 	bic.w	r3, r3, #3
 8000c4a:	430b      	orrs	r3, r1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000c4e:	0681      	lsls	r1, r0, #26
 8000c50:	d506      	bpl.n	8000c60 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000c52:	4a5b      	ldr	r2, [pc, #364]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000c54:	68e1      	ldr	r1, [r4, #12]
 8000c56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c58:	f023 0310 	bic.w	r3, r3, #16
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000c60:	0382      	lsls	r2, r0, #14
 8000c62:	d506      	bpl.n	8000c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000c64:	4a56      	ldr	r2, [pc, #344]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000c66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000c68:	6853      	ldr	r3, [r2, #4]
 8000c6a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000c72:	0643      	lsls	r3, r0, #25
 8000c74:	d506      	bpl.n	8000c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000c76:	4a52      	ldr	r2, [pc, #328]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000c78:	6921      	ldr	r1, [r4, #16]
 8000c7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c7c:	f023 0320 	bic.w	r3, r3, #32
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000c84:	0407      	lsls	r7, r0, #16
 8000c86:	d506      	bpl.n	8000c96 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000c88:	4a4d      	ldr	r2, [pc, #308]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000c8a:	6961      	ldr	r1, [r4, #20]
 8000c8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000c96:	0586      	lsls	r6, r0, #22
 8000c98:	d506      	bpl.n	8000ca8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000c9a:	4a49      	ldr	r2, [pc, #292]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000c9c:	69e1      	ldr	r1, [r4, #28]
 8000c9e:	6853      	ldr	r3, [r2, #4]
 8000ca0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ca4:	430b      	orrs	r3, r1
 8000ca6:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8000ca8:	0605      	lsls	r5, r0, #24
 8000caa:	d506      	bpl.n	8000cba <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8000cac:	4a44      	ldr	r2, [pc, #272]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000cae:	69a1      	ldr	r1, [r4, #24]
 8000cb0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000cb2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000cba:	04c1      	lsls	r1, r0, #19
 8000cbc:	d506      	bpl.n	8000ccc <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000cbe:	4a40      	ldr	r2, [pc, #256]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000cc0:	6a21      	ldr	r1, [r4, #32]
 8000cc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000ccc:	0342      	lsls	r2, r0, #13
 8000cce:	d506      	bpl.n	8000cde <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000cd0:	4a3b      	ldr	r2, [pc, #236]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000cd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000cd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000cde:	0303      	lsls	r3, r0, #12
 8000ce0:	d506      	bpl.n	8000cf0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000ce2:	4a37      	ldr	r2, [pc, #220]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000ce4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000ce6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cec:	430b      	orrs	r3, r1
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000cf0:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8000cf4:	d01c      	beq.n	8000d30 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000cf6:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000cf8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000cfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d00:	430b      	orrs	r3, r1
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000d04:	2000      	movs	r0, #0
 8000d06:	e013      	b.n	8000d30 <HAL_RCCEx_PeriphCLKConfig+0x148>
    FlagStatus       pwrclkchanged = RESET;
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e782      	b.n	8000c12 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000d14:	f7ff fa9a 	bl	800024c <HAL_GetTick>
 8000d18:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	05da      	lsls	r2, r3, #23
 8000d1e:	f53f af7c 	bmi.w	8000c1a <HAL_RCCEx_PeriphCLKConfig+0x32>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d22:	f7ff fa93 	bl	800024c <HAL_GetTick>
 8000d26:	eba0 0008 	sub.w	r0, r0, r8
 8000d2a:	2864      	cmp	r0, #100	; 0x64
 8000d2c:	d9f5      	bls.n	8000d1a <HAL_RCCEx_PeriphCLKConfig+0x132>
          return HAL_TIMEOUT;
 8000d2e:	2003      	movs	r0, #3
}
 8000d30:	b002      	add	sp, #8
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d36:	6862      	ldr	r2, [r4, #4]
 8000d38:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	f43f af71 	beq.w	8000c24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d42:	6a29      	ldr	r1, [r5, #32]
 8000d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d48:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000d4c:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d50:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	4472      	add	r2, lr
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	2701      	movs	r7, #1
 8000d5e:	6017      	str	r7, [r2, #0]
 8000d60:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d64:	fab3 f383 	clz	r3, r3
 8000d68:	4473      	add	r3, lr
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d70:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8000d72:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d74:	f57f af56 	bpl.w	8000c24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 8000d78:	f7ff fa68 	bl	800024c <HAL_GetTick>
 8000d7c:	f04f 0802 	mov.w	r8, #2
 8000d80:	4682      	mov	sl, r0
 8000d82:	46c1      	mov	r9, r8
 8000d84:	fa98 f3a8 	rbit	r3, r8
 8000d88:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d8c:	b1a3      	cbz	r3, 8000db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8000d8e:	6a2a      	ldr	r2, [r5, #32]
 8000d90:	fa99 f3a9 	rbit	r3, r9
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	f003 031f 	and.w	r3, r3, #31
 8000d9c:	fa07 f303 	lsl.w	r3, r7, r3
 8000da0:	4213      	tst	r3, r2
 8000da2:	f47f af3f 	bne.w	8000c24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da6:	f7ff fa51 	bl	800024c <HAL_GetTick>
 8000daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dae:	eba0 000a 	sub.w	r0, r0, sl
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d9e6      	bls.n	8000d84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8000db6:	e7ba      	b.n	8000d2e <HAL_RCCEx_PeriphCLKConfig+0x146>
 8000db8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dbc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000dbe:	e7e7      	b.n	8000d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40007000 	.word	0x40007000
 8000dc8:	10908100 	.word	0x10908100

08000dcc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000dcc:	6803      	ldr	r3, [r0, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	f042 0201 	orr.w	r2, r2, #1
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000dd6:	6899      	ldr	r1, [r3, #8]
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_TIM_Base_Start_IT+0x28>)
 8000dda:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000ddc:	2a06      	cmp	r2, #6
 8000dde:	d006      	beq.n	8000dee <HAL_TIM_Base_Start_IT+0x22>
 8000de0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8000de4:	bf1e      	ittt	ne
 8000de6:	681a      	ldrne	r2, [r3, #0]
 8000de8:	f042 0201 	orrne.w	r2, r2, #1
 8000dec:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000dee:	2000      	movs	r0, #0
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	00010007 	.word	0x00010007

08000df8 <HAL_TIM_OC_DelayElapsedCallback>:
 8000df8:	4770      	bx	lr

08000dfa <HAL_TIM_IC_CaptureCallback>:
 8000dfa:	4770      	bx	lr

08000dfc <HAL_TIM_PWM_PulseFinishedCallback>:
 8000dfc:	4770      	bx	lr

08000dfe <HAL_TIM_TriggerCallback>:
 8000dfe:	4770      	bx	lr

08000e00 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e00:	6803      	ldr	r3, [r0, #0]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	0791      	lsls	r1, r2, #30
{
 8000e06:	b510      	push	{r4, lr}
 8000e08:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e0a:	d50f      	bpl.n	8000e2c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	0792      	lsls	r2, r2, #30
 8000e10:	d50c      	bpl.n	8000e2c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e12:	f06f 0202 	mvn.w	r2, #2
 8000e16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e18:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e1a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e1c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e1e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e20:	f000 8085 	beq.w	8000f2e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000e24:	f7ff ffe9 	bl	8000dfa <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	691a      	ldr	r2, [r3, #16]
 8000e30:	0752      	lsls	r2, r2, #29
 8000e32:	d510      	bpl.n	8000e56 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	0750      	lsls	r0, r2, #29
 8000e38:	d50d      	bpl.n	8000e56 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e3a:	f06f 0204 	mvn.w	r2, #4
 8000e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e40:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e42:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e44:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e48:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e4a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e4c:	d075      	beq.n	8000f3a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e4e:	f7ff ffd4 	bl	8000dfa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e52:	2300      	movs	r3, #0
 8000e54:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	691a      	ldr	r2, [r3, #16]
 8000e5a:	0711      	lsls	r1, r2, #28
 8000e5c:	d50f      	bpl.n	8000e7e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	0712      	lsls	r2, r2, #28
 8000e62:	d50c      	bpl.n	8000e7e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e64:	f06f 0208 	mvn.w	r2, #8
 8000e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e6a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e6c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e6e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e70:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e72:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e74:	d067      	beq.n	8000f46 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e76:	f7ff ffc0 	bl	8000dfa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	06d0      	lsls	r0, r2, #27
 8000e84:	d510      	bpl.n	8000ea8 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	06d1      	lsls	r1, r2, #27
 8000e8a:	d50d      	bpl.n	8000ea8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e8c:	f06f 0210 	mvn.w	r2, #16
 8000e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e92:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e94:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e96:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e9a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e9c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e9e:	d058      	beq.n	8000f52 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ea0:	f7ff ffab 	bl	8000dfa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	07d2      	lsls	r2, r2, #31
 8000eae:	d508      	bpl.n	8000ec2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	07d0      	lsls	r0, r2, #31
 8000eb4:	d505      	bpl.n	8000ec2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000eb6:	f06f 0201 	mvn.w	r2, #1
 8000eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f000 fa63 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	0611      	lsls	r1, r2, #24
 8000ec8:	d508      	bpl.n	8000edc <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	0612      	lsls	r2, r2, #24
 8000ece:	d505      	bpl.n	8000edc <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f000 f89f 	bl	800101a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	05d0      	lsls	r0, r2, #23
 8000ee2:	d508      	bpl.n	8000ef6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	0611      	lsls	r1, r2, #24
 8000ee8:	d505      	bpl.n	8000ef6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f000 f893 	bl	800101c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	0652      	lsls	r2, r2, #25
 8000efc:	d508      	bpl.n	8000f10 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	0650      	lsls	r0, r2, #25
 8000f02:	d505      	bpl.n	8000f10 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f7ff ff77 	bl	8000dfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	0691      	lsls	r1, r2, #26
 8000f16:	d522      	bpl.n	8000f5e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	0692      	lsls	r2, r2, #26
 8000f1c:	d51f      	bpl.n	8000f5e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f1e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000f22:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f24:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000f2a:	f000 b875 	b.w	8001018 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f2e:	f7ff ff63 	bl	8000df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f32:	4620      	mov	r0, r4
 8000f34:	f7ff ff62 	bl	8000dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8000f38:	e776      	b.n	8000e28 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f3a:	f7ff ff5d 	bl	8000df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f7ff ff5c 	bl	8000dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8000f44:	e785      	b.n	8000e52 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f46:	f7ff ff57 	bl	8000df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f7ff ff56 	bl	8000dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8000f50:	e793      	b.n	8000e7a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f52:	f7ff ff51 	bl	8000df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f56:	4620      	mov	r0, r4
 8000f58:	f7ff ff50 	bl	8000dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8000f5c:	e7a2      	b.n	8000ea4 <HAL_TIM_IRQHandler+0xa4>
 8000f5e:	bd10      	pop	{r4, pc}

08000f60 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8000f62:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f64:	4290      	cmp	r0, r2
{
 8000f66:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f68:	d002      	beq.n	8000f70 <TIM_Base_SetConfig+0x10>
 8000f6a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f6e:	d109      	bne.n	8000f84 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000f70:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f76:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000f78:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f7c:	d00d      	beq.n	8000f9a <TIM_Base_SetConfig+0x3a>
 8000f7e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f82:	d00a      	beq.n	8000f9a <TIM_Base_SetConfig+0x3a>
 8000f84:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <TIM_Base_SetConfig+0x80>)
 8000f86:	4290      	cmp	r0, r2
 8000f88:	d007      	beq.n	8000f9a <TIM_Base_SetConfig+0x3a>
 8000f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f8e:	4290      	cmp	r0, r2
 8000f90:	d003      	beq.n	8000f9a <TIM_Base_SetConfig+0x3a>
 8000f92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f96:	4290      	cmp	r0, r2
 8000f98:	d103      	bne.n	8000fa2 <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f9a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fa0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000fa2:	694a      	ldr	r2, [r1, #20]
 8000fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fa8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000faa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fac:	688b      	ldr	r3, [r1, #8]
 8000fae:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000fb0:	680b      	ldr	r3, [r1, #0]
 8000fb2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <TIM_Base_SetConfig+0x7c>)
 8000fb6:	4298      	cmp	r0, r3
 8000fb8:	d00b      	beq.n	8000fd2 <TIM_Base_SetConfig+0x72>
 8000fba:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	d007      	beq.n	8000fd2 <TIM_Base_SetConfig+0x72>
 8000fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d003      	beq.n	8000fd2 <TIM_Base_SetConfig+0x72>
 8000fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fce:	4298      	cmp	r0, r3
 8000fd0:	d101      	bne.n	8000fd6 <TIM_Base_SetConfig+0x76>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000fd2:	690b      	ldr	r3, [r1, #16]
 8000fd4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	6143      	str	r3, [r0, #20]
 8000fda:	bd10      	pop	{r4, pc}
 8000fdc:	40012c00 	.word	0x40012c00
 8000fe0:	40014000 	.word	0x40014000

08000fe4 <HAL_TIM_Base_Init>:
{
 8000fe4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	b1a0      	cbz	r0, 8001014 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000fea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000fee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ff2:	b91b      	cbnz	r3, 8000ffc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000ff4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000ff8:	f000 fa9e 	bl	8001538 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001002:	6820      	ldr	r0, [r4, #0]
 8001004:	1d21      	adds	r1, r4, #4
 8001006:	f7ff ffab 	bl	8000f60 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800100a:	2301      	movs	r3, #1
 800100c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001010:	2000      	movs	r0, #0
 8001012:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001014:	2001      	movs	r0, #1
}
 8001016:	bd10      	pop	{r4, pc}

08001018 <HAL_TIMEx_CommutCallback>:
 8001018:	4770      	bx	lr

0800101a <HAL_TIMEx_BreakCallback>:
 800101a:	4770      	bx	lr

0800101c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800101c:	4770      	bx	lr
	...

08001020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001020:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001022:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001024:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001026:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001028:	681d      	ldr	r5, [r3, #0]
{
 800102a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800102c:	6900      	ldr	r0, [r0, #16]
 800102e:	4302      	orrs	r2, r0
 8001030:	6960      	ldr	r0, [r4, #20]
 8001032:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001034:	4854      	ldr	r0, [pc, #336]	; (8001188 <UART_SetConfig+0x168>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001036:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001038:	4028      	ands	r0, r5
 800103a:	4302      	orrs	r2, r0
 800103c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	68e0      	ldr	r0, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001042:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001044:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001048:	4302      	orrs	r2, r0
 800104a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800104c:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800104e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001050:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8001054:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001056:	4302      	orrs	r2, r0
 8001058:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800105a:	4a4c      	ldr	r2, [pc, #304]	; (800118c <UART_SetConfig+0x16c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d111      	bne.n	8001084 <UART_SetConfig+0x64>
 8001060:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <UART_SetConfig+0x170>)
 8001062:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <UART_SetConfig+0x174>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800106a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	d024      	beq.n	80010bc <UART_SetConfig+0x9c>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001072:	2b08      	cmp	r3, #8
 8001074:	d820      	bhi.n	80010b8 <UART_SetConfig+0x98>
 8001076:	e8df f003 	tbb	[pc, r3]
 800107a:	6d5b      	.short	0x6d5b
 800107c:	1f791f70 	.word	0x1f791f70
 8001080:	1f1f      	.short	0x1f1f
 8001082:	7c          	.byte	0x7c
 8001083:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001084:	4a44      	ldr	r2, [pc, #272]	; (8001198 <UART_SetConfig+0x178>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d003      	beq.n	8001092 <UART_SetConfig+0x72>
 800108a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800108e:	4293      	cmp	r3, r2
 8001090:	d174      	bne.n	800117c <UART_SetConfig+0x15c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001092:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001096:	d14b      	bne.n	8001130 <UART_SetConfig+0x110>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001098:	f7ff fd76 	bl	8000b88 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800109c:	6861      	ldr	r1, [r4, #4]
 800109e:	084a      	lsrs	r2, r1, #1
 80010a0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80010a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80010aa:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80010ac:	f1a3 0110 	sub.w	r1, r3, #16
 80010b0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80010b4:	4291      	cmp	r1, r2
 80010b6:	d930      	bls.n	800111a <UART_SetConfig+0xfa>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
 80010ba:	e035      	b.n	8001128 <UART_SetConfig+0x108>
    switch (clocksource)
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d829      	bhi.n	8001114 <UART_SetConfig+0xf4>
 80010c0:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <UART_SetConfig+0xa8>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	08001099 	.word	0x08001099
 80010cc:	080010ed 	.word	0x080010ed
 80010d0:	080010f3 	.word	0x080010f3
 80010d4:	08001115 	.word	0x08001115
 80010d8:	08001105 	.word	0x08001105
 80010dc:	08001115 	.word	0x08001115
 80010e0:	08001115 	.word	0x08001115
 80010e4:	08001115 	.word	0x08001115
 80010e8:	0800110b 	.word	0x0800110b
        pclk = HAL_RCC_GetPCLK2Freq();
 80010ec:	f7ff fd64 	bl	8000bb8 <HAL_RCC_GetPCLK2Freq>
 80010f0:	e7d4      	b.n	800109c <UART_SetConfig+0x7c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80010f2:	6860      	ldr	r0, [r4, #4]
 80010f4:	0843      	lsrs	r3, r0, #1
 80010f6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80010fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8001102:	e7d1      	b.n	80010a8 <UART_SetConfig+0x88>
        pclk = HAL_RCC_GetSysClockFreq();
 8001104:	f7ff fc60 	bl	80009c8 <HAL_RCC_GetSysClockFreq>
 8001108:	e7c8      	b.n	800109c <UART_SetConfig+0x7c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800110a:	6860      	ldr	r0, [r4, #4]
 800110c:	0843      	lsrs	r3, r0, #1
 800110e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001112:	e7f4      	b.n	80010fe <UART_SetConfig+0xde>
        ret = HAL_ERROR;
 8001114:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001116:	2300      	movs	r3, #0
 8001118:	e7c8      	b.n	80010ac <UART_SetConfig+0x8c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800111a:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 800111e:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001120:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001124:	4313      	orrs	r3, r2
 8001126:	60cb      	str	r3, [r1, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001128:	2300      	movs	r3, #0
 800112a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800112c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800112e:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001130:	f7ff fd2a 	bl	8000b88 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001134:	6862      	ldr	r2, [r4, #4]
 8001136:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800113a:	fbb3 f3f2 	udiv	r3, r3, r2
 800113e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001140:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001142:	f1a3 0110 	sub.w	r1, r3, #16
 8001146:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800114a:	4291      	cmp	r1, r2
 800114c:	d8b4      	bhi.n	80010b8 <UART_SetConfig+0x98>
      huart->Instance->BRR = usartdiv;
 800114e:	6822      	ldr	r2, [r4, #0]
 8001150:	60d3      	str	r3, [r2, #12]
 8001152:	e7e9      	b.n	8001128 <UART_SetConfig+0x108>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001154:	f7ff fd30 	bl	8000bb8 <HAL_RCC_GetPCLK2Freq>
 8001158:	e7ec      	b.n	8001134 <UART_SetConfig+0x114>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800115a:	6860      	ldr	r0, [r4, #4]
 800115c:	0843      	lsrs	r3, r0, #1
 800115e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001162:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001166:	fbb3 f3f0 	udiv	r3, r3, r0
 800116a:	e7e8      	b.n	800113e <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetSysClockFreq();
 800116c:	f7ff fc2c 	bl	80009c8 <HAL_RCC_GetSysClockFreq>
 8001170:	e7e0      	b.n	8001134 <UART_SetConfig+0x114>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001172:	6860      	ldr	r0, [r4, #4]
 8001174:	0843      	lsrs	r3, r0, #1
 8001176:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800117a:	e7f4      	b.n	8001166 <UART_SetConfig+0x146>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800117c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001180:	d0c8      	beq.n	8001114 <UART_SetConfig+0xf4>
        ret = HAL_ERROR;
 8001182:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001184:	2300      	movs	r3, #0
 8001186:	e7dc      	b.n	8001142 <UART_SetConfig+0x122>
 8001188:	efff69f3 	.word	0xefff69f3
 800118c:	40013800 	.word	0x40013800
 8001190:	40021000 	.word	0x40021000
 8001194:	080016f4 	.word	0x080016f4
 8001198:	40004400 	.word	0x40004400

0800119c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800119c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800119e:	07da      	lsls	r2, r3, #31
{
 80011a0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80011a2:	d506      	bpl.n	80011b2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80011a4:	6801      	ldr	r1, [r0, #0]
 80011a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80011a8:	684a      	ldr	r2, [r1, #4]
 80011aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80011ae:	4322      	orrs	r2, r4
 80011b0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80011b2:	079c      	lsls	r4, r3, #30
 80011b4:	d506      	bpl.n	80011c4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80011b6:	6801      	ldr	r1, [r0, #0]
 80011b8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80011ba:	684a      	ldr	r2, [r1, #4]
 80011bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011c0:	4322      	orrs	r2, r4
 80011c2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80011c4:	0759      	lsls	r1, r3, #29
 80011c6:	d506      	bpl.n	80011d6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80011c8:	6801      	ldr	r1, [r0, #0]
 80011ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80011cc:	684a      	ldr	r2, [r1, #4]
 80011ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011d2:	4322      	orrs	r2, r4
 80011d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80011d6:	071a      	lsls	r2, r3, #28
 80011d8:	d506      	bpl.n	80011e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80011da:	6801      	ldr	r1, [r0, #0]
 80011dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80011de:	684a      	ldr	r2, [r1, #4]
 80011e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e4:	4322      	orrs	r2, r4
 80011e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80011e8:	06dc      	lsls	r4, r3, #27
 80011ea:	d506      	bpl.n	80011fa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80011ec:	6801      	ldr	r1, [r0, #0]
 80011ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80011f0:	688a      	ldr	r2, [r1, #8]
 80011f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011f6:	4322      	orrs	r2, r4
 80011f8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80011fa:	0699      	lsls	r1, r3, #26
 80011fc:	d506      	bpl.n	800120c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80011fe:	6801      	ldr	r1, [r0, #0]
 8001200:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001202:	688a      	ldr	r2, [r1, #8]
 8001204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001208:	4322      	orrs	r2, r4
 800120a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800120c:	065a      	lsls	r2, r3, #25
 800120e:	d50f      	bpl.n	8001230 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001210:	6801      	ldr	r1, [r0, #0]
 8001212:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001214:	684a      	ldr	r2, [r1, #4]
 8001216:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800121a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800121c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001220:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001222:	d105      	bne.n	8001230 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001224:	684a      	ldr	r2, [r1, #4]
 8001226:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001228:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800122c:	4322      	orrs	r2, r4
 800122e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001230:	061b      	lsls	r3, r3, #24
 8001232:	d506      	bpl.n	8001242 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001234:	6802      	ldr	r2, [r0, #0]
 8001236:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001238:	6853      	ldr	r3, [r2, #4]
 800123a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800123e:	430b      	orrs	r3, r1
 8001240:	6053      	str	r3, [r2, #4]
 8001242:	bd10      	pop	{r4, pc}

08001244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001248:	9d06      	ldr	r5, [sp, #24]
 800124a:	4604      	mov	r4, r0
 800124c:	460f      	mov	r7, r1
 800124e:	4616      	mov	r6, r2
 8001250:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001252:	6821      	ldr	r1, [r4, #0]
 8001254:	69ca      	ldr	r2, [r1, #28]
 8001256:	ea37 0302 	bics.w	r3, r7, r2
 800125a:	bf0c      	ite	eq
 800125c:	2201      	moveq	r2, #1
 800125e:	2200      	movne	r2, #0
 8001260:	42b2      	cmp	r2, r6
 8001262:	d002      	beq.n	800126a <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001264:	2000      	movs	r0, #0
}
 8001266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800126a:	1c68      	adds	r0, r5, #1
 800126c:	d0f2      	beq.n	8001254 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800126e:	f7fe ffed 	bl	800024c <HAL_GetTick>
 8001272:	eba0 0008 	sub.w	r0, r0, r8
 8001276:	4285      	cmp	r5, r0
 8001278:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800127a:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127c:	d300      	bcc.n	8001280 <UART_WaitOnFlagUntilTimeout+0x3c>
 800127e:	b97d      	cbnz	r5, 80012a0 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001284:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001286:	6883      	ldr	r3, [r0, #8]
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800128e:	2320      	movs	r3, #32
 8001290:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001292:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001294:	2300      	movs	r3, #0
 8001296:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 800129a:	2003      	movs	r0, #3
 800129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80012a0:	075a      	lsls	r2, r3, #29
 80012a2:	d5d6      	bpl.n	8001252 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80012a4:	69c3      	ldr	r3, [r0, #28]
 80012a6:	051b      	lsls	r3, r3, #20
 80012a8:	d5d3      	bpl.n	8001252 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80012aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ae:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012b0:	6803      	ldr	r3, [r0, #0]
 80012b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80012b6:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012b8:	6883      	ldr	r3, [r0, #8]
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80012c0:	2320      	movs	r3, #32
 80012c2:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80012c4:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80012c6:	67e3      	str	r3, [r4, #124]	; 0x7c
 80012c8:	e7e4      	b.n	8001294 <UART_WaitOnFlagUntilTimeout+0x50>

080012ca <UART_CheckIdleState>:
{
 80012ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012cc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012ce:	2600      	movs	r6, #0
 80012d0:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80012d2:	f7fe ffbb 	bl	800024c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80012dc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80012de:	d415      	bmi.n	800130c <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	075b      	lsls	r3, r3, #29
 80012e6:	d50a      	bpl.n	80012fe <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80012e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2200      	movs	r2, #0
 80012f0:	462b      	mov	r3, r5
 80012f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80012f6:	4620      	mov	r0, r4
 80012f8:	f7ff ffa4 	bl	8001244 <UART_WaitOnFlagUntilTimeout>
 80012fc:	b990      	cbnz	r0, 8001324 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80012fe:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001300:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001302:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001304:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001308:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 800130a:	e00c      	b.n	8001326 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800130c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4632      	mov	r2, r6
 8001314:	4603      	mov	r3, r0
 8001316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff ff92 	bl	8001244 <UART_WaitOnFlagUntilTimeout>
 8001320:	2800      	cmp	r0, #0
 8001322:	d0dd      	beq.n	80012e0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001324:	2003      	movs	r0, #3
}
 8001326:	b002      	add	sp, #8
 8001328:	bd70      	pop	{r4, r5, r6, pc}

0800132a <HAL_UART_Init>:
{
 800132a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800132c:	4604      	mov	r4, r0
 800132e:	b340      	cbz	r0, 8001382 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001330:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001332:	b91b      	cbnz	r3, 800133c <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001334:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001338:	f000 f91c 	bl	8001574 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800133c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800133e:	2324      	movs	r3, #36	; 0x24
 8001340:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800134a:	4620      	mov	r0, r4
 800134c:	f7ff fe68 	bl	8001020 <UART_SetConfig>
 8001350:	2801      	cmp	r0, #1
 8001352:	d016      	beq.n	8001382 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001356:	b113      	cbz	r3, 800135e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff ff1f 	bl	800119c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800136e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001376:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800137e:	f7ff bfa4 	b.w	80012ca <UART_CheckIdleState>
}
 8001382:	2001      	movs	r0, #1
 8001384:	bd10      	pop	{r4, pc}
	...

08001388 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
//timer period elapsed Call Back

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim16)
{
 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001388:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138c:	4801      	ldr	r0, [pc, #4]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0xc>)
 800138e:	f7ff b88c 	b.w	80004aa <HAL_GPIO_TogglePin>
 8001392:	bf00      	nop
 8001394:	48000400 	.word	0x48000400

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b530      	push	{r4, r5, lr}
 800139a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139c:	2228      	movs	r2, #40	; 0x28
 800139e:	2100      	movs	r1, #0
 80013a0:	a805      	add	r0, sp, #20
 80013a2:	f000 f983 	bl	80016ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a6:	2214      	movs	r2, #20
 80013a8:	2100      	movs	r1, #0
 80013aa:	4668      	mov	r0, sp
 80013ac:	f000 f97e 	bl	80016ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b0:	2234      	movs	r2, #52	; 0x34
 80013b2:	2100      	movs	r1, #0
 80013b4:	a80f      	add	r0, sp, #60	; 0x3c
 80013b6:	f000 f979 	bl	80016ac <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ba:	2301      	movs	r3, #1
 80013bc:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013be:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80013c6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80013ca:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013cc:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d0:	f7ff f872 	bl	80004b8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2500      	movs	r5, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d8:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013dc:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e6:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e8:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ea:	f7ff fb1f 	bl	8000a2c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 80013ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f2:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 80013f4:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80013f6:	9519      	str	r5, [sp, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f7ff fbf6 	bl	8000be8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80013fc:	b01d      	add	sp, #116	; 0x74
 80013fe:	bd30      	pop	{r4, r5, pc}

08001400 <main>:
{
 8001400:	b500      	push	{lr}
 8001402:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001404:	f7fe ff04 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001408:	f7ff ffc6 	bl	8001398 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	2214      	movs	r2, #20
 800140e:	2100      	movs	r1, #0
 8001410:	eb0d 0002 	add.w	r0, sp, r2
 8001414:	f000 f94a 	bl	80016ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <main+0xe0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141a:	4832      	ldr	r0, [pc, #200]	; (80014e4 <main+0xe4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800143c:	9202      	str	r2, [sp, #8]
 800143e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800144e:	9203      	str	r2, [sp, #12]
 8001450:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	695a      	ldr	r2, [r3, #20]
 8001454:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001458:	615a      	str	r2, [r3, #20]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001464:	f44f 5100 	mov.w	r1, #8192	; 0x2000

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800146a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001470:	f7ff f816 	bl	80004a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <main+0xe8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001476:	481d      	ldr	r0, [pc, #116]	; (80014ec <main+0xec>)
  GPIO_InitStruct.Pin = B1_Pin;
 8001478:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001480:	f7fe ff54 	bl	800032c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001486:	a905      	add	r1, sp, #20
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <main+0xe4>)
  GPIO_InitStruct.Pin = LD2_Pin;
 800148a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	9306      	str	r3, [sp, #24]
  htim16.Instance = TIM16;
 800148e:	4d18      	ldr	r5, [pc, #96]	; (80014f0 <main+0xf0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001494:	f7fe ff4a 	bl	800032c <HAL_GPIO_Init>
  htim16.Init.Prescaler = 999;
 8001498:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <main+0xf4>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	60ac      	str	r4, [r5, #8]
  htim16.Init.Prescaler = 999;
 800149c:	f240 33e7 	movw	r3, #999	; 0x3e7
 80014a0:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014a4:	4628      	mov	r0, r5
  htim16.Init.Period = 15999;
 80014a6:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80014aa:	60eb      	str	r3, [r5, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	612c      	str	r4, [r5, #16]
  htim16.Init.RepetitionCounter = 0;
 80014ae:	616c      	str	r4, [r5, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014b2:	f7ff fd97 	bl	8000fe4 <HAL_TIM_Base_Init>
  huart2.Instance = USART2;
 80014b6:	4810      	ldr	r0, [pc, #64]	; (80014f8 <main+0xf8>)
  huart2.Init.BaudRate = 38400;
 80014b8:	4910      	ldr	r1, [pc, #64]	; (80014fc <main+0xfc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 80014bc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014c0:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c4:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c6:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c8:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ca:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014cc:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ce:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d0:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d2:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d4:	f7ff ff29 	bl	800132a <HAL_UART_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 80014d8:	4628      	mov	r0, r5
 80014da:	f7ff fc77 	bl	8000dcc <HAL_TIM_Base_Start_IT>
 80014de:	e7fe      	b.n	80014de <main+0xde>
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48000400 	.word	0x48000400
 80014e8:	10210000 	.word	0x10210000
 80014ec:	48000800 	.word	0x48000800
 80014f0:	200000ac 	.word	0x200000ac
 80014f4:	40014400 	.word	0x40014400
 80014f8:	2000002c 	.word	0x2000002c
 80014fc:	40004400 	.word	0x40004400

08001500 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_MspInit+0x34>)
{
 8001502:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	619a      	str	r2, [r3, #24]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	f002 0201 	and.w	r2, r2, #1
 8001512:	9200      	str	r2, [sp, #0]
 8001514:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	69da      	ldr	r2, [r3, #28]
 8001518:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800151c:	61da      	str	r2, [r3, #28]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001526:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152a:	f7fe fe95 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	b003      	add	sp, #12
 8001530:	f85d fb04 	ldr.w	pc, [sp], #4
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM16)
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_TIM_Base_MspInit+0x38>)
 800153c:	6802      	ldr	r2, [r0, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d112      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001542:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001546:	2019      	movs	r0, #25
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800154e:	619a      	str	r2, [r3, #24]
 8001550:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800155a:	4611      	mov	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 800155c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800155e:	f7fe fe8d 	bl	800027c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001562:	2019      	movs	r0, #25
 8001564:	f7fe febe 	bl	80002e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001568:	b003      	add	sp, #12
 800156a:	f85d fb04 	ldr.w	pc, [sp], #4
 800156e:	bf00      	nop
 8001570:	40014400 	.word	0x40014400

08001574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001574:	b510      	push	{r4, lr}
 8001576:	4604      	mov	r4, r0
 8001578:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	2214      	movs	r2, #20
 800157c:	2100      	movs	r1, #0
 800157e:	a803      	add	r0, sp, #12
 8001580:	f000 f894 	bl	80016ac <memset>
  if(huart->Instance==USART2)
 8001584:	6822      	ldr	r2, [r4, #0]
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_UART_MspInit+0x5c>)
 8001588:	429a      	cmp	r2, r3
 800158a:	d11e      	bne.n	80015ca <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001598:	61da      	str	r2, [r3, #28]
 800159a:	69da      	ldr	r2, [r3, #28]
 800159c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80015a0:	9201      	str	r2, [sp, #4]
 80015a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015b6:	230c      	movs	r3, #12
 80015b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c2:	2307      	movs	r3, #7
 80015c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f7fe feb1 	bl	800032c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ca:	b008      	add	sp, #32
 80015cc:	bd10      	pop	{r4, pc}
 80015ce:	bf00      	nop
 80015d0:	40004400 	.word	0x40004400

080015d4 <NMI_Handler>:
 80015d4:	4770      	bx	lr

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	e7fe      	b.n	80015da <BusFault_Handler>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler>

080015de <SVC_Handler>:
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e4:	f7fe be26 	b.w	8000234 <HAL_IncTick>

080015e8 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80015e8:	4801      	ldr	r0, [pc, #4]	; (80015f0 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80015ea:	f7ff bc09 	b.w	8000e00 <HAL_TIM_IRQHandler>
 80015ee:	bf00      	nop
 80015f0:	200000ac 	.word	0x200000ac

080015f4 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SystemInit+0x18>)
 80015f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80015fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80015fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001648 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001614:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001616:	e003      	b.n	8001620 <LoopCopyDataInit>

08001618 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800161a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800161c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800161e:	3104      	adds	r1, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001624:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001626:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001628:	d3f6      	bcc.n	8001618 <CopyDataInit>
	ldr	r2, =_sbss
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <LoopForever+0x12>)
	b	LoopFillZerobss
 800162c:	e002      	b.n	8001634 <LoopFillZerobss>

0800162e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800162e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001630:	f842 3b04 	str.w	r3, [r2], #4

08001634 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <LoopForever+0x16>)
	cmp	r2, r3
 8001636:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001638:	d3f9      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800163a:	f7ff ffdb 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163e:	f000 f811 	bl	8001664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001642:	f7ff fedd 	bl	8001400 <main>

08001646 <LoopForever>:

LoopForever:
    b LoopForever
 8001646:	e7fe      	b.n	8001646 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001648:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 800164c:	08001718 	.word	0x08001718
	ldr	r0, =_sdata
 8001650:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001654:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001658:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800165c:	200000ec 	.word	0x200000ec

08001660 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC1_IRQHandler>
	...

08001664 <__libc_init_array>:
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	4e0d      	ldr	r6, [pc, #52]	; (800169c <__libc_init_array+0x38>)
 8001668:	4c0d      	ldr	r4, [pc, #52]	; (80016a0 <__libc_init_array+0x3c>)
 800166a:	1ba4      	subs	r4, r4, r6
 800166c:	10a4      	asrs	r4, r4, #2
 800166e:	2500      	movs	r5, #0
 8001670:	42a5      	cmp	r5, r4
 8001672:	d109      	bne.n	8001688 <__libc_init_array+0x24>
 8001674:	4e0b      	ldr	r6, [pc, #44]	; (80016a4 <__libc_init_array+0x40>)
 8001676:	4c0c      	ldr	r4, [pc, #48]	; (80016a8 <__libc_init_array+0x44>)
 8001678:	f000 f820 	bl	80016bc <_init>
 800167c:	1ba4      	subs	r4, r4, r6
 800167e:	10a4      	asrs	r4, r4, #2
 8001680:	2500      	movs	r5, #0
 8001682:	42a5      	cmp	r5, r4
 8001684:	d105      	bne.n	8001692 <__libc_init_array+0x2e>
 8001686:	bd70      	pop	{r4, r5, r6, pc}
 8001688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800168c:	4798      	blx	r3
 800168e:	3501      	adds	r5, #1
 8001690:	e7ee      	b.n	8001670 <__libc_init_array+0xc>
 8001692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001696:	4798      	blx	r3
 8001698:	3501      	adds	r5, #1
 800169a:	e7f2      	b.n	8001682 <__libc_init_array+0x1e>
 800169c:	08001710 	.word	0x08001710
 80016a0:	08001710 	.word	0x08001710
 80016a4:	08001710 	.word	0x08001710
 80016a8:	08001714 	.word	0x08001714

080016ac <memset>:
 80016ac:	4402      	add	r2, r0
 80016ae:	4603      	mov	r3, r0
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d100      	bne.n	80016b6 <memset+0xa>
 80016b4:	4770      	bx	lr
 80016b6:	f803 1b01 	strb.w	r1, [r3], #1
 80016ba:	e7f9      	b.n	80016b0 <memset+0x4>

080016bc <_init>:
 80016bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016be:	bf00      	nop
 80016c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016c2:	bc08      	pop	{r3}
 80016c4:	469e      	mov	lr, r3
 80016c6:	4770      	bx	lr

080016c8 <_fini>:
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ca:	bf00      	nop
 80016cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ce:	bc08      	pop	{r3}
 80016d0:	469e      	mov	lr, r3
 80016d2:	4770      	bx	lr
