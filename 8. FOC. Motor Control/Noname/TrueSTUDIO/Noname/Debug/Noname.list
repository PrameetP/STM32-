
Noname.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007d14  08007d14  00017d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000708  20000000  08007d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003c4  20000708  08008420  00020708  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000acc  08008420  00020acc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020708  2**0
                  CONTENTS, READONLY
  9 .debug_line   00014f63  00000000  00000000  00020738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0005131a  00000000  00000000  0003569b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006c83  00000000  00000000  000869b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001968  00000000  00000000  0008d638  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000047f0  00000000  00000000  0008efa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002118d  00000000  00000000  00093790  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000bb40  00000000  00000000  000b491d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000c045d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004b0c  00000000  00000000  000c04dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000708 	.word	0x20000708
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a10 	.word	0x08007a10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000070c 	.word	0x2000070c
 80001c4:	08007a10 	.word	0x08007a10

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f002 fed9 	bl	8002fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f007 fbdf 	bl	80079b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 f879 	bl	80002f0 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8000204:	08007d18 	.word	0x08007d18
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000708 	.word	0x20000708
	ldr	r2, =_sbss
 8000210:	20000708 	.word	0x20000708
	ldr	r3, = _ebss
 8000214:	20000acc 	.word	0x20000acc

08000218 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <BusFault_Handler>
	...

0800021c <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 800021c:	4a02      	ldr	r2, [pc, #8]	; (8000228 <DAC_Init+0xc>)
 800021e:	6813      	ldr	r3, [r2, #0]
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6013      	str	r3, [r2, #0]
 8000226:	4770      	bx	lr
 8000228:	40007400 	.word	0x40007400

0800022c <DAC_Exec>:
  *         variables will be provided in the related output channels. This is 
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance. 
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 800022c:	b510      	push	{r4, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;
  
  bCh_var = pDacHandle->bChannel_variable[DAC_CH0];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 800022e:	2200      	movs	r2, #0
 8000230:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8000234:	f002 fb12 	bl	800285c <UI_GetReg>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000238:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800023c:	fa93 f3a3 	rbit	r3, r3
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8000240:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000244:	fab3 f383 	clz	r3, r3
 8000248:	40da      	lsrs	r2, r3
 800024a:	4c09      	ldr	r4, [pc, #36]	; (8000270 <DAC_Exec+0x44>)
  SET_BIT(DACx->SWTRIGR,
 800024c:	4909      	ldr	r1, [pc, #36]	; (8000274 <DAC_Exec+0x48>)
  
  MODIFY_REG(*preg,
 800024e:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8000252:	b200      	sxth	r0, r0
 8000254:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800025c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8000260:	4318      	orrs	r0, r3
 8000262:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8000266:	684b      	ldr	r3, [r1, #4]
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	604b      	str	r3, [r1, #4]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	40007408 	.word	0x40007408
 8000274:	40007400 	.word	0x40007400

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	2100      	movs	r1, #0
{
 800027c:	b09d      	sub	sp, #116	; 0x74
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000280:	a805      	add	r0, sp, #20
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	f007 fbbc 	bl	8007a00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	4621      	mov	r1, r4
 800028a:	a80f      	add	r0, sp, #60	; 0x3c
 800028c:	2234      	movs	r2, #52	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	9401      	str	r4, [sp, #4]
 8000290:	9400      	str	r4, [sp, #0]
 8000292:	9402      	str	r4, [sp, #8]
 8000294:	9403      	str	r4, [sp, #12]
 8000296:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000298:	f007 fbb2 	bl	8007a00 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002a0:	2203      	movs	r2, #3
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002a6:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ac:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f003 fdb8 	bl	8003e30 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c0:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	9200      	str	r2, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d4:	f004 f892 	bl	80043fc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 80002d8:	f44f 5281 	mov.w	r2, #4128	; 0x1020
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80002dc:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e0:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002e2:	9412      	str	r4, [sp, #72]	; 0x48
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 80002e4:	920f      	str	r2, [sp, #60]	; 0x3c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80002e6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e8:	f004 f9d2 	bl	8004690 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80002ec:	b01d      	add	sp, #116	; 0x74
 80002ee:	bd30      	pop	{r4, r5, pc}

080002f0 <main>:
{
 80002f0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80002f4:	b0a1      	sub	sp, #132	; 0x84
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	2400      	movs	r4, #0
  HAL_Init();
 80002f8:	f002 fe88 	bl	800300c <HAL_Init>
  SystemClock_Config();
 80002fc:	f7ff ffbc 	bl	8000278 <SystemClock_Config>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4ab5      	ldr	r2, [pc, #724]	; (80005d8 <main+0x2e8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	9415      	str	r4, [sp, #84]	; 0x54
 8000304:	9414      	str	r4, [sp, #80]	; 0x50
 8000306:	9416      	str	r4, [sp, #88]	; 0x58
 8000308:	9417      	str	r4, [sp, #92]	; 0x5c
 800030a:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	6951      	ldr	r1, [r2, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800030e:	48b3      	ldr	r0, [pc, #716]	; (80005dc <main+0x2ec>)
  hadc1.Instance = ADC1;
 8000310:	4db3      	ldr	r5, [pc, #716]	; (80005e0 <main+0x2f0>)
  hi2c1.Instance = I2C1;
 8000312:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 800060c <main+0x31c>
  htim1.Instance = TIM1;
 8000316:	4eb3      	ldr	r6, [pc, #716]	; (80005e4 <main+0x2f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000318:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800031c:	6151      	str	r1, [r2, #20]
 800031e:	6951      	ldr	r1, [r2, #20]
 8000320:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8000324:	9101      	str	r1, [sp, #4]
 8000326:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000328:	6951      	ldr	r1, [r2, #20]
 800032a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800032e:	6151      	str	r1, [r2, #20]
 8000330:	6951      	ldr	r1, [r2, #20]
 8000332:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8000336:	9102      	str	r1, [sp, #8]
 8000338:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	6951      	ldr	r1, [r2, #20]
 800033c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000340:	6151      	str	r1, [r2, #20]
 8000342:	6951      	ldr	r1, [r2, #20]
 8000344:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8000348:	9103      	str	r1, [sp, #12]
 800034a:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034c:	6951      	ldr	r1, [r2, #20]
 800034e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000352:	6151      	str	r1, [r2, #20]
 8000354:	6952      	ldr	r2, [r2, #20]
 8000356:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800035a:	9204      	str	r2, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800035c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000360:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000362:	9f04      	ldr	r7, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000364:	f003 fcb6 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000368:	4622      	mov	r2, r4
 800036a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800036e:	489e      	ldr	r0, [pc, #632]	; (80005e8 <main+0x2f8>)
 8000370:	f003 fcb0 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Start_Stop_Pin */
  GPIO_InitStruct.Pin = Start_Stop_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000374:	4a9d      	ldr	r2, [pc, #628]	; (80005ec <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000376:	489c      	ldr	r0, [pc, #624]	; (80005e8 <main+0x2f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000378:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800037a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800037e:	a914      	add	r1, sp, #80	; 0x50

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000382:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000386:	f003 fbbb 	bl	8003b00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800038a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800038e:	a914      	add	r1, sp, #80	; 0x50
 8000390:	4892      	ldr	r0, [pc, #584]	; (80005dc <main+0x2ec>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8000392:	9314      	str	r3, [sp, #80]	; 0x50

  /*Configure GPIO pins : M1_PWM_EN_U_Pin M1_PWM_EN_V_Pin M1_PWM_EN_W_Pin */
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000394:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000398:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a0:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003a2:	f003 fbad 	bl	8003b00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80003a6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003aa:	a914      	add	r1, sp, #80	; 0x50
 80003ac:	488e      	ldr	r0, [pc, #568]	; (80005e8 <main+0x2f8>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80003ae:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b0:	9715      	str	r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003b2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003b6:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ba:	f003 fba1 	bl	8003b00 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80003be:	4621      	mov	r1, r4
 80003c0:	2228      	movs	r2, #40	; 0x28
 80003c2:	a814      	add	r0, sp, #80	; 0x50
 80003c4:	f007 fb1c 	bl	8007a00 <memset>
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003c8:	f04f 0b04 	mov.w	fp, #4
  hadc1.Instance = ADC1;
 80003cc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80003d4:	2320      	movs	r3, #32
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003d6:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003d8:	e885 0006 	stmia.w	r5, {r1, r2}
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80003dc:	60eb      	str	r3, [r5, #12]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003de:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003e0:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003e2:	766c      	strb	r4, [r5, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e4:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e8:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ea:	62af      	str	r7, [r5, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 2;
 80003ec:	f8c5 901c 	str.w	r9, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003f0:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003f4:	762c      	strb	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003f6:	636f      	str	r7, [r5, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f8:	f8c5 b014 	str.w	fp, [r5, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003fc:	940d      	str	r4, [sp, #52]	; 0x34
 80003fe:	940e      	str	r4, [sp, #56]	; 0x38
 8000400:	940f      	str	r4, [sp, #60]	; 0x3c
 8000402:	9410      	str	r4, [sp, #64]	; 0x40
 8000404:	9411      	str	r4, [sp, #68]	; 0x44
 8000406:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000408:	f002 fe36 	bl	8003078 <HAL_ADC_Init>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 800040c:	2200      	movs	r2, #0
 800040e:	2340      	movs	r3, #64	; 0x40
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000410:	a914      	add	r1, sp, #80	; 0x50
 8000412:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000414:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000418:	9714      	str	r7, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800041a:	9715      	str	r7, [sp, #84]	; 0x54
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800041c:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 800041e:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000422:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000426:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800042a:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  sConfigInjected.QueueInjectedContext = ENABLE;
 800042e:	f88d 706e 	strb.w	r7, [sp, #110]	; 0x6e
  sConfigInjected.InjectedOffset = 0;
 8000432:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000434:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000436:	f003 f8c9 	bl	80035cc <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800043a:	2307      	movs	r3, #7
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800043c:	a914      	add	r1, sp, #80	; 0x50
 800043e:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000440:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000442:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000446:	f003 f8c1 	bl	80035cc <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800044a:	2306      	movs	r3, #6
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800044c:	a914      	add	r1, sp, #80	; 0x50
 800044e:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000450:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000452:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000456:	f003 f8b9 	bl	80035cc <HAL_ADCEx_InjectedConfigChannel>
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800045a:	2205      	movs	r2, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800045c:	a90d      	add	r1, sp, #52	; 0x34
 800045e:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000460:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfig.Channel = ADC_CHANNEL_2;
 8000462:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000466:	970e      	str	r7, [sp, #56]	; 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000468:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800046a:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.Offset = 0;
 800046c:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046e:	f002 ff21 	bl	80032b4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 8000472:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	a90d      	add	r1, sp, #52	; 0x34
 8000476:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_8;
 8000478:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800047a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047e:	f002 ff19 	bl	80032b4 <HAL_ADC_ConfigChannel>
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000482:	485b      	ldr	r0, [pc, #364]	; (80005f0 <main+0x300>)
  hdac.Instance = DAC;
 8000484:	4a5b      	ldr	r2, [pc, #364]	; (80005f4 <main+0x304>)
 8000486:	6002      	str	r2, [r0, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8000488:	9414      	str	r4, [sp, #80]	; 0x50
 800048a:	9415      	str	r4, [sp, #84]	; 0x54
 800048c:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800048e:	f003 fafd 	bl	8003a8c <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000492:	a914      	add	r1, sp, #80	; 0x50
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000494:	233c      	movs	r3, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000496:	4622      	mov	r2, r4
 8000498:	4855      	ldr	r0, [pc, #340]	; (80005f0 <main+0x300>)
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800049a:	9314      	str	r3, [sp, #80]	; 0x50
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800049c:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004a0:	f003 fb0a 	bl	8003ab8 <HAL_DAC_ConfigChannel>
  hi2c1.Init.Timing = 0x2000090E;
 80004a4:	4b54      	ldr	r3, [pc, #336]	; (80005f8 <main+0x308>)
  hi2c1.Instance = I2C1;
 80004a6:	4a55      	ldr	r2, [pc, #340]	; (80005fc <main+0x30c>)
  hi2c1.Init.OwnAddress1 = 0;
 80004a8:	f8c8 4008 	str.w	r4, [r8, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ac:	4640      	mov	r0, r8
  hi2c1.Init.Timing = 0x2000090E;
 80004ae:	e888 000c 	stmia.w	r8, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b2:	f8c8 700c 	str.w	r7, [r8, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b6:	f8c8 4010 	str.w	r4, [r8, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004ba:	f8c8 4014 	str.w	r4, [r8, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004be:	f8c8 4018 	str.w	r4, [r8, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c2:	f8c8 401c 	str.w	r4, [r8, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c6:	f8c8 4020 	str.w	r4, [r8, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ca:	f003 fc09 	bl	8003ce0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ce:	4621      	mov	r1, r4
 80004d0:	4640      	mov	r0, r8
 80004d2:	f003 fc5b 	bl	8003d8c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d6:	4621      	mov	r1, r4
 80004d8:	4640      	mov	r0, r8
 80004da:	f003 fc81 	bl	8003de0 <HAL_I2CEx_ConfigDigitalFilter>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004de:	4621      	mov	r1, r4
 80004e0:	222c      	movs	r2, #44	; 0x2c
 80004e2:	a814      	add	r0, sp, #80	; 0x50
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004e4:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e6:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e8:	940d      	str	r4, [sp, #52]	; 0x34
 80004ea:	940e      	str	r4, [sp, #56]	; 0x38
 80004ec:	940f      	str	r4, [sp, #60]	; 0x3c
 80004ee:	9410      	str	r4, [sp, #64]	; 0x40
 80004f0:	9411      	str	r4, [sp, #68]	; 0x44
 80004f2:	9412      	str	r4, [sp, #72]	; 0x48
 80004f4:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004f6:	9409      	str	r4, [sp, #36]	; 0x24
 80004f8:	940a      	str	r4, [sp, #40]	; 0x28
 80004fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80004fc:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fe:	9406      	str	r4, [sp, #24]
 8000500:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000502:	f007 fa7d 	bl	8007a00 <memset>
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000506:	2320      	movs	r3, #32
  htim1.Instance = TIM1;
 8000508:	4a3d      	ldr	r2, [pc, #244]	; (8000600 <main+0x310>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800050a:	60b3      	str	r3, [r6, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800050c:	f44f 7880 	mov.w	r8, #256	; 0x100
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000510:	f44f 6316 	mov.w	r3, #2400	; 0x960
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000514:	4630      	mov	r0, r6
  htim1.Instance = TIM1;
 8000516:	6032      	str	r2, [r6, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000518:	60f3      	str	r3, [r6, #12]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800051a:	6074      	str	r4, [r6, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800051c:	6177      	str	r7, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	61b4      	str	r4, [r6, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000520:	f8c6 8010 	str.w	r8, [r6, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000524:	f004 f9b4 	bl	8004890 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000528:	4630      	mov	r0, r6
 800052a:	f004 fa15 	bl	8004958 <HAL_TIM_PWM_Init>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800052e:	2310      	movs	r3, #16
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000530:	2206      	movs	r2, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000532:	a908      	add	r1, sp, #32
 8000534:	4630      	mov	r0, r6
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000536:	9208      	str	r2, [sp, #32]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000538:	9309      	str	r3, [sp, #36]	; 0x24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800053a:	2570      	movs	r5, #112	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800053c:	f004 fc32 	bl	8004da4 <HAL_TIM_SlaveConfigSynchro>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000540:	a905      	add	r1, sp, #20
 8000542:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000544:	9505      	str	r5, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000546:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000548:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800054a:	f004 fca7 	bl	8004e9c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054e:	f04f 0e60 	mov.w	lr, #96	; 0x60
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000552:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000556:	4622      	mov	r2, r4
 8000558:	a90d      	add	r1, sp, #52	; 0x34
 800055a:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800055c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000560:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000562:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000564:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000566:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000568:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800056a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056c:	f004 fa56 	bl	8004a1c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000570:	465a      	mov	r2, fp
 8000572:	a90d      	add	r1, sp, #52	; 0x34
 8000574:	4630      	mov	r0, r6
 8000576:	f004 fa51 	bl	8004a1c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800057a:	2208      	movs	r2, #8
 800057c:	a90d      	add	r1, sp, #52	; 0x34
 800057e:	4630      	mov	r0, r6
 8000580:	f004 fa4c 	bl	8004a1c <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000584:	f640 135f 	movw	r3, #2399	; 0x95f
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000588:	a90d      	add	r1, sp, #52	; 0x34
 800058a:	220c      	movs	r2, #12
 800058c:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800058e:	950d      	str	r5, [sp, #52]	; 0x34
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000590:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000592:	f004 fa43 	bl	8004a1c <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 800059a:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800059e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005a2:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80005a4:	f44f 6500 	mov.w	r5, #2048	; 0x800
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005a8:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005aa:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.Break2Filter = 7;
 80005ac:	2307      	movs	r3, #7
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80005ae:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2Filter = 7;
 80005b2:	931d      	str	r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80005b4:	9215      	str	r2, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80005b6:	9514      	str	r5, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80005b8:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.DeadTime = 0;
 80005bc:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005be:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005c0:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 80005c2:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005c4:	941e      	str	r4, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005c6:	f004 fca3 	bl	8004f10 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80005ca:	4630      	mov	r0, r6
 80005cc:	f001 fdf2 	bl	80021b4 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <main+0x314>)
 80005d2:	4d0d      	ldr	r5, [pc, #52]	; (8000608 <main+0x318>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d4:	609c      	str	r4, [r3, #8]
 80005d6:	e01b      	b.n	8000610 <main+0x320>
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48000400 	.word	0x48000400
 80005e0:	20000798 	.word	0x20000798
 80005e4:	20000810 	.word	0x20000810
 80005e8:	48000800 	.word	0x48000800
 80005ec:	10210000 	.word	0x10210000
 80005f0:	200007e8 	.word	0x200007e8
 80005f4:	40007400 	.word	0x40007400
 80005f8:	2000090e 	.word	0x2000090e
 80005fc:	40005400 	.word	0x40005400
 8000600:	40012c00 	.word	0x40012c00
 8000604:	20000854 	.word	0x20000854
 8000608:	40004400 	.word	0x40004400
 800060c:	20000744 	.word	0x20000744
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000610:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8000612:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000616:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8000618:	6059      	str	r1, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061a:	615a      	str	r2, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	60dc      	str	r4, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	611c      	str	r4, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000620:	619c      	str	r4, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000622:	61dc      	str	r4, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000624:	621c      	str	r4, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000626:	625c      	str	r4, [r3, #36]	; 0x24
  huart2.Instance = USART2;
 8000628:	601d      	str	r5, [r3, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062a:	f004 fd63 	bl	80050f4 <HAL_UART_Init>
  MX_MotorControl_Init();
 800062e:	f001 fa53 	bl	8001ad8 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000632:	463a      	mov	r2, r7
 8000634:	4659      	mov	r1, fp
 8000636:	2018      	movs	r0, #24
 8000638:	f003 f9c4 	bl	80039c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800063c:	2018      	movs	r0, #24
 800063e:	f003 f9f7 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000642:	4622      	mov	r2, r4
 8000644:	4621      	mov	r1, r4
 8000646:	2019      	movs	r0, #25
 8000648:	f003 f9bc 	bl	80039c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800064c:	2019      	movs	r0, #25
 800064e:	f003 f9ef 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8000652:	4622      	mov	r2, r4
 8000654:	4649      	mov	r1, r9
 8000656:	2012      	movs	r0, #18
 8000658:	f003 f9b4 	bl	80039c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800065c:	2012      	movs	r0, #18
 800065e:	f003 f9e7 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000662:	463a      	mov	r2, r7
 8000664:	4651      	mov	r1, sl
 8000666:	2026      	movs	r0, #38	; 0x26
 8000668:	f003 f9ac 	bl	80039c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800066c:	2026      	movs	r0, #38	; 0x26
 800066e:	f003 f9df 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000672:	2028      	movs	r0, #40	; 0x28
 8000674:	4622      	mov	r2, r4
 8000676:	4651      	mov	r1, sl
 8000678:	f003 f9a4 	bl	80039c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067c:	2028      	movs	r0, #40	; 0x28
 800067e:	f003 f9d7 	bl	8003a30 <HAL_NVIC_EnableIRQ>
        MC_ProgramSpeedRampMotor1(6000/6,100); //ramp up the motor to 6000 RPM in 100 ms Clockwise
 8000682:	2164      	movs	r1, #100	; 0x64
 8000684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000688:	f000 f82c 	bl	80006e4 <MC_ProgramSpeedRampMotor1>
        MC_StartMotor1();
 800068c:	f000 f81e 	bl	80006cc <MC_StartMotor1>
        HAL_Delay(5000);
 8000690:	f241 3088 	movw	r0, #5000	; 0x1388
 8000694:	f002 fcde 	bl	8003054 <HAL_Delay>
        MC_StopMotor1();
 8000698:	f000 f81e 	bl	80006d8 <MC_StopMotor1>
        HAL_Delay(500);
 800069c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a0:	f002 fcd8 	bl	8003054 <HAL_Delay>
        MC_ProgramSpeedRampMotor1(-6000/6,100);//ramp up the motor to 6000 RPM in 100 ms Anticlockwise
 80006a4:	2164      	movs	r1, #100	; 0x64
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <main+0x3d8>)
 80006a8:	f000 f81c 	bl	80006e4 <MC_ProgramSpeedRampMotor1>
        MC_StartMotor1();
 80006ac:	f000 f80e 	bl	80006cc <MC_StartMotor1>
        HAL_Delay(5000);
 80006b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80006b4:	f002 fcce 	bl	8003054 <HAL_Delay>
        MC_StopMotor1();
 80006b8:	f000 f80e 	bl	80006d8 <MC_StopMotor1>
        HAL_Delay(500);
 80006bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c0:	f002 fcc8 	bl	8003054 <HAL_Delay>
 80006c4:	e7dd      	b.n	8000682 <main+0x392>
 80006c6:	bf00      	nop
 80006c8:	fffffc18 	.word	0xfffffc18

080006cc <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <MC_StartMotor1+0x8>)
 80006ce:	6818      	ldr	r0, [r3, #0]
 80006d0:	f000 b844 	b.w	800075c <MCI_StartMotor>
 80006d4:	200009b8 	.word	0x200009b8

080006d8 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 80006d8:	4b01      	ldr	r3, [pc, #4]	; (80006e0 <MC_StopMotor1+0x8>)
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	f000 b848 	b.w	8000770 <MCI_StopMotor>
 80006e0:	200009b8 	.word	0x200009b8

080006e4 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <MC_ProgramSpeedRampMotor1+0xc>)
 80006e6:	460a      	mov	r2, r1
 80006e8:	4601      	mov	r1, r0
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	f000 b814 	b.w	8000718 <MCI_ExecSpeedRamp>
 80006f0:	200009b8 	.word	0x200009b8

080006f4 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <MC_GetSTMStateMotor1+0x8>)
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	f000 b882 	b.w	8000800 <MCI_GetSTMState>
 80006fc:	200009b8 	.word	0x200009b8

08000700 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000700:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000702:	2400      	movs	r4, #0
 8000704:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000706:	f8c0 400e 	str.w	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 800070a:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800070c:	7604      	strb	r4, [r0, #24]
  pHandle->pFOCVars = pFOCVars;
 800070e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
}
 8000712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000716:	4770      	bx	lr

08000718 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000718:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 800071a:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 800071c:	82c2      	strh	r2, [r0, #22]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800071e:	7303      	strb	r3, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000720:	7603      	strb	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8000722:	7643      	strb	r3, [r0, #25]
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000728:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 800072a:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800072c:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800072e:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000730:	7305      	strb	r5, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000732:	7604      	strb	r4, [r0, #24]
  pHandle->hFinalTorque = hFinalTorque;
 8000734:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000736:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000738:	7643      	strb	r3, [r0, #25]
}
 800073a:	bc30      	pop	{r4, r5}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000740:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000742:	2201      	movs	r2, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000744:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000746:	2300      	movs	r3, #0
{
 8000748:	b083      	sub	sp, #12
  pHandle->Iqdref.q = Iqdref.q;
 800074a:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800074e:	7304      	strb	r4, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000750:	7602      	strb	r2, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000752:	7643      	strb	r3, [r0, #25]
}
 8000754:	b003      	add	sp, #12
 8000756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800075a:	4770      	bx	lr

0800075c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 800075c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800075e:	2103      	movs	r1, #3
{
 8000760:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000762:	6800      	ldr	r0, [r0, #0]
 8000764:	f006 f97c 	bl	8006a60 <STM_NextState>

  if ( RetVal == true )
 8000768:	b108      	cbz	r0, 800076e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800076a:	2301      	movs	r3, #1
 800076c:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 800076e:	bd10      	pop	{r4, pc}

08000770 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000770:	6800      	ldr	r0, [r0, #0]
 8000772:	2107      	movs	r1, #7
 8000774:	f006 b974 	b.w	8006a60 <STM_NextState>

08000778 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000778:	6800      	ldr	r0, [r0, #0]
 800077a:	f006 b9e9 	b.w	8006b50 <STM_FaultAcknowledged>
 800077e:	bf00      	nop

08000780 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000780:	6800      	ldr	r0, [r0, #0]
 8000782:	2101      	movs	r1, #1
 8000784:	f006 b96c 	b.w	8006a60 <STM_NextState>

08000788 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000788:	b110      	cbz	r0, 8000790 <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800078a:	7e03      	ldrb	r3, [r0, #24]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d000      	beq.n	8000792 <MCI_ExecBufferedCommands+0xa>
 8000790:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 8000792:	7b01      	ldrb	r1, [r0, #12]
 8000794:	2902      	cmp	r1, #2
{
 8000796:	b510      	push	{r4, lr}
 8000798:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 800079a:	d00f      	beq.n	80007bc <MCI_ExecBufferedCommands+0x34>
 800079c:	2903      	cmp	r1, #3
 800079e:	d004      	beq.n	80007aa <MCI_ExecBufferedCommands+0x22>
 80007a0:	2901      	cmp	r1, #1
 80007a2:	d01d      	beq.n	80007e0 <MCI_ExecBufferedCommands+0x58>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80007a4:	2303      	movs	r3, #3
 80007a6:	7623      	strb	r3, [r4, #24]
 80007a8:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80007aa:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80007ac:	f8d0 1012 	ldr.w	r1, [r0, #18]
 80007b0:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80007b2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80007b6:	2302      	movs	r3, #2
 80007b8:	7623      	strb	r3, [r4, #24]
 80007ba:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80007bc:	6883      	ldr	r3, [r0, #8]
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80007be:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80007c0:	2100      	movs	r1, #0
 80007c2:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80007c6:	f006 f887 	bl	80068d8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 80007ca:	8ae2      	ldrh	r2, [r4, #22]
 80007cc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80007d0:	6860      	ldr	r0, [r4, #4]
 80007d2:	f006 f885 	bl	80068e0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1ed      	bne.n	80007b6 <MCI_ExecBufferedCommands+0x2e>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80007da:	2303      	movs	r3, #3
 80007dc:	7623      	strb	r3, [r4, #24]
 80007de:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80007e0:	6883      	ldr	r3, [r0, #8]
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80007e2:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80007ea:	f006 f875 	bl	80068d8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80007ee:	8ae2      	ldrh	r2, [r4, #22]
 80007f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007f4:	6860      	ldr	r0, [r4, #4]
 80007f6:	f006 f873 	bl	80068e0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d0ed      	beq.n	80007da <MCI_ExecBufferedCommands+0x52>
 80007fe:	e7da      	b.n	80007b6 <MCI_ExecBufferedCommands+0x2e>

08000800 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000800:	6800      	ldr	r0, [r0, #0]
 8000802:	f006 b9a3 	b.w	8006b4c <STM_GetState>
 8000806:	bf00      	nop

08000808 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000808:	7e40      	ldrb	r0, [r0, #25]
 800080a:	4770      	bx	lr

0800080c <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 800080c:	7b03      	ldrb	r3, [r0, #12]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d015      	beq.n	800083e <MCI_GetImposedMotorDirection+0x32>
 8000812:	2b03      	cmp	r3, #3
 8000814:	d00b      	beq.n	800082e <MCI_GetImposedMotorDirection+0x22>
 8000816:	2b01      	cmp	r3, #1
 8000818:	d001      	beq.n	800081e <MCI_GetImposedMotorDirection+0x12>
  int16_t retVal = 1;
 800081a:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 800081c:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 800081e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8000822:	2b00      	cmp	r3, #0
        retVal = -1;
 8000824:	bfac      	ite	ge
 8000826:	2001      	movge	r0, #1
 8000828:	f04f 30ff 	movlt.w	r0, #4294967295
 800082c:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 800082e:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8000832:	2b00      	cmp	r3, #0
        retVal = -1;
 8000834:	bfac      	ite	ge
 8000836:	2001      	movge	r0, #1
 8000838:	f04f 30ff 	movlt.w	r0, #4294967295
 800083c:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 800083e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8000842:	2b00      	cmp	r3, #0
        retVal = -1;
 8000844:	bfac      	ite	ge
 8000846:	2001      	movge	r0, #1
 8000848:	f04f 30ff 	movlt.w	r0, #4294967295
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000850:	7b03      	ldrb	r3, [r0, #12]
 8000852:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000854:	bf0c      	ite	eq
 8000856:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 800085a:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000860:	6840      	ldr	r0, [r0, #4]
 8000862:	f006 b887 	b.w	8006974 <STC_StopRamp>
 8000866:	bf00      	nop

08000868 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000868:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800086a:	6840      	ldr	r0, [r0, #4]
 800086c:	f006 f81a 	bl	80068a4 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000874:	f005 bfc2 	b.w	80067fc <SPD_GetAvrgMecSpeedUnit>

08000878 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *         
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000878:	6840      	ldr	r0, [r0, #4]
 800087a:	f006 b81d 	b.w	80068b8 <STC_GetMecSpeedRefUnit>
 800087e:	bf00      	nop

08000880 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000880:	6883      	ldr	r3, [r0, #8]
 8000882:	6818      	ldr	r0, [r3, #0]
 8000884:	b283      	uxth	r3, r0
}
 8000886:	f363 000f 	bfi	r0, r3, #0, #16
{
 800088a:	b082      	sub	sp, #8
}
 800088c:	b002      	add	sp, #8
 800088e:	4770      	bx	lr

08000890 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000890:	6883      	ldr	r3, [r0, #8]
 8000892:	6858      	ldr	r0, [r3, #4]
 8000894:	b283      	uxth	r3, r0
}
 8000896:	f363 000f 	bfi	r0, r3, #0, #16
{
 800089a:	b082      	sub	sp, #8
}
 800089c:	b002      	add	sp, #8
 800089e:	4770      	bx	lr

080008a0 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80008a0:	6883      	ldr	r3, [r0, #8]
 80008a2:	68d8      	ldr	r0, [r3, #12]
 80008a4:	b283      	uxth	r3, r0
}
 80008a6:	f363 000f 	bfi	r0, r3, #0, #16
{
 80008aa:	b082      	sub	sp, #8
}
 80008ac:	b002      	add	sp, #8
 80008ae:	4770      	bx	lr

080008b0 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 80008b0:	6883      	ldr	r3, [r0, #8]
 80008b2:	6918      	ldr	r0, [r3, #16]
 80008b4:	b283      	uxth	r3, r0
}
 80008b6:	f363 000f 	bfi	r0, r3, #0, #16
{
 80008ba:	b082      	sub	sp, #8
}
 80008bc:	b002      	add	sp, #8
 80008be:	4770      	bx	lr

080008c0 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 80008c0:	6883      	ldr	r3, [r0, #8]
 80008c2:	f8d3 0016 	ldr.w	r0, [r3, #22]
 80008c6:	b283      	uxth	r3, r0
}
 80008c8:	f363 000f 	bfi	r0, r3, #0, #16
{
 80008cc:	b082      	sub	sp, #8
}
 80008ce:	b002      	add	sp, #8
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 80008d4:	6883      	ldr	r3, [r0, #8]
 80008d6:	f8d3 001a 	ldr.w	r0, [r3, #26]
 80008da:	b283      	uxth	r3, r0
}
 80008dc:	f363 000f 	bfi	r0, r3, #0, #16
{
 80008e0:	b082      	sub	sp, #8
}
 80008e2:	b002      	add	sp, #8
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 80008e8:	6883      	ldr	r3, [r0, #8]
}
 80008ea:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80008ee:	4770      	bx	lr

080008f0 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 80008f0:	6883      	ldr	r3, [r0, #8]
 80008f2:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 80008f4:	8299      	strh	r1, [r3, #20]
 80008f6:	4770      	bx	lr

080008f8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 80008f8:	4603      	mov	r3, r0
 80008fa:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 80008fc:	6840      	ldr	r0, [r0, #4]
 80008fe:	689c      	ldr	r4, [r3, #8]
 8000900:	f006 f87a 	bl	80069f8 <STC_GetDefaultIqdref>
 8000904:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000908:	8220      	strh	r0, [r4, #16]
 800090a:	8263      	strh	r3, [r4, #18]
 800090c:	bd10      	pop	{r4, pc}
 800090e:	bf00      	nop

08000910 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000910:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000914:	b202      	sxth	r2, r0
 8000916:	0c03      	lsrs	r3, r0, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000918:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800091c:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000920:	4240      	negs	r0, r0
 8000922:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8000926:	13c0      	asrs	r0, r0, #15
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000928:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 800092c:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 800092e:	da04      	bge.n	800093a <MCM_Clarke+0x2a>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000930:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000934:	da0c      	bge.n	8000950 <MCM_Clarke+0x40>

  Output.beta = hbeta_tmp;

  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MCM_Clarke+0x48>)
 8000938:	e001      	b.n	800093e <MCM_Clarke+0x2e>
    hbeta_tmp = INT16_MAX;
 800093a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Output );
 800093e:	b292      	uxth	r2, r2
 8000940:	2000      	movs	r0, #0
 8000942:	b29b      	uxth	r3, r3
 8000944:	f362 000f 	bfi	r0, r2, #0, #16
 8000948:	f363 401f 	bfi	r0, r3, #16, #16
}
 800094c:	b004      	add	sp, #16
 800094e:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000950:	b203      	sxth	r3, r0
  if ( Output.beta == ( int16_t )( -32768 ) )
 8000952:	d1f4      	bne.n	800093e <MCM_Clarke+0x2e>
    Output.beta = -32767;
 8000954:	4b00      	ldr	r3, [pc, #0]	; (8000958 <MCM_Clarke+0x48>)
 8000956:	e7f2      	b.n	800093e <MCM_Clarke+0x2e>
 8000958:	ffff8001 	.word	0xffff8001

0800095c <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 800095c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000960:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000964:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000968:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 800096c:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800096e:	d031      	beq.n	80009d4 <MCM_Trig_Functions+0x78>
 8000970:	d921      	bls.n	80009b6 <MCM_Trig_Functions+0x5a>
 8000972:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000976:	d015      	beq.n	80009a4 <MCM_Trig_Functions+0x48>
 8000978:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800097c:	d109      	bne.n	8000992 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U90_180:
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800097e:	b2c0      	uxtb	r0, r0
 8000980:	491a      	ldr	r1, [pc, #104]	; (80009ec <MCM_Trig_Functions+0x90>)
 8000982:	43c3      	mvns	r3, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000984:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000988:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800098a:	4252      	negs	r2, r2
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800098c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000990:	b212      	sxth	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000992:	b292      	uxth	r2, r2
 8000994:	2000      	movs	r0, #0
 8000996:	b29b      	uxth	r3, r3
 8000998:	f362 000f 	bfi	r0, r2, #0, #16
 800099c:	f363 401f 	bfi	r0, r3, #16, #16
}
 80009a0:	b002      	add	sp, #8
 80009a2:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80009a4:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009a6:	43c3      	mvns	r3, r0
 80009a8:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80009aa:	4910      	ldr	r1, [pc, #64]	; (80009ec <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009ac:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80009b0:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      break;
 80009b4:	e7ed      	b.n	8000992 <MCM_Trig_Functions+0x36>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80009b6:	2900      	cmp	r1, #0
 80009b8:	d1eb      	bne.n	8000992 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009ba:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009bc:	43c3      	mvns	r3, r0
 80009be:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009c0:	490a      	ldr	r1, [pc, #40]	; (80009ec <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009c2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009c6:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009ca:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009cc:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009ce:	b212      	sxth	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80009d0:	b21b      	sxth	r3, r3
      break;
 80009d2:	e7de      	b.n	8000992 <MCM_Trig_Functions+0x36>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009d4:	b2c0      	uxtb	r0, r0
 80009d6:	43c3      	mvns	r3, r0
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <MCM_Trig_Functions+0x90>)
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80009e0:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80009e4:	425b      	negs	r3, r3
 80009e6:	b21b      	sxth	r3, r3
      break;
 80009e8:	e7d3      	b.n	8000992 <MCM_Trig_Functions+0x36>
 80009ea:	bf00      	nop
 80009ec:	08007a28 	.word	0x08007a28

080009f0 <MCM_Park>:
{
 80009f0:	b530      	push	{r4, r5, lr}
 80009f2:	b085      	sub	sp, #20
 80009f4:	b204      	sxth	r4, r0
 80009f6:	9001      	str	r0, [sp, #4]
 80009f8:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80009fa:	4608      	mov	r0, r1
 80009fc:	f7ff ffae 	bl	800095c <MCM_Trig_Functions>
 8000a00:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000a02:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000a06:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000a08:	fb05 3310 	mls	r3, r5, r0, r3
 8000a0c:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a12:	da04      	bge.n	8000a1e <MCM_Park+0x2e>
  else if ( wqd_tmp < ( -32768 ) )
 8000a14:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000a18:	da1b      	bge.n	8000a52 <MCM_Park+0x62>
    Output.q = -32767;
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <MCM_Park+0x70>)
 8000a1c:	e001      	b.n	8000a22 <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 8000a1e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000a22:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000a26:	fb04 1000 	mla	r0, r4, r0, r1
 8000a2a:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000a2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000a30:	da04      	bge.n	8000a3c <MCM_Park+0x4c>
  else if ( wqd_tmp < ( -32768 ) )
 8000a32:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000a36:	da0f      	bge.n	8000a58 <MCM_Park+0x68>
    Output.d = -32767;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MCM_Park+0x70>)
 8000a3a:	e001      	b.n	8000a40 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 8000a3c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000a40:	b292      	uxth	r2, r2
 8000a42:	2000      	movs	r0, #0
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	f362 000f 	bfi	r0, r2, #0, #16
 8000a4a:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000a4e:	b005      	add	sp, #20
 8000a50:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000a52:	b21a      	sxth	r2, r3
  if ( Output.q == ( int16_t )( -32768 ) )
 8000a54:	d1e5      	bne.n	8000a22 <MCM_Park+0x32>
 8000a56:	e7e0      	b.n	8000a1a <MCM_Park+0x2a>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000a58:	b203      	sxth	r3, r0
  if ( Output.d == ( int16_t )( -32768 ) )
 8000a5a:	d1f1      	bne.n	8000a40 <MCM_Park+0x50>
    Output.d = -32767;
 8000a5c:	4b00      	ldr	r3, [pc, #0]	; (8000a60 <MCM_Park+0x70>)
 8000a5e:	e7ef      	b.n	8000a40 <MCM_Park+0x50>
 8000a60:	ffff8001 	.word	0xffff8001

08000a64 <MCM_Rev_Park>:
{
 8000a64:	b530      	push	{r4, r5, lr}
 8000a66:	b085      	sub	sp, #20
 8000a68:	b204      	sxth	r4, r0
 8000a6a:	1405      	asrs	r5, r0, #16
 8000a6c:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000a6e:	4608      	mov	r0, r1
 8000a70:	f7ff ff74 	bl	800095c <MCM_Trig_Functions>
 8000a74:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000a76:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000a7a:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000a7c:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000a80:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000a84:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000a88:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000a92:	f362 000f 	bfi	r0, r2, #0, #16
 8000a96:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000a9a:	b005      	add	sp, #20
 8000a9c:	bd30      	pop	{r4, r5, pc}
 8000a9e:	bf00      	nop

08000aa0 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa2:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};
  
  FOCVars[bMotor].Iab = NULL_ab;
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <FOC_Clear+0x70>)
 8000aa8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	eb03 0e02 	add.w	lr, r3, r2
 8000ab2:	2400      	movs	r4, #0
{
 8000ab4:	4605      	mov	r5, r0
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ab6:	f103 010c 	add.w	r1, r3, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 8000aba:	f103 0716 	add.w	r7, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000abe:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 8000ac0:	509c      	str	r4, [r3, r2]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000ac2:	fb06 2605 	mla	r6, r6, r5, r2
  FOCVars[bMotor].Iab = NULL_ab;
 8000ac6:	f8ce 4004 	str.w	r4, [lr, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000aca:	18bb      	adds	r3, r7, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 8000acc:	eb01 0e02 	add.w	lr, r1, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <FOC_Clear+0x74>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ad2:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ad4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ad8:	f8ce 4004 	str.w	r4, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000adc:	4621      	mov	r1, r4
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000ade:	83f4      	strh	r4, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000ae0:	50bc      	str	r4, [r7, r2]
 8000ae2:	605c      	str	r4, [r3, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000ae4:	8434      	strh	r4, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ae6:	f004 fd25 	bl	8005534 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <FOC_Clear+0x78>)
 8000aec:	4621      	mov	r1, r4
 8000aee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000af2:	f004 fd1f 	bl	8005534 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <FOC_Clear+0x7c>)
 8000af8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000afc:	f005 fed4 	bl	80068a8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <FOC_Clear+0x80>)
 8000b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000b06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000b0a:	f004 bf0b 	b.w	8005924 <PWMC_SwitchOffPWM>
 8000b0e:	bf00      	nop
 8000b10:	20000900 	.word	0x20000900
 8000b14:	200008f4 	.word	0x200008f4
 8000b18:	200009b0 	.word	0x200009b0
 8000b1c:	200009b4 	.word	0x200009b4
 8000b20:	200008ec 	.word	0x200008ec

08000b24 <MCboot>:
{
 8000b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b28:	b089      	sub	sp, #36	; 0x24
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000b2a:	4f63      	ldr	r7, [pc, #396]	; (8000cb8 <MCboot+0x194>)
{
 8000b2c:	9004      	str	r0, [sp, #16]
  STM_Init(&STM[M1]);
 8000b2e:	4863      	ldr	r0, [pc, #396]	; (8000cbc <MCboot+0x198>)
{
 8000b30:	9105      	str	r1, [sp, #20]
  STM_Init(&STM[M1]);
 8000b32:	f005 ff75 	bl	8006a20 <STM_Init>
  bMCBootCompleted = 0;
 8000b36:	4962      	ldr	r1, [pc, #392]	; (8000cc0 <MCboot+0x19c>)
  pCLM[M1] = &CircleLimitationM1;
 8000b38:	4b62      	ldr	r3, [pc, #392]	; (8000cc4 <MCboot+0x1a0>)
 8000b3a:	4a63      	ldr	r2, [pc, #396]	; (8000cc8 <MCboot+0x1a4>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000b3c:	4863      	ldr	r0, [pc, #396]	; (8000ccc <MCboot+0x1a8>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000b3e:	4d64      	ldr	r5, [pc, #400]	; (8000cd0 <MCboot+0x1ac>)
  pCLM[M1] = &CircleLimitationM1;
 8000b40:	601a      	str	r2, [r3, #0]
  bMCBootCompleted = 0;
 8000b42:	2400      	movs	r4, #0
 8000b44:	700c      	strb	r4, [r1, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000b46:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8000d1c <MCboot+0x1f8>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000b4a:	6038      	str	r0, [r7, #0]
  R3_1_Init(&PWM_Handle_M1);
 8000b4c:	f005 f9a4 	bl	8005e98 <R3_1_Init>
  startTimers();    
 8000b50:	f004 fd74 	bl	800563c <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000b54:	485f      	ldr	r0, [pc, #380]	; (8000cd4 <MCboot+0x1b0>)
  PID_HandleInit(&PIDIdHandle_M1);
 8000b56:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8000d20 <MCboot+0x1fc>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000b5a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8000d24 <MCboot+0x200>
  NTC_Init(&TempSensorParamsM1);    
 8000b5e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8000d28 <MCboot+0x204>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000b62:	4e5d      	ldr	r6, [pc, #372]	; (8000cd8 <MCboot+0x1b4>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000b64:	f004 fcd2 	bl	800550c <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000b68:	4b5c      	ldr	r3, [pc, #368]	; (8000cdc <MCboot+0x1b8>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000b6a:	4a5a      	ldr	r2, [pc, #360]	; (8000cd4 <MCboot+0x1b0>)
  STO_PLL_Init (&STO_PLL_M1);
 8000b6c:	485c      	ldr	r0, [pc, #368]	; (8000ce0 <MCboot+0x1bc>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000b6e:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000b70:	f8cb 2000 	str.w	r2, [fp]
  STO_PLL_Init (&STO_PLL_M1);
 8000b74:	f006 fe28 	bl	80077c8 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8000b78:	f8db 1000 	ldr.w	r1, [fp]
 8000b7c:	4a58      	ldr	r2, [pc, #352]	; (8000ce0 <MCboot+0x1bc>)
 8000b7e:	6828      	ldr	r0, [r5, #0]
 8000b80:	f005 fe7a 	bl	8006878 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8000b84:	4857      	ldr	r0, [pc, #348]	; (8000ce4 <MCboot+0x1c0>)
 8000b86:	f006 f951 	bl	8006e2c <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);  
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	6829      	ldr	r1, [r5, #0]
 8000b8e:	4a55      	ldr	r2, [pc, #340]	; (8000ce4 <MCboot+0x1c0>)
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	4855      	ldr	r0, [pc, #340]	; (8000ce8 <MCboot+0x1c4>)
 8000b94:	4b55      	ldr	r3, [pc, #340]	; (8000cec <MCboot+0x1c8>)
 8000b96:	f006 fa41 	bl	800701c <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000b9a:	4855      	ldr	r0, [pc, #340]	; (8000cf0 <MCboot+0x1cc>)
 8000b9c:	f004 fcb6 	bl	800550c <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000ba0:	4648      	mov	r0, r9
 8000ba2:	f004 fcb3 	bl	800550c <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000ba6:	4a53      	ldr	r2, [pc, #332]	; (8000cf4 <MCboot+0x1d0>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000ba8:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <MCboot+0x1d4>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000baa:	4951      	ldr	r1, [pc, #324]	; (8000cf0 <MCboot+0x1cc>)
 8000bac:	6011      	str	r1, [r2, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000bae:	4a53      	ldr	r2, [pc, #332]	; (8000cfc <MCboot+0x1d8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000bb0:	f8ca 3000 	str.w	r3, [sl]
  RVBS_Init(pBusSensorM1);
 8000bb4:	4618      	mov	r0, r3
  pPIDId[M1] = &PIDIdHandle_M1;
 8000bb6:	f8c2 9000 	str.w	r9, [r2]
  RVBS_Init(pBusSensorM1);
 8000bba:	f005 fd1b 	bl	80065f4 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000bbe:	4b50      	ldr	r3, [pc, #320]	; (8000d00 <MCboot+0x1dc>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000bc0:	f8da 2000 	ldr.w	r2, [sl]
 8000bc4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000bc8:	4a4e      	ldr	r2, [pc, #312]	; (8000d04 <MCboot+0x1e0>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000bca:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);    
 8000bce:	4640      	mov	r0, r8
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000bd0:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);    
 8000bd2:	f004 fc55 	bl	8005480 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	; (8000d08 <MCboot+0x1e4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000bd8:	494c      	ldr	r1, [pc, #304]	; (8000d0c <MCboot+0x1e8>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000bda:	4a4d      	ldr	r2, [pc, #308]	; (8000d10 <MCboot+0x1ec>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000bdc:	f8c1 8000 	str.w	r8, [r1]
  REMNG_Init(pREMNG[M1]);
 8000be0:	4618      	mov	r0, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000be2:	6013      	str	r3, [r2, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000be4:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8000be8:	f005 fd7e 	bl	80066e8 <REMNG_Init>
  FOC_Clear(M1);
 8000bec:	4620      	mov	r0, r4
 8000bee:	f7ff ff57 	bl	8000aa0 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000bf2:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000bf6:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000bf8:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000d2c <MCboot+0x208>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000bfc:	f005 fefc 	bl	80069f8 <STC_GetDefaultIqdref>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8000c06:	8233      	strh	r3, [r6, #16]
 8000c08:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000c0a:	6828      	ldr	r0, [r5, #0]
 8000c0c:	f005 fef4 	bl	80069f8 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000c10:	4940      	ldr	r1, [pc, #256]	; (8000d14 <MCboot+0x1f0>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000c12:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000c14:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000c18:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000c1c:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000c1e:	f8a6 e014 	strh.w	lr, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000c22:	4608      	mov	r0, r1
 8000c24:	4925      	ldr	r1, [pc, #148]	; (8000cbc <MCboot+0x198>)
 8000c26:	f7ff fd6b 	bl	8000700 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000c2a:	6828      	ldr	r0, [r5, #0]
 8000c2c:	f8d8 6000 	ldr.w	r6, [r8]
 8000c30:	f005 fed8 	bl	80069e4 <STC_GetMecSpeedRefUnitDefault>
 8000c34:	4622      	mov	r2, r4
 8000c36:	4601      	mov	r1, r0
 8000c38:	4630      	mov	r0, r6
 8000c3a:	f7ff fd6d 	bl	8000718 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8000c3e:	f8d8 2000 	ldr.w	r2, [r8]
 8000c42:	9203      	str	r2, [sp, #12]
  MCT[M1].pPIDId = pPIDId[M1];
 8000c44:	4a2d      	ldr	r2, [pc, #180]	; (8000cfc <MCboot+0x1d8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <MCboot+0x1f4>)
  MCT[M1].pPIDId = pPIDId[M1];
 8000c48:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000c4a:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000c4c:	4d2d      	ldr	r5, [pc, #180]	; (8000d04 <MCboot+0x1e0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000c4e:	6839      	ldr	r1, [r7, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000c50:	f8d5 c000 	ldr.w	ip, [r5]
  pMCIList[M1] = oMCInterface[M1];
 8000c54:	9d04      	ldr	r5, [sp, #16]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000c56:	4f2d      	ldr	r7, [pc, #180]	; (8000d0c <MCboot+0x1e8>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000c58:	4e26      	ldr	r6, [pc, #152]	; (8000cf4 <MCboot+0x1d0>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000c5a:	f8db e000 	ldr.w	lr, [fp]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000c5e:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000c60:	f8d7 b000 	ldr.w	fp, [r7]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000c64:	f8da 7000 	ldr.w	r7, [sl]
  pMCIList[M1] = oMCInterface[M1];
 8000c68:	46a8      	mov	r8, r5
 8000c6a:	9d03      	ldr	r5, [sp, #12]
 8000c6c:	f8c8 5000 	str.w	r5, [r8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8000c72:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <MCboot+0x1c4>)
 8000c74:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1; 
 8000c76:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <MCboot+0x1bc>)
 8000c78:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <MCboot+0x1c0>)
 8000c7c:	621a      	str	r2, [r3, #32]
  MCT[M1].pStateMachine = &STM[M1];
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <MCboot+0x198>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000c80:	f8c3 e000 	str.w	lr, [r3]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000c84:	605e      	str	r6, [r3, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8000c86:	6098      	str	r0, [r3, #8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000c88:	6119      	str	r1, [r3, #16]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000c8a:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000c8e:	631f      	str	r7, [r3, #48]	; 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000c90:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000c94:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8000c96:	61dc      	str	r4, [r3, #28]
  MCT[M1].pStateMachine = &STM[M1];
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8000c9a:	635c      	str	r4, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000c9c:	639c      	str	r4, [r3, #56]	; 0x38
  MCT[M1].pFW = MC_NULL;
 8000c9e:	641c      	str	r4, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 8000ca0:	645c      	str	r4, [r3, #68]	; 0x44
  MCT[M1].pPosCtrl = MC_NULL;
 8000ca2:	649c      	str	r4, [r3, #72]	; 0x48
  MCT[M1].pSCC = MC_NULL;
 8000ca4:	64dc      	str	r4, [r3, #76]	; 0x4c
  pMCTList[M1] = &MCT[M1];
 8000ca6:	9a05      	ldr	r2, [sp, #20]
  MCT[M1].pOTT = MC_NULL;
 8000ca8:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8000caa:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <MCboot+0x19c>)
 8000cae:	f883 9000 	strb.w	r9, [r3]
}
 8000cb2:	b009      	add	sp, #36	; 0x24
 8000cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cb8:	200008ec 	.word	0x200008ec
 8000cbc:	200009a0 	.word	0x200009a0
 8000cc0:	20000724 	.word	0x20000724
 8000cc4:	2000097c 	.word	0x2000097c
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000288 	.word	0x20000288
 8000cd0:	200009b4 	.word	0x200009b4
 8000cd4:	20000148 	.word	0x20000148
 8000cd8:	20000900 	.word	0x20000900
 8000cdc:	200004f4 	.word	0x200004f4
 8000ce0:	200003cc 	.word	0x200003cc
 8000ce4:	20000580 	.word	0x20000580
 8000ce8:	20000340 	.word	0x20000340
 8000cec:	200003b8 	.word	0x200003b8
 8000cf0:	2000011c 	.word	0x2000011c
 8000cf4:	200008f4 	.word	0x200008f4
 8000cf8:	20000318 	.word	0x20000318
 8000cfc:	200009b0 	.word	0x200009b0
 8000d00:	20000174 	.word	0x20000174
 8000d04:	200009ac 	.word	0x200009ac
 8000d08:	20000300 	.word	0x20000300
 8000d0c:	200008e8 	.word	0x200008e8
 8000d10:	200009a8 	.word	0x200009a8
 8000d14:	20000984 	.word	0x20000984
 8000d18:	20000928 	.word	0x20000928
 8000d1c:	200008f0 	.word	0x200008f0
 8000d20:	200000f0 	.word	0x200000f0
 8000d24:	20000980 	.word	0x20000980
 8000d28:	20000528 	.word	0x20000528
 8000d2c:	200008f8 	.word	0x200008f8

08000d30 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <FOC_CalcCurrRef>:
{
    
  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <FOC_CalcCurrRef+0x20>)
{
 8000d36:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000d38:	2426      	movs	r4, #38	; 0x26
 8000d3a:	fb04 3400 	mla	r4, r4, r0, r3
 8000d3e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000d42:	b933      	cbnz	r3, 8000d52 <FOC_CalcCurrRef+0x1e>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <FOC_CalcCurrRef+0x24>)
 8000d46:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000d4a:	f005 fe17 	bl	800697c <STC_CalcTorqueReference>
 8000d4e:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000d50:	8220      	strh	r0, [r4, #16]
 8000d52:	bd10      	pop	{r4, pc}
 8000d54:	20000900 	.word	0x20000900
 8000d58:	200009b4 	.word	0x200009b4

08000d5c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <TSK_SetStopPermanencyTimeM1+0x8>)
 8000d5e:	8018      	strh	r0, [r3, #0]
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	2000072a 	.word	0x2000072a

08000d68 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8000d6a:	8818      	ldrh	r0, [r3, #0]
 8000d6c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000d6e:	fab0 f080 	clz	r0, r0
 8000d72:	0940      	lsrs	r0, r0, #5
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000072a 	.word	0x2000072a

08000d7c <TSK_MediumFrequencyTaskM1>:
{
 8000d7c:	b530      	push	{r4, r5, lr}
 8000d7e:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8000d80:	a902      	add	r1, sp, #8
 8000d82:	2300      	movs	r3, #0
 8000d84:	f821 3d08 	strh.w	r3, [r1, #-8]!
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000d88:	488b      	ldr	r0, [pc, #556]	; (8000fb8 <TSK_MediumFrequencyTaskM1+0x23c>)
  PQD_CalcElMotorPower( pMPM[M1] );
 8000d8a:	4c8c      	ldr	r4, [pc, #560]	; (8000fbc <TSK_MediumFrequencyTaskM1+0x240>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000d8c:	f006 fc1a 	bl	80075c4 <STO_PLL_CalcAvrgMecSpeedUnit>
 8000d90:	4605      	mov	r5, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000d92:	6820      	ldr	r0, [r4, #0]
 8000d94:	f004 fc1c 	bl	80055d0 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000d98:	4889      	ldr	r0, [pc, #548]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000d9a:	f005 fed7 	bl	8006b4c <STM_GetState>
  switch ( StateM1 )
 8000d9e:	3803      	subs	r0, #3
 8000da0:	2810      	cmp	r0, #16
 8000da2:	d84e      	bhi.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
 8000da4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000da8:	00110072 	.word	0x00110072
 8000dac:	009b0084 	.word	0x009b0084
 8000db0:	00bd00aa 	.word	0x00bd00aa
 8000db4:	004d00c6 	.word	0x004d00c6
 8000db8:	004d004d 	.word	0x004d004d
 8000dbc:	004d004d 	.word	0x004d004d
 8000dc0:	004d004d 	.word	0x004d004d
 8000dc4:	00e000d3 	.word	0x00e000d3
 8000dc8:	004f      	.short	0x004f
      if ( ! RUC_OTF_Exec( &RevUpControlM1 ) )
 8000dca:	487e      	ldr	r0, [pc, #504]	; (8000fc4 <TSK_MediumFrequencyTaskM1+0x248>)
 8000dcc:	f006 f9ac 	bl	8007128 <RUC_OTF_Exec>
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	f000 80e4 	beq.w	8000f9e <TSK_MediumFrequencyTaskM1+0x222>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8000dd6:	4b7c      	ldr	r3, [pc, #496]	; (8000fc8 <TSK_MediumFrequencyTaskM1+0x24c>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	f005 fdcf 	bl	800697c <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8000dde:	4b7b      	ldr	r3, [pc, #492]	; (8000fcc <TSK_MediumFrequencyTaskM1+0x250>)
 8000de0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 8000de4:	8218      	strh	r0, [r3, #16]
 8000de6:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8000de8:	f10d 0102 	add.w	r1, sp, #2
 8000dec:	4878      	ldr	r0, [pc, #480]	; (8000fd0 <TSK_MediumFrequencyTaskM1+0x254>)
 8000dee:	f006 f86f 	bl	8006ed0 <VSS_CalcAvrgMecSpeedUnit>
      ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8000df2:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8000df6:	4870      	ldr	r0, [pc, #448]	; (8000fb8 <TSK_MediumFrequencyTaskM1+0x23c>)
 8000df8:	f006 fd1e 	bl	8007838 <STO_PLL_IsObserverConverged>
 8000dfc:	4604      	mov	r4, r0
      (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8000dfe:	4601      	mov	r1, r0
 8000e00:	4873      	ldr	r0, [pc, #460]	; (8000fd0 <TSK_MediumFrequencyTaskM1+0x254>)
 8000e02:	f006 f8f5 	bl	8006ff0 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8000e06:	b1e4      	cbz	r4, 8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000e08:	486b      	ldr	r0, [pc, #428]	; (8000fb8 <TSK_MediumFrequencyTaskM1+0x23c>)
 8000e0a:	4d70      	ldr	r5, [pc, #448]	; (8000fcc <TSK_MediumFrequencyTaskM1+0x250>)
        REMNG_Init( pREMNG[M1] );
 8000e0c:	4c71      	ldr	r4, [pc, #452]	; (8000fd4 <TSK_MediumFrequencyTaskM1+0x258>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000e0e:	f005 fcf1 	bl	80067f4 <SPD_GetElAngle>
 8000e12:	4601      	mov	r1, r0
 8000e14:	6868      	ldr	r0, [r5, #4]
 8000e16:	f7ff fdeb 	bl	80009f0 <MCM_Park>
 8000e1a:	9001      	str	r0, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8000e1c:	6820      	ldr	r0, [r4, #0]
 8000e1e:	f005 fc63 	bl	80066e8 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8000e22:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8000e26:	6820      	ldr	r0, [r4, #0]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f005 fc9d 	bl	8006768 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8000e2e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8000e32:	6820      	ldr	r0, [r4, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f005 fc97 	bl	8006768 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8000e3a:	2113      	movs	r1, #19
 8000e3c:	4860      	ldr	r0, [pc, #384]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000e3e:	f005 fe0f 	bl	8006a60 <STM_NextState>
}
 8000e42:	b003      	add	sp, #12
 8000e44:	bd30      	pop	{r4, r5, pc}
      if ( ! RUC_OTF_Exec( &RevUpControlM1 ) )
 8000e46:	485f      	ldr	r0, [pc, #380]	; (8000fc4 <TSK_MediumFrequencyTaskM1+0x248>)
 8000e48:	f006 f96e 	bl	8007128 <RUC_OTF_Exec>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	f000 80ac 	beq.w	8000faa <TSK_MediumFrequencyTaskM1+0x22e>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 8000e52:	a901      	add	r1, sp, #4
 8000e54:	485e      	ldr	r0, [pc, #376]	; (8000fd0 <TSK_MediumFrequencyTaskM1+0x254>)
 8000e56:	f006 f83b 	bl	8006ed0 <VSS_CalcAvrgMecSpeedUnit>
 8000e5a:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8000e5c:	485c      	ldr	r0, [pc, #368]	; (8000fd0 <TSK_MediumFrequencyTaskM1+0x254>)
 8000e5e:	f006 f8d5 	bl	800700c <VSS_TransitionEnded>
        if ( LoopClosed == true ) 
 8000e62:	b90c      	cbnz	r4, 8000e68 <TSK_MediumFrequencyTaskM1+0xec>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d0ec      	beq.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000e68:	4a5b      	ldr	r2, [pc, #364]	; (8000fd8 <TSK_MediumFrequencyTaskM1+0x25c>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8000e6a:	4b58      	ldr	r3, [pc, #352]	; (8000fcc <TSK_MediumFrequencyTaskM1+0x250>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000e6c:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8000e6e:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 8000e72:	4620      	mov	r0, r4
 8000e74:	f004 fb62 	bl	800553c <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000e78:	fb05 f100 	mul.w	r1, r5, r0
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f004 fb59 	bl	8005534 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8000e82:	2105      	movs	r1, #5
 8000e84:	484e      	ldr	r0, [pc, #312]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000e86:	f005 fdeb 	bl	8006a60 <STM_NextState>
    break;
 8000e8a:	e7da      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <TSK_MediumFrequencyTaskM1+0x260>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	f7ff fcbc 	bl	800080c <MCI_GetImposedMotorDirection>
 8000e94:	4601      	mov	r1, r0
 8000e96:	484b      	ldr	r0, [pc, #300]	; (8000fc4 <TSK_MediumFrequencyTaskM1+0x248>)
 8000e98:	f006 f8fe 	bl	8007098 <RUC_Clear>
    PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8000e9c:	4b50      	ldr	r3, [pc, #320]	; (8000fe0 <TSK_MediumFrequencyTaskM1+0x264>)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	f004 fd43 	bl	800592c <PWMC_CurrentReadingCalibr>
    STM_NextState( &STM[M1], OFFSET_CALIB );
 8000ea6:	2111      	movs	r1, #17
 8000ea8:	4845      	ldr	r0, [pc, #276]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000eaa:	f005 fdd9 	bl	8006a60 <STM_NextState>
    break;
 8000eae:	e7c8      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8000eb0:	4c45      	ldr	r4, [pc, #276]	; (8000fc8 <TSK_MediumFrequencyTaskM1+0x24c>)
 8000eb2:	4941      	ldr	r1, [pc, #260]	; (8000fb8 <TSK_MediumFrequencyTaskM1+0x23c>)
 8000eb4:	6820      	ldr	r0, [r4, #0]
 8000eb6:	f005 fcf3 	bl	80068a0 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff ff38 	bl	8000d30 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff ff37 	bl	8000d34 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8000ec6:	2106      	movs	r1, #6
 8000ec8:	483d      	ldr	r0, [pc, #244]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000eca:	f005 fdc9 	bl	8006a60 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000ece:	6820      	ldr	r0, [r4, #0]
 8000ed0:	f005 fd9e 	bl	8006a10 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000ed4:	4b41      	ldr	r3, [pc, #260]	; (8000fdc <TSK_MediumFrequencyTaskM1+0x260>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	f7ff fc56 	bl	8000788 <MCI_ExecBufferedCommands>
    break;
 8000edc:	e7b1      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8000ede:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <TSK_MediumFrequencyTaskM1+0x260>)
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	f7ff fc51 	bl	8000788 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff ff24 	bl	8000d34 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	d1a8      	bne.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8000ef0:	462a      	mov	r2, r5
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4832      	ldr	r0, [pc, #200]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000ef6:	f005 fd99 	bl	8006a2c <STM_FaultProcessing>
 8000efa:	e7a2      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8000efc:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <TSK_MediumFrequencyTaskM1+0x264>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	f004 fefa 	bl	8005cf8 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fdcb 	bl	8000aa0 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8000f0a:	6820      	ldr	r0, [r4, #0]
 8000f0c:	f004 fa76 	bl	80053fc <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8000f10:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f14:	f7ff ff22 	bl	8000d5c <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8000f18:	2108      	movs	r1, #8
 8000f1a:	4829      	ldr	r0, [pc, #164]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000f1c:	f005 fda0 	bl	8006a60 <STM_NextState>
    break;
 8000f20:	e78f      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8000f22:	f7ff ff21 	bl	8000d68 <TSK_StopPermanencyTimeHasElapsedM1>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d08b      	beq.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
      STM_NextState( &STM[M1], STOP_IDLE );
 8000f2a:	2109      	movs	r1, #9
 8000f2c:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000f2e:	f005 fd97 	bl	8006a60 <STM_NextState>
 8000f32:	e786      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <TSK_MediumFrequencyTaskM1+0x24c>)
 8000f36:	4926      	ldr	r1, [pc, #152]	; (8000fd0 <TSK_MediumFrequencyTaskM1+0x254>)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	f005 fcb1 	bl	80068a0 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8000f3e:	4824      	ldr	r0, [pc, #144]	; (8000fd0 <TSK_MediumFrequencyTaskM1+0x254>)
 8000f40:	f005 ff60 	bl	8006e04 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8000f44:	2100      	movs	r1, #0
 8000f46:	481e      	ldr	r0, [pc, #120]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000f48:	f005 fd8a 	bl	8006a60 <STM_NextState>
}
 8000f4c:	e779      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <TSK_MediumFrequencyTaskM1+0x264>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	f004 fcea 	bl	800592c <PWMC_CurrentReadingCalibr>
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	f43f af72 	beq.w	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
      STM_NextState( &STM[M1], CLEAR );
 8000f5e:	2112      	movs	r1, #18
 8000f60:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000f62:	f005 fd7d 	bl	8006a60 <STM_NextState>
 8000f66:	e76c      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000f68:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <TSK_MediumFrequencyTaskM1+0x24c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <TSK_MediumFrequencyTaskM1+0x250>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000f6c:	6810      	ldr	r0, [r2, #0]
 8000f6e:	4918      	ldr	r1, [pc, #96]	; (8000fd0 <TSK_MediumFrequencyTaskM1+0x254>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000f76:	f005 fc93 	bl	80068a0 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8000f7a:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <TSK_MediumFrequencyTaskM1+0x23c>)
 8000f7c:	f006 fbf4 	bl	8007768 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8000f80:	2104      	movs	r1, #4
 8000f82:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000f84:	f005 fd6c 	bl	8006a60 <STM_NextState>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	f43f af5a 	beq.w	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
      FOC_Clear( M1 );
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fd86 	bl	8000aa0 <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <TSK_MediumFrequencyTaskM1+0x264>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f004 fe6c 	bl	8005c74 <R3_1_SwitchOnPWM>
 8000f9c:	e751      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000fa4:	f005 fd42 	bl	8006a2c <STM_FaultProcessing>
 8000fa8:	e71e      	b.n	8000de8 <TSK_MediumFrequencyTaskM1+0x6c>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 8000faa:	4602      	mov	r2, r0
 8000fac:	2110      	movs	r1, #16
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8000fb0:	f005 fd3c 	bl	8006a2c <STM_FaultProcessing>
 8000fb4:	e745      	b.n	8000e42 <TSK_MediumFrequencyTaskM1+0xc6>
 8000fb6:	bf00      	nop
 8000fb8:	200003cc 	.word	0x200003cc
 8000fbc:	200009ac 	.word	0x200009ac
 8000fc0:	200009a0 	.word	0x200009a0
 8000fc4:	20000340 	.word	0x20000340
 8000fc8:	200009b4 	.word	0x200009b4
 8000fcc:	20000900 	.word	0x20000900
 8000fd0:	20000580 	.word	0x20000580
 8000fd4:	200009a8 	.word	0x200009a8
 8000fd8:	200008f0 	.word	0x200008f0
 8000fdc:	200008f8 	.word	0x200008f8
 8000fe0:	200008ec 	.word	0x200008ec

08000fe4 <MC_Scheduler>:
{
 8000fe4:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MC_Scheduler+0x4c>)
 8000fe8:	781c      	ldrb	r4, [r3, #0]
 8000fea:	2c01      	cmp	r4, #1
 8000fec:	d000      	beq.n	8000ff0 <MC_Scheduler+0xc>
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8000ff0:	4d10      	ldr	r5, [pc, #64]	; (8001034 <MC_Scheduler+0x50>)
 8000ff2:	882b      	ldrh	r3, [r5, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b1b3      	cbz	r3, 8001026 <MC_Scheduler+0x42>
      hMFTaskCounterM1--;
 8000ff8:	882b      	ldrh	r3, [r5, #0]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <MC_Scheduler+0x54>)
 8001002:	8813      	ldrh	r3, [r2, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	b94b      	cbnz	r3, 800101c <MC_Scheduler+0x38>
    if(hStopPermanencyCounterM1 > 0u)
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <MC_Scheduler+0x58>)
 800100a:	8813      	ldrh	r3, [r2, #0]
 800100c:	b29b      	uxth	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0ed      	beq.n	8000fee <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001012:	8813      	ldrh	r3, [r2, #0]
 8001014:	3b01      	subs	r3, #1
 8001016:	b29b      	uxth	r3, r3
 8001018:	8013      	strh	r3, [r2, #0]
 800101a:	bd38      	pop	{r3, r4, r5, pc}
      hBootCapDelayCounterM1--;
 800101c:	8813      	ldrh	r3, [r2, #0]
 800101e:	3b01      	subs	r3, #1
 8001020:	b29b      	uxth	r3, r3
 8001022:	8013      	strh	r3, [r2, #0]
 8001024:	e7f0      	b.n	8001008 <MC_Scheduler+0x24>
      TSK_MediumFrequencyTaskM1();
 8001026:	f7ff fea9 	bl	8000d7c <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800102a:	802c      	strh	r4, [r5, #0]
 800102c:	e7e8      	b.n	8001000 <MC_Scheduler+0x1c>
 800102e:	bf00      	nop
 8001030:	20000724 	.word	0x20000724
 8001034:	20000728 	.word	0x20000728
 8001038:	20000726 	.word	0x20000726
 800103c:	2000072a 	.word	0x2000072a

08001040 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <TSK_HighFrequencyTask+0x168>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001046:	4c59      	ldr	r4, [pc, #356]	; (80011ac <TSK_HighFrequencyTask+0x16c>)
  if ( STM[M1].bState == SWITCH_OVER )
 8001048:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800104a:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 800104e:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 8001050:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001052:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8001054:	f000 809c 	beq.w	8001190 <TSK_HighFrequencyTask+0x150>
    if (!REMNG_RampCompleted(pREMNG[M1]))
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
    }
  }
  if(!RUC_Get_SCLowsideOTF_Status(&RevUpControlM1))
 8001058:	4855      	ldr	r0, [pc, #340]	; (80011b0 <TSK_HighFrequencyTask+0x170>)
 800105a:	f006 f9c5 	bl	80073e8 <RUC_Get_SCLowsideOTF_Status>
 800105e:	4605      	mov	r5, r0
 8001060:	2800      	cmp	r0, #0
 8001062:	d02f      	beq.n	80010c4 <TSK_HighFrequencyTask+0x84>
  {
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
  }
  else
  {
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1); 
 8001064:	4852      	ldr	r0, [pc, #328]	; (80011b0 <TSK_HighFrequencyTask+0x170>)
 8001066:	f006 f989 	bl	800737c <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 800106a:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <TSK_HighFrequencyTask+0x174>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800106c:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <TSK_HighFrequencyTask+0x178>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1); 
 800106e:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001070:	6810      	ldr	r0, [r2, #0]
 8001072:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	f004 f941 	bl	80052fc <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800107a:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800107c:	f8ad 001c 	strh.w	r0, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001080:	484e      	ldr	r0, [pc, #312]	; (80011bc <TSK_HighFrequencyTask+0x17c>)
 8001082:	f006 f9b5 	bl	80073f0 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001086:	484d      	ldr	r0, [pc, #308]	; (80011bc <TSK_HighFrequencyTask+0x17c>)
 8001088:	f006 fb3e 	bl	8007708 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 800108c:	2c00      	cmp	r4, #0
 800108e:	d07b      	beq.n	8001188 <TSK_HighFrequencyTask+0x148>
    {
      STO_ResetPLL(&STO_PLL_M1);
    }  
    hState = STM_GetState(&STM[M1]);
 8001090:	4845      	ldr	r0, [pc, #276]	; (80011a8 <TSK_HighFrequencyTask+0x168>)
 8001092:	f005 fd5b 	bl	8006b4c <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001096:	1f03      	subs	r3, r0, #4
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d905      	bls.n	80010aa <TSK_HighFrequencyTask+0x6a>
 800109e:	2813      	cmp	r0, #19
 80010a0:	d003      	beq.n	80010aa <TSK_HighFrequencyTask+0x6a>
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  return bMotorNbr;
}
 80010a2:	2000      	movs	r0, #0
 80010a4:	b009      	add	sp, #36	; 0x24
 80010a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);      
 80010aa:	4844      	ldr	r0, [pc, #272]	; (80011bc <TSK_HighFrequencyTask+0x17c>)
 80010ac:	f005 fba2 	bl	80067f4 <SPD_GetElAngle>
 80010b0:	a908      	add	r1, sp, #32
 80010b2:	f821 0d10 	strh.w	r0, [r1, #-16]!
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);  
 80010b6:	4842      	ldr	r0, [pc, #264]	; (80011c0 <TSK_HighFrequencyTask+0x180>)
 80010b8:	f005 febc 	bl	8006e34 <VSS_CalcElAngle>
}
 80010bc:	2000      	movs	r0, #0
 80010be:	b009      	add	sp, #36	; 0x24
 80010c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80010c4:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <TSK_HighFrequencyTask+0x184>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80010c6:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80011d8 <TSK_HighFrequencyTask+0x198>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	f005 fbea 	bl	80068a4 <STC_GetSpeedSensor>
 80010d0:	4606      	mov	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80010d2:	f005 fb8f 	bl	80067f4 <SPD_GetElAngle>
 80010d6:	4607      	mov	r7, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 80010d8:	4630      	mov	r0, r6
 80010da:	f005 fb93 	bl	8006804 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80010de:	a902      	add	r1, sp, #8
 80010e0:	f8d8 0000 	ldr.w	r0, [r8]
 80010e4:	f004 fb00 	bl	80056e8 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80010e8:	9802      	ldr	r0, [sp, #8]
 80010ea:	f7ff fc11 	bl	8000910 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80010ee:	4639      	mov	r1, r7
  Ialphabeta = MCM_Clarke(Iab);
 80010f0:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80010f2:	f7ff fc7d 	bl	80009f0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <TSK_HighFrequencyTask+0x188>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80010f8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80010fc:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80010fe:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001100:	1a09      	subs	r1, r1, r0
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	f004 fa22 	bl	800554c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001108:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <TSK_HighFrequencyTask+0x18c>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800110e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001112:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001114:	1a89      	subs	r1, r1, r2
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f004 fa18 	bl	800554c <PI_Controller>
  
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800111c:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <TSK_HighFrequencyTask+0x190>)
 800111e:	f8ad 9004 	strh.w	r9, [sp, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001128:	9901      	ldr	r1, [sp, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f8ee 	bl	800530c <Circle_Limitation>
 8001130:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001132:	4630      	mov	r0, r6
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001134:	fa0f f983 	sxth.w	r9, r3
 8001138:	141e      	asrs	r6, r3, #16
 800113a:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800113c:	f005 fb62 	bl	8006804 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001140:	4639      	mov	r1, r7
 8001142:	9801      	ldr	r0, [sp, #4]
 8001144:	f7ff fc8e 	bl	8000a64 <MCM_Rev_Park>
 8001148:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800114a:	4601      	mov	r1, r0
 800114c:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001150:	9304      	str	r3, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001152:	f004 facb 	bl	80056ec <PWMC_SetPhaseVoltage>
 8001156:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001158:	9802      	ldr	r0, [sp, #8]
 800115a:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800115c:	9803      	ldr	r0, [sp, #12]
 800115e:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001160:	9800      	ldr	r0, [sp, #0]
 8001162:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001164:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001166:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8001168:	f8a4 9016 	strh.w	r9, [r4, #22]
 800116c:	8326      	strh	r6, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 800116e:	8427      	strh	r7, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001170:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8001174:	f47f af76 	bne.w	8001064 <TSK_HighFrequencyTask+0x24>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001178:	462a      	mov	r2, r5
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <TSK_HighFrequencyTask+0x168>)
 800117c:	f005 fc56 	bl	8006a2c <STM_FaultProcessing>
}
 8001180:	2000      	movs	r0, #0
 8001182:	b009      	add	sp, #36	; 0x24
 8001184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <TSK_HighFrequencyTask+0x17c>)
 800118a:	f006 fbf9 	bl	8007980 <STO_ResetPLL>
 800118e:	e77f      	b.n	8001090 <TSK_HighFrequencyTask+0x50>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001190:	4d10      	ldr	r5, [pc, #64]	; (80011d4 <TSK_HighFrequencyTask+0x194>)
 8001192:	6828      	ldr	r0, [r5, #0]
 8001194:	f005 facc 	bl	8006730 <REMNG_RampCompleted>
 8001198:	2800      	cmp	r0, #0
 800119a:	f47f af5d 	bne.w	8001058 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 800119e:	6828      	ldr	r0, [r5, #0]
 80011a0:	f005 faaa 	bl	80066f8 <REMNG_Calc>
 80011a4:	8220      	strh	r0, [r4, #16]
 80011a6:	e757      	b.n	8001058 <TSK_HighFrequencyTask+0x18>
 80011a8:	200009a0 	.word	0x200009a0
 80011ac:	20000900 	.word	0x20000900
 80011b0:	20000340 	.word	0x20000340
 80011b4:	20000904 	.word	0x20000904
 80011b8:	20000980 	.word	0x20000980
 80011bc:	200003cc 	.word	0x200003cc
 80011c0:	20000580 	.word	0x20000580
 80011c4:	200009b4 	.word	0x200009b4
 80011c8:	200008f4 	.word	0x200008f4
 80011cc:	200009b0 	.word	0x200009b0
 80011d0:	2000097c 	.word	0x2000097c
 80011d4:	200009a8 	.word	0x200009a8
 80011d8:	200008ec 	.word	0x200008ec

080011dc <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 80011e0:	4f20      	ldr	r7, [pc, #128]	; (8001264 <TSK_SafetyTask_PWMOFF+0x88>)
{
 80011e2:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80011e8:	f004 f95c 	bl	80054a4 <NTC_CalcAvTemp>
 80011ec:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 80011ee:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80011f2:	f004 fbc5 	bl	8005980 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80011f6:	f004 040e 	and.w	r4, r4, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 80011fa:	4304      	orrs	r4, r0
 80011fc:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80011fe:	b335      	cbz	r5, 800124e <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001200:	4e19      	ldr	r6, [pc, #100]	; (8001268 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001202:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001206:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800120a:	43e2      	mvns	r2, r4
 800120c:	b292      	uxth	r2, r2
 800120e:	4621      	mov	r1, r4
 8001210:	4630      	mov	r0, r6
 8001212:	f005 fc0b 	bl	8006a2c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001216:	4630      	mov	r0, r6
 8001218:	f005 fc98 	bl	8006b4c <STM_GetState>
 800121c:	280a      	cmp	r0, #10
 800121e:	d008      	beq.n	8001232 <TSK_SafetyTask_PWMOFF+0x56>
 8001220:	280b      	cmp	r0, #11
 8001222:	d105      	bne.n	8001230 <TSK_SafetyTask_PWMOFF+0x54>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001224:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001228:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800122c:	f004 bb7a 	b.w	8005924 <PWMC_SwitchOffPWM>
 8001230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001232:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001236:	f004 fb75 	bl	8005924 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800123a:	4628      	mov	r0, r5
 800123c:	f7ff fc30 	bl	8000aa0 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <TSK_SafetyTask_PWMOFF+0x90>)
 8001242:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
}
 8001246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800124a:	f004 b8d7 	b.w	80053fc <MPM_Clear>
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <TSK_SafetyTask_PWMOFF+0x94>)
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	f005 f9e7 	bl	8006624 <RVBS_CalcAvVbusFilt>
 8001256:	f000 000e 	and.w	r0, r0, #14
 800125a:	4304      	orrs	r4, r0
 800125c:	e7d0      	b.n	8001200 <TSK_SafetyTask_PWMOFF+0x24>
 800125e:	bf00      	nop
 8001260:	200008e8 	.word	0x200008e8
 8001264:	200008ec 	.word	0x200008ec
 8001268:	200009a0 	.word	0x200009a0
 800126c:	200009ac 	.word	0x200009ac
 8001270:	20000980 	.word	0x20000980

08001274 <TSK_SafetyTask>:
{
 8001274:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <TSK_SafetyTask+0x1c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d000      	beq.n	8001280 <TSK_SafetyTask+0xc>
 800127e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ffab 	bl	80011dc <TSK_SafetyTask_PWMOFF>
}
 8001286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800128a:	f000 bd5b 	b.w	8001d44 <RCM_ExecUserConv>
 800128e:	bf00      	nop
 8001290:	20000724 	.word	0x20000724

08001294 <MC_RunMotorControlTasks>:
{
 8001294:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MC_RunMotorControlTasks+0x1c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b903      	cbnz	r3, 800129e <MC_RunMotorControlTasks+0xa>
 800129c:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800129e:	f7ff fea1 	bl	8000fe4 <MC_Scheduler>
    TSK_SafetyTask();
 80012a2:	f7ff ffe7 	bl	8001274 <TSK_SafetyTask>
}
 80012a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80012aa:	f001 b855 	b.w	8002358 <UI_Scheduler>
 80012ae:	bf00      	nop
 80012b0:	20000724 	.word	0x20000724

080012b4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected  
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80012b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <TSK_HardwareFaultTask+0x18>)
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	f004 fd1d 	bl	8005cf8 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80012c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80012c8:	f005 bbb0 	b.w	8006a2c <STM_FaultProcessing>
 80012cc:	200008ec 	.word	0x200008ec
 80012d0:	200009a0 	.word	0x200009a0

080012d4 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration 
  */
__weak void mc_lock_pins (void)
{
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <mc_lock_pins+0xd4>)
 80012dc:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e2:	61d1      	str	r1, [r2, #28]
 80012e4:	b08d      	sub	sp, #52	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012e6:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012e8:	69d3      	ldr	r3, [r2, #28]
 80012ea:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012ec:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012f0:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  (void) temp;
 80012f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012f6:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012f8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012fa:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012fc:	69d3      	ldr	r3, [r2, #28]
 80012fe:	930a      	str	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001300:	f44f 3084 	mov.w	r0, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001304:	f44f 6500 	mov.w	r5, #2048	; 0x800
  (void) temp;
 8001308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800130a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800130c:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800130e:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001310:	69d3      	ldr	r3, [r2, #28]
 8001312:	9309      	str	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001314:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001318:	f44f 6480 	mov.w	r4, #1024	; 0x400
  (void) temp;
 800131c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800131e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001320:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001322:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <mc_lock_pins+0xd8>)
  temp = READ_REG(GPIOx->LCKR);
 8001326:	69d6      	ldr	r6, [r2, #28]
 8001328:	9608      	str	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800132a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800132e:	f44f 3688 	mov.w	r6, #69632	; 0x11000
  (void) temp;
 8001332:	f8dd e020 	ldr.w	lr, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001336:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001338:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800133a:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800133c:	69de      	ldr	r6, [r3, #28]
 800133e:	9607      	str	r6, [sp, #28]
  (void) temp;
 8001340:	9e07      	ldr	r6, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001342:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001344:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001346:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001348:	69d8      	ldr	r0, [r3, #28]
 800134a:	9006      	str	r0, [sp, #24]
  (void) temp;
 800134c:	9806      	ldr	r0, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800134e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001350:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001352:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001354:	69d9      	ldr	r1, [r3, #28]
 8001356:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001358:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800135a:	4915      	ldr	r1, [pc, #84]	; (80013b0 <mc_lock_pins+0xdc>)
  (void) temp;
 800135c:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800135e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001360:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001362:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001364:	69d0      	ldr	r0, [r2, #28]
 8001366:	9004      	str	r0, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001368:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800136a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  (void) temp;
 800136e:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001370:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001372:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001374:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001376:	69d2      	ldr	r2, [r2, #28]
 8001378:	9203      	str	r2, [sp, #12]
  (void) temp;
 800137a:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800137c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800137e:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001380:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001382:	69da      	ldr	r2, [r3, #28]
 8001384:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001386:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001388:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800138a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800138c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	9201      	str	r2, [sp, #4]
  (void) temp;
 8001392:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <mc_lock_pins+0xe0>)
 8001396:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001398:	2104      	movs	r1, #4
 800139a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800139c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	9300      	str	r3, [sp, #0]
  (void) temp;
 80013a2:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 80013a4:	b00d      	add	sp, #52	; 0x34
 80013a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a8:	00010100 	.word	0x00010100
 80013ac:	48000800 	.word	0x48000800
 80013b0:	00010002 	.word	0x00010002
 80013b4:	00010004 	.word	0x00010004

080013b8 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80013b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013bc:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80013be:	2700      	movs	r7, #0
{
 80013c0:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 80013c2:	094a      	lsrs	r2, r1, #5
{
 80013c4:	460c      	mov	r4, r1
 80013c6:	4699      	mov	r9, r3
  bool bNoError = false; // Default is error
 80013c8:	f88d 7009 	strb.w	r7, [sp, #9]
{
 80013cc:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 80013ce:	d137      	bne.n	8001440 <MCP_ReceivedFrame+0x88>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80013d0:	2912      	cmp	r1, #18
 80013d2:	f200 828e 	bhi.w	80018f2 <MCP_ReceivedFrame+0x53a>
 80013d6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80013da:	0029      	.short	0x0029
 80013dc:	010b0077 	.word	0x010b0077
 80013e0:	028c019d 	.word	0x028c019d
 80013e4:	0244028c 	.word	0x0244028c
 80013e8:	021101fc 	.word	0x021101fc
 80013ec:	01d001aa 	.word	0x01d001aa
 80013f0:	02710013 	.word	0x02710013
 80013f4:	028c01e9 	.word	0x028c01e9
 80013f8:	028c028c 	.word	0x028c028c
 80013fc:	0029028c 	.word	0x0029028c
    {
      MPInfo_t stepList;
      stepList.data = buffer;
      stepList.len = Size;
      bErrorCode = ERROR_MP_NOT_ENABLED;
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001400:	4c7a      	ldr	r4, [pc, #488]	; (80015ec <MCP_ReceivedFrame+0x234>)
      stepList.data = buffer;
 8001402:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001404:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001406:	4621      	mov	r1, r4
 8001408:	a804      	add	r0, sp, #16
      stepList.len = Size;
 800140a:	f88d 9014 	strb.w	r9, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800140e:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001412:	f001 fa0f 	bl	8002834 <UI_GetMPInfo>
 8001416:	f88d 0009 	strb.w	r0, [sp, #9]

      if (bNoError)
 800141a:	2800      	cmp	r0, #0
 800141c:	f040 831a 	bne.w	8001a54 <MCP_ReceivedFrame+0x69c>
 8001420:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001424:	4618      	mov	r0, r3
    break;
  }

  if (RequireAck)
  {
    if (bNoError)
 8001426:	2800      	cmp	r0, #0
 8001428:	f040 81b7 	bne.w	800179a <MCP_ReceivedFrame+0x3e2>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 800142c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800142e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001430:	2301      	movs	r3, #1
 8001432:	f10d 020e 	add.w	r2, sp, #14
 8001436:	21ff      	movs	r1, #255	; 0xff
 8001438:	47a0      	blx	r4
    }
  }
}
 800143a:	b00d      	add	sp, #52	; 0x34
 800143c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001440:	f102 38ff 	add.w	r8, r2, #4294967295
 8001444:	4642      	mov	r2, r8
 8001446:	4639      	mov	r1, r7
 8001448:	f000 ffe8 	bl	800241c <UI_SetReg>
 800144c:	b3a0      	cbz	r0, 80014b8 <MCP_ReceivedFrame+0x100>
      if (pHandle->pDAC)
 800144e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001452:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 8001456:	b118      	cbz	r0, 8001460 <MCP_ReceivedFrame+0xa8>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001458:	4642      	mov	r2, r8
 800145a:	4639      	mov	r1, r7
 800145c:	f000 ffde 	bl	800241c <UI_SetReg>
  switch (Code)
 8001460:	2c12      	cmp	r4, #18
 8001462:	f200 82ea 	bhi.w	8001a3a <MCP_ReceivedFrame+0x682>
 8001466:	a301      	add	r3, pc, #4	; (adr r3, 800146c <MCP_ReceivedFrame+0xb4>)
 8001468:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800146c:	0800185d 	.word	0x0800185d
 8001470:	080014c9 	.word	0x080014c9
 8001474:	080015f1 	.word	0x080015f1
 8001478:	08001715 	.word	0x08001715
 800147c:	08001a3b 	.word	0x08001a3b
 8001480:	08001a3b 	.word	0x08001a3b
 8001484:	08001863 	.word	0x08001863
 8001488:	080017d3 	.word	0x080017d3
 800148c:	080017fd 	.word	0x080017fd
 8001490:	0800172f 	.word	0x0800172f
 8001494:	0800177b 	.word	0x0800177b
 8001498:	08001401 	.word	0x08001401
 800149c:	080018bd 	.word	0x080018bd
 80014a0:	080017ad 	.word	0x080017ad
 80014a4:	08001a3b 	.word	0x08001a3b
 80014a8:	08001a3b 	.word	0x08001a3b
 80014ac:	08001a3b 	.word	0x08001a3b
 80014b0:	08001a3b 	.word	0x08001a3b
 80014b4:	0800185d 	.word	0x0800185d
 80014b8:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80014bc:	230b      	movs	r3, #11
 80014be:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d0b2      	beq.n	800142c <MCP_ReceivedFrame+0x74>
 80014c6:	e168      	b.n	800179a <MCP_ReceivedFrame+0x3e2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80014c8:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80014ca:	2305      	movs	r3, #5
 80014cc:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80014d0:	2988      	cmp	r1, #136	; 0x88
 80014d2:	f200 82b7 	bhi.w	8001a44 <MCP_ReceivedFrame+0x68c>
 80014d6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80014da:	0223      	.short	0x0223
 80014dc:	02b502b5 	.word	0x02b502b5
 80014e0:	02b50256 	.word	0x02b50256
 80014e4:	024c024c 	.word	0x024c024c
 80014e8:	024c024c 	.word	0x024c024c
 80014ec:	024c024c 	.word	0x024c024c
 80014f0:	024c024c 	.word	0x024c024c
 80014f4:	024c024c 	.word	0x024c024c
 80014f8:	023c024c 	.word	0x023c024c
 80014fc:	02b5023c 	.word	0x02b5023c
 8001500:	024c02b5 	.word	0x024c02b5
 8001504:	024c024c 	.word	0x024c024c
 8001508:	024c024c 	.word	0x024c024c
 800150c:	02b502b5 	.word	0x02b502b5
 8001510:	023202b5 	.word	0x023202b5
 8001514:	02b50281 	.word	0x02b50281
 8001518:	02b502b5 	.word	0x02b502b5
 800151c:	02b502b5 	.word	0x02b502b5
 8001520:	02b502b5 	.word	0x02b502b5
 8001524:	02b502b5 	.word	0x02b502b5
 8001528:	02b502b5 	.word	0x02b502b5
 800152c:	02b502b5 	.word	0x02b502b5
 8001530:	02b502b5 	.word	0x02b502b5
 8001534:	02b502b5 	.word	0x02b502b5
 8001538:	02b502b5 	.word	0x02b502b5
 800153c:	02b502b5 	.word	0x02b502b5
 8001540:	02b502b5 	.word	0x02b502b5
 8001544:	02b502b5 	.word	0x02b502b5
 8001548:	02b502b5 	.word	0x02b502b5
 800154c:	02b502b5 	.word	0x02b502b5
 8001550:	02b502b5 	.word	0x02b502b5
 8001554:	02b502b5 	.word	0x02b502b5
 8001558:	02b502b5 	.word	0x02b502b5
 800155c:	02b5024c 	.word	0x02b5024c
 8001560:	02b502b5 	.word	0x02b502b5
 8001564:	023c02b5 	.word	0x023c02b5
 8001568:	023c023c 	.word	0x023c023c
 800156c:	02b502b5 	.word	0x02b502b5
 8001570:	02b502b5 	.word	0x02b502b5
 8001574:	02b502b5 	.word	0x02b502b5
 8001578:	02b5024c 	.word	0x02b5024c
 800157c:	02b502b5 	.word	0x02b502b5
 8001580:	024c024c 	.word	0x024c024c
 8001584:	024c024c 	.word	0x024c024c
 8001588:	024c024c 	.word	0x024c024c
 800158c:	02b5024c 	.word	0x02b5024c
 8001590:	02b5023c 	.word	0x02b5023c
 8001594:	02b502b5 	.word	0x02b502b5
 8001598:	02b502b5 	.word	0x02b502b5
 800159c:	02b5024c 	.word	0x02b5024c
 80015a0:	024c02b5 	.word	0x024c02b5
 80015a4:	02b5024c 	.word	0x02b5024c
 80015a8:	02b502b5 	.word	0x02b502b5
 80015ac:	02b502b5 	.word	0x02b502b5
 80015b0:	02b502b5 	.word	0x02b502b5
 80015b4:	02b502b5 	.word	0x02b502b5
 80015b8:	02b502b5 	.word	0x02b502b5
 80015bc:	02b502b5 	.word	0x02b502b5
 80015c0:	025602b5 	.word	0x025602b5
 80015c4:	023c023c 	.word	0x023c023c
 80015c8:	023c023c 	.word	0x023c023c
 80015cc:	02b5023c 	.word	0x02b5023c
 80015d0:	02b502b5 	.word	0x02b502b5
 80015d4:	023c023c 	.word	0x023c023c
 80015d8:	02b502b5 	.word	0x02b502b5
 80015dc:	02b502b5 	.word	0x02b502b5
 80015e0:	02b502b5 	.word	0x02b502b5
 80015e4:	024c02b5 	.word	0x024c02b5
 80015e8:	024c024c 	.word	0x024c024c
 80015ec:	2000072c 	.word	0x2000072c
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80015f0:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80015f2:	2303      	movs	r3, #3
 80015f4:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80015f8:	2988      	cmp	r1, #136	; 0x88
 80015fa:	f200 812f 	bhi.w	800185c <MCP_ReceivedFrame+0x4a4>
 80015fe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001602:	01db      	.short	0x01db
 8001604:	01db017d 	.word	0x01db017d
 8001608:	017d01db 	.word	0x017d01db
 800160c:	01c901c9 	.word	0x01c901c9
 8001610:	01c901c9 	.word	0x01c901c9
 8001614:	01c901c9 	.word	0x01c901c9
 8001618:	01c901c9 	.word	0x01c901c9
 800161c:	01c901c9 	.word	0x01c901c9
 8001620:	01c901c9 	.word	0x01c901c9
 8001624:	01c901c9 	.word	0x01c901c9
 8001628:	01c901c9 	.word	0x01c901c9
 800162c:	01c901c9 	.word	0x01c901c9
 8001630:	01c901c9 	.word	0x01c901c9
 8001634:	01c901c9 	.word	0x01c901c9
 8001638:	020b01c9 	.word	0x020b01c9
 800163c:	017d01f7 	.word	0x017d01f7
 8001640:	01c901c9 	.word	0x01c901c9
 8001644:	01db01c9 	.word	0x01db01c9
 8001648:	012d012d 	.word	0x012d012d
 800164c:	012d012d 	.word	0x012d012d
 8001650:	012d012d 	.word	0x012d012d
 8001654:	012d012d 	.word	0x012d012d
 8001658:	012d012d 	.word	0x012d012d
 800165c:	012d012d 	.word	0x012d012d
 8001660:	012d012d 	.word	0x012d012d
 8001664:	012d012d 	.word	0x012d012d
 8001668:	012d012d 	.word	0x012d012d
 800166c:	012d012d 	.word	0x012d012d
 8001670:	012d012d 	.word	0x012d012d
 8001674:	012d012d 	.word	0x012d012d
 8001678:	012d012d 	.word	0x012d012d
 800167c:	012d012d 	.word	0x012d012d
 8001680:	012d012d 	.word	0x012d012d
 8001684:	012d01c9 	.word	0x012d01c9
 8001688:	012d012d 	.word	0x012d012d
 800168c:	017d012d 	.word	0x017d012d
 8001690:	017d017d 	.word	0x017d017d
 8001694:	01c901c9 	.word	0x01c901c9
 8001698:	01c901c9 	.word	0x01c901c9
 800169c:	017d01db 	.word	0x017d01db
 80016a0:	01c901c9 	.word	0x01c901c9
 80016a4:	01c901c9 	.word	0x01c901c9
 80016a8:	01c901c9 	.word	0x01c901c9
 80016ac:	01c901c9 	.word	0x01c901c9
 80016b0:	01c901c9 	.word	0x01c901c9
 80016b4:	01db01c9 	.word	0x01db01c9
 80016b8:	012d017d 	.word	0x012d017d
 80016bc:	01c901c9 	.word	0x01c901c9
 80016c0:	01c901c9 	.word	0x01c901c9
 80016c4:	012d01c9 	.word	0x012d01c9
 80016c8:	01c9012d 	.word	0x01c9012d
 80016cc:	01db01c9 	.word	0x01db01c9
 80016d0:	017d01db 	.word	0x017d01db
 80016d4:	017d017d 	.word	0x017d017d
 80016d8:	017d017d 	.word	0x017d017d
 80016dc:	01c901db 	.word	0x01c901db
 80016e0:	017d01c9 	.word	0x017d01c9
 80016e4:	01c9012d 	.word	0x01c9012d
 80016e8:	01db01c9 	.word	0x01db01c9
 80016ec:	017d017d 	.word	0x017d017d
 80016f0:	017d017d 	.word	0x017d017d
 80016f4:	017d017d 	.word	0x017d017d
 80016f8:	017d017d 	.word	0x017d017d
 80016fc:	017d017d 	.word	0x017d017d
 8001700:	01db017d 	.word	0x01db017d
 8001704:	01db012d 	.word	0x01db012d
 8001708:	017d017d 	.word	0x017d017d
 800170c:	01c9017d 	.word	0x01c9017d
 8001710:	01c901c9 	.word	0x01c901c9
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001714:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 8001716:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001718:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800171c:	4628      	mov	r0, r5
 800171e:	f000 ffe5 	bl	80026ec <UI_ExecCmd>
 8001722:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001726:	2800      	cmp	r0, #0
 8001728:	f43f ae80 	beq.w	800142c <MCP_ReceivedFrame+0x74>
 800172c:	e035      	b.n	800179a <MCP_ReceivedFrame+0x3e2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800172e:	78b4      	ldrb	r4, [r6, #2]
 8001730:	7873      	ldrb	r3, [r6, #1]
 8001732:	78f0      	ldrb	r0, [r6, #3]
 8001734:	7931      	ldrb	r1, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001736:	f896 e006 	ldrb.w	lr, [r6, #6]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800173a:	4ac1      	ldr	r2, [pc, #772]	; (8001a40 <MCP_ReceivedFrame+0x688>)
      hDurationms = buffer[7] + (buffer[8] << 8);
 800173c:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800173e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001742:	eb03 4300 	add.w	r3, r3, r0, lsl #16
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001746:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001748:	79f4      	ldrb	r4, [r6, #7]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800174a:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800174e:	eb00 200e 	add.w	r0, r0, lr, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001752:	7831      	ldrb	r1, [r6, #0]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001754:	fb82 6203 	smull	r6, r2, r2, r3
 8001758:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800175c:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 800175e:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001762:	9000      	str	r0, [sp, #0]
 8001764:	b21b      	sxth	r3, r3
 8001766:	b292      	uxth	r2, r2
 8001768:	4628      	mov	r0, r5
 800176a:	f001 f837 	bl	80027dc <UI_SetRevupData>
 800176e:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001772:	2800      	cmp	r0, #0
 8001774:	f43f ae5a 	beq.w	800142c <MCP_ReceivedFrame+0x74>
 8001778:	e00f      	b.n	800179a <MCP_ReceivedFrame+0x3e2>
      hIdRef = buffer[2] + (buffer[3] << 8);
 800177a:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 800177c:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 800177e:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001780:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001782:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001786:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 800178a:	b212      	sxth	r2, r2
 800178c:	b209      	sxth	r1, r1
 800178e:	4628      	mov	r0, r5
 8001790:	f001 f83e 	bl	8002810 <UI_SetCurrentReferences>
      bNoError = true;
 8001794:	2301      	movs	r3, #1
 8001796:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 800179a:	2300      	movs	r3, #0
 800179c:	461a      	mov	r2, r3
 800179e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80017a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80017a2:	21f0      	movs	r1, #240	; 0xf0
 80017a4:	47a0      	blx	r4
}
 80017a6:	b00d      	add	sp, #52	; 0x34
 80017a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80017ac:	7970      	ldrb	r0, [r6, #5]
 80017ae:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80017b0:	7873      	ldrb	r3, [r6, #1]
 80017b2:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80017b4:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80017b8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 80017bc:	b292      	uxth	r2, r2
 80017be:	b209      	sxth	r1, r1
 80017c0:	4628      	mov	r0, r5
 80017c2:	f000 ffe3 	bl	800278c <UI_ExecTorqueRamp>
 80017c6:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80017ca:	2800      	cmp	r0, #0
 80017cc:	f43f ae2e 	beq.w	800142c <MCP_ReceivedFrame+0x74>
 80017d0:	e7e3      	b.n	800179a <MCP_ReceivedFrame+0x3e2>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80017d2:	7877      	ldrb	r7, [r6, #1]
 80017d4:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80017d6:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80017d8:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80017da:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80017dc:	78f1      	ldrb	r1, [r6, #3]
 80017de:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80017e2:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80017e6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80017ea:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 80017ee:	b292      	uxth	r2, r2
 80017f0:	4628      	mov	r0, r5
 80017f2:	f000 ffb9 	bl	8002768 <UI_ExecSpeedRamp>
 80017f6:	f88d 0009 	strb.w	r0, [sp, #9]
    break;
 80017fa:	e614      	b.n	8001426 <MCP_ReceivedFrame+0x6e>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 80017fc:	f10d 030e 	add.w	r3, sp, #14
 8001800:	7831      	ldrb	r1, [r6, #0]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f10d 020a 	add.w	r2, sp, #10
 8001808:	ab03      	add	r3, sp, #12
 800180a:	4628      	mov	r0, r5
 800180c:	f000 ffc8 	bl	80027a0 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001810:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 8001814:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001818:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 800181c:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001820:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001824:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001826:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001828:	121c      	asrs	r4, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 800182a:	f363 0207 	bfi	r2, r3, #0, #8
 800182e:	f364 220f 	bfi	r2, r4, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001832:	141c      	asrs	r4, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 8001834:	f364 4217 	bfi	r2, r4, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001838:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 800183a:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 800183e:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001840:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8001842:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001844:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 8001848:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 800184c:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001850:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001852:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001854:	2308      	movs	r3, #8
 8001856:	aa04      	add	r2, sp, #16
 8001858:	21f0      	movs	r1, #240	; 0xf0
 800185a:	47a0      	blx	r4
 800185c:	f89d 0009 	ldrb.w	r0, [sp, #9]
        break;
 8001860:	e5e1      	b.n	8001426 <MCP_ReceivedFrame+0x6e>
 8001862:	ac04      	add	r4, sp, #16
 8001864:	2100      	movs	r1, #0
 8001866:	4620      	mov	r0, r4
 8001868:	2220      	movs	r2, #32
 800186a:	f006 f8c9 	bl	8007a00 <memset>
 800186e:	f8d5 60c0 	ldr.w	r6, [r5, #192]	; 0xc0
 8001872:	f10d 0012 	add.w	r0, sp, #18
 8001876:	1e71      	subs	r1, r6, #1
            RequireAck = false;
 8001878:	2300      	movs	r3, #0
 800187a:	e005      	b.n	8001888 <MCP_ReceivedFrame+0x4d0>
 800187c:	3301      	adds	r3, #1
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800187e:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001880:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001884:	f000 80e2 	beq.w	8001a4c <MCP_ReceivedFrame+0x694>
 8001888:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800188c:	2a09      	cmp	r2, #9
 800188e:	d1f5      	bne.n	800187c <MCP_ReceivedFrame+0x4c4>
 8001890:	1d59      	adds	r1, r3, #5
 8001892:	1dda      	adds	r2, r3, #7
 8001894:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001896:	5c71      	ldrb	r1, [r6, r1]
 8001898:	f88d 1010 	strb.w	r1, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 800189c:	5cb2      	ldrb	r2, [r6, r2]
 800189e:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80018a2:	5cf3      	ldrb	r3, [r6, r3]
 80018a4:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80018a8:	4622      	mov	r2, r4
 80018aa:	2320      	movs	r3, #32
 80018ac:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80018ae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018b0:	21f0      	movs	r1, #240	; 0xf0
 80018b2:	47a0      	blx	r4
      bNoError = true;
 80018b4:	2301      	movs	r3, #1
 80018b6:	f88d 3009 	strb.w	r3, [sp, #9]
    break;
 80018ba:	e76e      	b.n	800179a <MCP_ReceivedFrame+0x3e2>
 80018bc:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 80018c0:	ac04      	add	r4, sp, #16
 80018c2:	3a01      	subs	r2, #1
        RequireAck = false;
 80018c4:	4623      	mov	r3, r4
 80018c6:	ae0c      	add	r6, sp, #48	; 0x30
 80018c8:	e003      	b.n	80018d2 <MCP_ReceivedFrame+0x51a>
        outBuff[i] = pHandle->s_fwVer[i];
 80018ca:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80018ce:	429e      	cmp	r6, r3
 80018d0:	d0ea      	beq.n	80018a8 <MCP_ReceivedFrame+0x4f0>
 80018d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80018d6:	1b18      	subs	r0, r3, r4
 80018d8:	b2c0      	uxtb	r0, r0
 80018da:	2900      	cmp	r1, #0
 80018dc:	d1f5      	bne.n	80018ca <MCP_ReceivedFrame+0x512>
      for (; i < 32; i++)
 80018de:	281f      	cmp	r0, #31
 80018e0:	d8e2      	bhi.n	80018a8 <MCP_ReceivedFrame+0x4f0>
        outBuff[i] = 0;
 80018e2:	f1c0 021f 	rsb	r2, r0, #31
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	3201      	adds	r2, #1
 80018ea:	4420      	add	r0, r4
 80018ec:	f006 f888 	bl	8007a00 <memset>
 80018f0:	e7da      	b.n	80018a8 <MCP_ReceivedFrame+0x4f0>
  switch (Code)
 80018f2:	2000      	movs	r0, #0
      bErrorCode = ERROR_BAD_FRAME_ID;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f88d 300e 	strb.w	r3, [sp, #14]
    break;
 80018fa:	e594      	b.n	8001426 <MCP_ReceivedFrame+0x6e>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80018fc:	f10d 0209 	add.w	r2, sp, #9
 8001900:	4628      	mov	r0, r5
 8001902:	f000 ffab 	bl	800285c <UI_GetReg>
          if ( bNoError == true )
 8001906:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 800190a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800190c:	2b00      	cmp	r3, #0
 800190e:	f43f ad89 	beq.w	8001424 <MCP_ReceivedFrame+0x6c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001912:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001914:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001916:	2304      	movs	r3, #4
 8001918:	aa04      	add	r2, sp, #16
 800191a:	21f0      	movs	r1, #240	; 0xf0
 800191c:	47a0      	blx	r4
 800191e:	e58c      	b.n	800143a <MCP_ReceivedFrame+0x82>
          int32_t wValue = (int32_t)(buffer[1]);
 8001920:	7874      	ldrb	r4, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001922:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001926:	4622      	mov	r2, r4
 8001928:	2100      	movs	r1, #0
 800192a:	f000 fd77 	bl	800241c <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800192e:	4622      	mov	r2, r4
 8001930:	2100      	movs	r1, #0
 8001932:	4628      	mov	r0, r5
 8001934:	f000 fd72 	bl	800241c <UI_SetReg>
 8001938:	f88d 0009 	strb.w	r0, [sp, #9]
        break;
 800193c:	e573      	b.n	8001426 <MCP_ReceivedFrame+0x6e>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 800193e:	7872      	ldrb	r2, [r6, #1]
 8001940:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001944:	2100      	movs	r1, #0
 8001946:	f000 ff7f 	bl	8002848 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 800194a:	2301      	movs	r3, #1
 800194c:	f88d 3009 	strb.w	r3, [sp, #9]
        break;
 8001950:	e723      	b.n	800179a <MCP_ReceivedFrame+0x3e2>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001952:	78b4      	ldrb	r4, [r6, #2]
 8001954:	7873      	ldrb	r3, [r6, #1]
 8001956:	78f0      	ldrb	r0, [r6, #3]
 8001958:	7932      	ldrb	r2, [r6, #4]
 800195a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800195e:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001962:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001966:	4628      	mov	r0, r5
 8001968:	f000 fd58 	bl	800241c <UI_SetReg>
 800196c:	f88d 0009 	strb.w	r0, [sp, #9]
        break;
 8001970:	e559      	b.n	8001426 <MCP_ReceivedFrame+0x6e>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001972:	78b2      	ldrb	r2, [r6, #2]
 8001974:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001976:	4628      	mov	r0, r5
 8001978:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800197c:	f000 fd4e 	bl	800241c <UI_SetReg>
 8001980:	f88d 0009 	strb.w	r0, [sp, #9]
        break;
 8001984:	e54f      	b.n	8001426 <MCP_ReceivedFrame+0x6e>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001986:	7872      	ldrb	r2, [r6, #1]
 8001988:	4628      	mov	r0, r5
 800198a:	f000 fd47 	bl	800241c <UI_SetReg>
 800198e:	f88d 0009 	strb.w	r0, [sp, #9]
        break;
 8001992:	e548      	b.n	8001426 <MCP_ReceivedFrame+0x6e>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001994:	f10d 0209 	add.w	r2, sp, #9
 8001998:	4628      	mov	r0, r5
 800199a:	f000 ff5f 	bl	800285c <UI_GetReg>
          if ( bNoError == true )
 800199e:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80019a2:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f43f ad3d 	beq.w	8001424 <MCP_ReceivedFrame+0x6c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80019aa:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80019ac:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80019ae:	2302      	movs	r3, #2
 80019b0:	aa04      	add	r2, sp, #16
 80019b2:	21f0      	movs	r1, #240	; 0xf0
 80019b4:	47a0      	blx	r4
 80019b6:	e540      	b.n	800143a <MCP_ReceivedFrame+0x82>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80019b8:	f10d 0209 	add.w	r2, sp, #9
 80019bc:	4628      	mov	r0, r5
 80019be:	f000 ff4d 	bl	800285c <UI_GetReg>
           if ( bNoError == true )
 80019c2:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80019c6:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f43f ad2b 	beq.w	8001424 <MCP_ReceivedFrame+0x6c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80019ce:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80019d0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80019d2:	2301      	movs	r3, #1
 80019d4:	aa04      	add	r2, sp, #16
 80019d6:	21f0      	movs	r1, #240	; 0xf0
 80019d8:	47a0      	blx	r4
 80019da:	e52e      	b.n	800143a <MCP_ReceivedFrame+0x82>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 80019dc:	7872      	ldrb	r2, [r6, #1]
 80019de:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80019e2:	2101      	movs	r1, #1
 80019e4:	f000 ff30 	bl	8002848 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 80019e8:	2301      	movs	r3, #1
 80019ea:	f88d 3009 	strb.w	r3, [sp, #9]
        break;
 80019ee:	e6d4      	b.n	800179a <MCP_ReceivedFrame+0x3e2>
          if (pHandle->pDAC)
 80019f0:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80019f4:	2800      	cmp	r0, #0
 80019f6:	f43f af31 	beq.w	800185c <MCP_ReceivedFrame+0x4a4>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 80019fa:	2101      	movs	r1, #1
 80019fc:	f000 ff28 	bl	8002850 <UI_GetDAC>
 8001a00:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001a02:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001a04:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001a08:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001a0a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001a0c:	21f0      	movs	r1, #240	; 0xf0
 8001a0e:	47a0      	blx	r4
            bNoError = true;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f88d 3009 	strb.w	r3, [sp, #9]
 8001a16:	e6c0      	b.n	800179a <MCP_ReceivedFrame+0x3e2>
          if (pHandle->pDAC)
 8001a18:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	f43f af1d 	beq.w	800185c <MCP_ReceivedFrame+0x4a4>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001a22:	2100      	movs	r1, #0
 8001a24:	f000 ff14 	bl	8002850 <UI_GetDAC>
 8001a28:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001a2a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001a2c:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001a30:	2301      	movs	r3, #1
 8001a32:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001a34:	21f0      	movs	r1, #240	; 0xf0
 8001a36:	47a0      	blx	r4
 8001a38:	e4ff      	b.n	800143a <MCP_ReceivedFrame+0x82>
 8001a3a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a3e:	e759      	b.n	80018f4 <MCP_ReceivedFrame+0x53c>
 8001a40:	2aaaaaab 	.word	0x2aaaaaab
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001a44:	2302      	movs	r3, #2
 8001a46:	f88d 300e 	strb.w	r3, [sp, #14]
 8001a4a:	e707      	b.n	800185c <MCP_ReceivedFrame+0x4a4>
 8001a4c:	2326      	movs	r3, #38	; 0x26
 8001a4e:	2224      	movs	r2, #36	; 0x24
 8001a50:	2122      	movs	r1, #34	; 0x22
 8001a52:	e720      	b.n	8001896 <MCP_ReceivedFrame+0x4de>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001a54:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001a56:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001a58:	7923      	ldrb	r3, [r4, #4]
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	21f0      	movs	r1, #240	; 0xf0
 8001a5e:	47b0      	blx	r6
 8001a60:	e4eb      	b.n	800143a <MCP_ReceivedFrame+0x82>
 8001a62:	bf00      	nop

08001a64 <MCP_WaitNextFrame>:
{
 8001a64:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001a66:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8001a68:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001a6a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001a6c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001a74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001a76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8001a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001a7c:	4718      	bx	r3
 8001a7e:	bf00      	nop

08001a80 <MCP_Init>:
{
 8001a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	4604      	mov	r4, r0
 8001a86:	461e      	mov	r6, r3
  pHandle->pDAC = pDAC;
 8001a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001a8a:	6301      	str	r1, [r0, #48]	; 0x30
  FCP_SetClient( pFCP, pHandle,
 8001a8c:	4f0b      	ldr	r7, [pc, #44]	; (8001abc <MCP_Init+0x3c>)
  pHandle->pDAC = pDAC;
 8001a8e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  pHandle->s_fwVer = s_fwVer;
 8001a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a94:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 8001a98:	4608      	mov	r0, r1
{
 8001a9a:	4615      	mov	r5, r2
  FCP_SetClient( pFCP, pHandle,
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	9700      	str	r7, [sp, #0]
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MCP_Init+0x40>)
{
 8001aa2:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <MCP_Init+0x44>)
 8001aa6:	f003 fc8b 	bl	80053c0 <FCP_SetClient>
  pHandle->fFcpSend = fFcpSend;
 8001aaa:	6365      	str	r5, [r4, #52]	; 0x34
  pHandle->fFcpReceive = fFcpReceive;
 8001aac:	63a6      	str	r6, [r4, #56]	; 0x38
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001aae:	63e7      	str	r7, [r4, #60]	; 0x3c
  MCP_WaitNextFrame(pHandle);
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7ff ffd7 	bl	8001a64 <MCP_WaitNextFrame>
}
 8001ab6:	b003      	add	sp, #12
 8001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	08001ac9 	.word	0x08001ac9
 8001ac0:	080013b9 	.word	0x080013b9
 8001ac4:	08001ad1 	.word	0x08001ad1

08001ac8 <MCP_OnTimeOut>:
{
 8001ac8:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001aca:	f7ff ffcb 	bl	8001a64 <MCP_WaitNextFrame>
 8001ace:	bd08      	pop	{r3, pc}

08001ad0 <MCP_SentFrame>:
{
 8001ad0:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001ad2:	f7ff ffc7 	bl	8001a64 <MCP_WaitNextFrame>
 8001ad6:	bd08      	pop	{r3, pc}

08001ad8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and 
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void) 
{
 8001ad8:	b530      	push	{r4, r5, lr}
 8001ada:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001adc:	f002 fda2 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001ae2:	4d0c      	ldr	r5, [pc, #48]	; (8001b14 <MX_MotorControl_Init+0x3c>)
 8001ae4:	4c0c      	ldr	r4, [pc, #48]	; (8001b18 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001ae6:	fba3 3000 	umull	r3, r0, r3, r0
 8001aea:	09c0      	lsrs	r0, r0, #7
 8001aec:	f001 ffae 	bl	8003a4c <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001af0:	4629      	mov	r1, r5
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff f816 	bl	8000b24 <MCboot>
  mc_lock_pins();
 8001af8:	f7ff fbec 	bl	80012d4 <mc_lock_pins>
  
  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <MX_MotorControl_Init+0x44>)
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4622      	mov	r2, r4
 8001b02:	462b      	mov	r3, r5
 8001b04:	2101      	movs	r1, #1
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <MX_MotorControl_Init+0x48>)
 8001b08:	f000 fbb6 	bl	8002278 <UI_TaskInit>
}
 8001b0c:	b003      	add	sp, #12
 8001b0e:	bd30      	pop	{r4, r5, pc}
 8001b10:	10624dd3 	.word	0x10624dd3
 8001b14:	200009bc 	.word	0x200009bc
 8001b18:	200009b8 	.word	0x200009b8
 8001b1c:	08007cac 	.word	0x08007cac
 8001b20:	200006f4 	.word	0x200006f4

08001b24 <RCM_RegisterRegConv>:
  
    /* Parse the array to be sure that same 
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    { 
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001b24:	4a66      	ldr	r2, [pc, #408]	; (8001cc0 <RCM_RegisterRegConv+0x19c>)
 8001b26:	6811      	ldr	r1, [r2, #0]
{
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001b2a:	2900      	cmp	r1, #0
 8001b2c:	f000 80af 	beq.w	8001c8e <RCM_RegisterRegConv+0x16a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/ 
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001b30:	790b      	ldrb	r3, [r1, #4]
 8001b32:	7904      	ldrb	r4, [r0, #4]
 8001b34:	42a3      	cmp	r3, r4
 8001b36:	f000 808e 	beq.w	8001c56 <RCM_RegisterRegConv+0x132>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001b3a:	6853      	ldr	r3, [r2, #4]
          {
           handle =i; /* Reuse the same handle */
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
 8001b3c:	2101      	movs	r1, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80aa 	beq.w	8001c98 <RCM_RegisterRegConv+0x174>
 8001b44:	21ff      	movs	r1, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001b46:	791d      	ldrb	r5, [r3, #4]
 8001b48:	42ac      	cmp	r4, r5
 8001b4a:	f000 808b 	beq.w	8001c64 <RCM_RegisterRegConv+0x140>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001b4e:	6893      	ldr	r3, [r2, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80a5 	beq.w	8001ca0 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001b56:	791d      	ldrb	r5, [r3, #4]
 8001b58:	42a5      	cmp	r5, r4
 8001b5a:	f000 808a 	beq.w	8001c72 <RCM_RegisterRegConv+0x14e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001b5e:	68d3      	ldr	r3, [r2, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a6 	beq.w	8001cb2 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001b66:	791d      	ldrb	r5, [r3, #4]
 8001b68:	42a5      	cmp	r5, r4
 8001b6a:	f000 8089 	beq.w	8001c80 <RCM_RegisterRegConv+0x15c>
    }    
    if (handle < RCM_MAX_CONV )
 8001b6e:	2903      	cmp	r1, #3
 8001b70:	d860      	bhi.n	8001c34 <RCM_RegisterRegConv+0x110>
 8001b72:	6803      	ldr	r3, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001b74:	689c      	ldr	r4, [r3, #8]
    {    
      RCM_handle_array [handle] = regConv;
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001b76:	4d53      	ldr	r5, [pc, #332]	; (8001cc4 <RCM_RegisterRegConv+0x1a0>)
      RCM_handle_array [handle] = regConv;
 8001b78:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f845 2031 	str.w	r2, [r5, r1, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001b82:	07e2      	lsls	r2, r4, #31
 8001b84:	d41e      	bmi.n	8001bc4 <RCM_RegisterRegConv+0xa0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001b86:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001b88:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001b8a:	f022 0204 	bic.w	r2, r2, #4
 8001b8e:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001b90:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8001b92:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8001b94:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8001b96:	f022 0220 	bic.w	r2, r2, #32
 8001b9a:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8001b9c:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001ba4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001ba8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bac:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001bae:	689a      	ldr	r2, [r3, #8]
       LL_ADC_ClearFlag_EOC(regConv->regADC);
       LL_ADC_DisableIT_JEOC(regConv->regADC);
       LL_ADC_ClearFlag_JEOC(regConv->regADC);

        LL_ADC_StartCalibration( regConv->regADC, LL_ADC_SINGLE_ENDED );
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )  
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	dbfc      	blt.n	8001bae <RCM_RegisterRegConv+0x8a>
  MODIFY_REG(ADCx->CR,
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bba:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc6:	f022 020f 	bic.w	r2, r2, #15
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001bcc:	7904      	ldrb	r4, [r0, #4]
 8001bce:	2c09      	cmp	r4, #9
 8001bd0:	d833      	bhi.n	8001c3a <RCM_RegisterRegConv+0x116>
 8001bd2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8001bd6:	06a2      	lsls	r2, r4, #26
 8001bd8:	2502      	movs	r5, #2
 8001bda:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8001bde:	fa05 f404 	lsl.w	r4, r5, r4
 8001be2:	4322      	orrs	r2, r4
 8001be4:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001be8:	fa97 f7a7 	rbit	r7, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001bec:	fab7 f487 	clz	r4, r7
 8001bf0:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 8001bf4:	40e7      	lsrs	r7, r4
 8001bf6:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8001bf8:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8001bfc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8001c00:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8001c04:	fa94 f6a4 	rbit	r6, r4
 8001c08:	fab6 f686 	clz	r6, r6
 8001c0c:	fa94 f4a4 	rbit	r4, r4
 8001c10:	f04f 0e07 	mov.w	lr, #7
 8001c14:	6880      	ldr	r0, [r0, #8]
 8001c16:	fab4 f484 	clz	r4, r4
 8001c1a:	fa22 f606 	lsr.w	r6, r2, r6
 8001c1e:	fa0e f606 	lsl.w	r6, lr, r6
 8001c22:	40e2      	lsrs	r2, r4
 8001c24:	4090      	lsls	r0, r2
 8001c26:	ea25 0206 	bic.w	r2, r5, r6
 8001c2a:	4302      	orrs	r2, r0
 8001c2c:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001c30:	4608      	mov	r0, r1
 8001c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c34:	21ff      	movs	r1, #255	; 0xff
 8001c36:	4608      	mov	r0, r1
 8001c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	40a2      	lsls	r2, r4
 8001c3e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001c42:	2503      	movs	r5, #3
 8001c44:	f06f 061d 	mvn.w	r6, #29
 8001c48:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8001c4c:	fb15 6404 	smlabb	r4, r5, r4, r6
 8001c50:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 8001c54:	e7c6      	b.n	8001be4 <RCM_RegisterRegConv+0xc0>
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001c56:	6809      	ldr	r1, [r1, #0]
 8001c58:	6803      	ldr	r3, [r0, #0]
 8001c5a:	4299      	cmp	r1, r3
 8001c5c:	f47f af6d 	bne.w	8001b3a <RCM_RegisterRegConv+0x16>
  uint8_t i=0;
 8001c60:	2100      	movs	r1, #0
 8001c62:	e787      	b.n	8001b74 <RCM_RegisterRegConv+0x50>
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001c64:	681d      	ldr	r5, [r3, #0]
 8001c66:	6803      	ldr	r3, [r0, #0]
 8001c68:	429d      	cmp	r5, r3
 8001c6a:	f47f af70 	bne.w	8001b4e <RCM_RegisterRegConv+0x2a>
      i++;
 8001c6e:	2101      	movs	r1, #1
 8001c70:	e780      	b.n	8001b74 <RCM_RegisterRegConv+0x50>
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001c72:	681d      	ldr	r5, [r3, #0]
 8001c74:	6803      	ldr	r3, [r0, #0]
 8001c76:	429d      	cmp	r5, r3
 8001c78:	f47f af71 	bne.w	8001b5e <RCM_RegisterRegConv+0x3a>
      i++;
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	e779      	b.n	8001b74 <RCM_RegisterRegConv+0x50>
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001c80:	681c      	ldr	r4, [r3, #0]
 8001c82:	6803      	ldr	r3, [r0, #0]
 8001c84:	429c      	cmp	r4, r3
 8001c86:	f47f af72 	bne.w	8001b6e <RCM_RegisterRegConv+0x4a>
      i++;
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	e772      	b.n	8001b74 <RCM_RegisterRegConv+0x50>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001c8e:	6853      	ldr	r3, [r2, #4]
 8001c90:	b10b      	cbz	r3, 8001c96 <RCM_RegisterRegConv+0x172>
 8001c92:	7904      	ldrb	r4, [r0, #4]
 8001c94:	e757      	b.n	8001b46 <RCM_RegisterRegConv+0x22>
 8001c96:	4619      	mov	r1, r3
 8001c98:	6893      	ldr	r3, [r2, #8]
 8001c9a:	b123      	cbz	r3, 8001ca6 <RCM_RegisterRegConv+0x182>
 8001c9c:	7904      	ldrb	r4, [r0, #4]
 8001c9e:	e75a      	b.n	8001b56 <RCM_RegisterRegConv+0x32>
      i++;
 8001ca0:	2905      	cmp	r1, #5
 8001ca2:	bf28      	it	cs
 8001ca4:	2102      	movcs	r1, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001ca6:	68d3      	ldr	r3, [r2, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f43f af60 	beq.w	8001b6e <RCM_RegisterRegConv+0x4a>
 8001cae:	7904      	ldrb	r4, [r0, #4]
 8001cb0:	e759      	b.n	8001b66 <RCM_RegisterRegConv+0x42>
 8001cb2:	2904      	cmp	r1, #4
 8001cb4:	f67f af5b 	bls.w	8001b6e <RCM_RegisterRegConv+0x4a>
      i++;
 8001cb8:	2103      	movs	r1, #3
 8001cba:	6803      	ldr	r3, [r0, #0]
 8001cbc:	e75a      	b.n	8001b74 <RCM_RegisterRegConv+0x50>
 8001cbe:	bf00      	nop
 8001cc0:	200009e8 	.word	0x200009e8
 8001cc4:	200009c4 	.word	0x200009c4

08001cc8 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001cc8:	b410      	push	{r4}
  uint16_t retVal;
 
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <RCM_ExecRegularConv+0x78>)
 8001ccc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001cd0:	7919      	ldrb	r1, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2909      	cmp	r1, #9
 8001cd6:	d825      	bhi.n	8001d24 <RCM_ExecRegularConv+0x5c>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001cd8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001cdc:	068b      	lsls	r3, r1, #26
 8001cde:	2002      	movs	r0, #2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ce0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001ce4:	fa00 f101 	lsl.w	r1, r0, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001cee:	fa91 f1a1 	rbit	r1, r1
  MODIFY_REG(*preg,
 8001cf2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001cf4:	0d1b      	lsrs	r3, r3, #20
 8001cf6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cfa:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001d02:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8001d04:	6893      	ldr	r3, [r2, #8]
 8001d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001d14:	6813      	ldr	r3, [r2, #0]

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001d16:	075b      	lsls	r3, r3, #29
 8001d18:	d5fc      	bpl.n	8001d14 <RCM_ExecRegularConv+0x4c>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001d1a:	6c10      	ldr	r0, [r2, #64]	; 0x40
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );   
return retVal;
}
 8001d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d20:	b280      	uxth	r0, r0
 8001d22:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d24:	2302      	movs	r3, #2
 8001d26:	408b      	lsls	r3, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f06f 041d 	mvn.w	r4, #29
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d32:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d36:	fb10 4101 	smlabb	r1, r0, r1, r4
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d3a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001d3e:	e7d4      	b.n	8001cea <RCM_ExecRegularConv+0x22>
 8001d40:	200009e8 	.word	0x200009e8

08001d44 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
void RCM_ExecUserConv ()
{
 8001d44:	b470      	push	{r4, r5, r6}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001d46:	4c28      	ldr	r4, [pc, #160]	; (8001de8 <RCM_ExecUserConv+0xa4>)
 8001d48:	7823      	ldrb	r3, [r4, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <RCM_ExecUserConv+0xe>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001d4e:	bc70      	pop	{r4, r5, r6}
 8001d50:	4770      	bx	lr
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001d52:	4a26      	ldr	r2, [pc, #152]	; (8001dec <RCM_ExecUserConv+0xa8>)
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d54:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <RCM_ExecUserConv+0xac>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001d56:	7810      	ldrb	r0, [r2, #0]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d5c:	7919      	ldrb	r1, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2909      	cmp	r1, #9
 8001d62:	d833      	bhi.n	8001dcc <RCM_ExecUserConv+0x88>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d64:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8001d68:	068b      	lsls	r3, r1, #26
 8001d6a:	2502      	movs	r5, #2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d6c:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d70:	fa05 f101 	lsl.w	r1, r5, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d74:	430b      	orrs	r3, r1
 8001d76:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d7a:	fa91 f1a1 	rbit	r1, r1
  MODIFY_REG(*preg,
 8001d7e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d80:	0d1b      	lsrs	r3, r3, #20
 8001d82:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d86:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001d8e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8001d90:	6893      	ldr	r3, [r2, #8]
 8001d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001da0:	6813      	ldr	r3, [r2, #0]
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001da2:	075b      	lsls	r3, r3, #29
 8001da4:	d5fc      	bpl.n	8001da0 <RCM_ExecUserConv+0x5c>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <RCM_ExecUserConv+0xb0>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001da8:	6c11      	ldr	r1, [r2, #64]	; 0x40
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001daa:	4e13      	ldr	r6, [pc, #76]	; (8001df8 <RCM_ExecUserConv+0xb4>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001dac:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8001db0:	b289      	uxth	r1, r1
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001db2:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001db4:	8031      	strh	r1, [r6, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001db6:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001db8:	2d00      	cmp	r5, #0
 8001dba:	d0c8      	beq.n	8001d4e <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001dbc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001dc0:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001dc2:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001dc4:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001dc6:	462b      	mov	r3, r5
}
 8001dc8:	bc70      	pop	{r4, r5, r6}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001dca:	4718      	bx	r3
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001dcc:	2302      	movs	r3, #2
 8001dce:	408b      	lsls	r3, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001dd4:	2503      	movs	r5, #3
 8001dd6:	f06f 061d 	mvn.w	r6, #29
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dda:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001dde:	fb15 6101 	smlabb	r1, r5, r1, r6
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001de2:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001de6:	e7c6      	b.n	8001d76 <RCM_ExecUserConv+0x32>
 8001de8:	200009e4 	.word	0x200009e4
 8001dec:	200009c0 	.word	0x200009c0
 8001df0:	200009e8 	.word	0x200009e8
 8001df4:	200009c4 	.word	0x200009c4
 8001df8:	200009f8 	.word	0x200009f8

08001dfc <ADC1_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 8001dfc:	b508      	push	{r3, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8001dfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e02:	2240      	movs	r2, #64	; 0x40
 8001e04:	601a      	str	r2, [r3, #0]
  
  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task 
  UI_DACUpdate(TSK_HighFrequencyTask());
 8001e06:	f7ff f91b 	bl	8001040 <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */  
 
 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());
 8001e0e:	f000 bac5 	b.w	800239c <UI_DACUpdate>
 8001e12:	bf00      	nop

08001e14 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */ 
 
    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);    
 8001e16:	4804      	ldr	r0, [pc, #16]	; (8001e28 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001e18:	f06f 0201 	mvn.w	r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
 8001e1e:	f004 ba4b 	b.w	80062b8 <R3_1_TIMx_UP_IRQHandler>
 8001e22:	bf00      	nop
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	20000288 	.word	0x20000288

08001e2c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */ 
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8001e2c:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	0611      	lsls	r1, r2, #24
 8001e34:	d505      	bpl.n	8001e42 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001e36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e3a:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */ 
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);    
 8001e3c:	4809      	ldr	r0, [pc, #36]	; (8001e64 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8001e3e:	f004 fa75 	bl	800632c <R3_1_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	05d2      	lsls	r2, r2, #23
 8001e48:	d505      	bpl.n	8001e56 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8001e4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e4e:	611a      	str	r2, [r3, #16]
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);  
    R3_1_BRK2_IRQHandler(&PWM_Handle_M1);    
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8001e52:	f004 fa4b 	bl	80062ec <R3_1_BRK2_IRQHandler>
  MC_Scheduler();
  
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */ 
}
 8001e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8001e5a:	f7ff b8c3 	b.w	8000fe4 <MC_Scheduler>
 8001e5e:	bf00      	nop
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	20000288 	.word	0x20000288

08001e68 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8001e68:	b510      	push	{r4, lr}

 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001e6a:	4c18      	ldr	r4, [pc, #96]	; (8001ecc <USART2_IRQHandler+0x64>)
 8001e6c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	0691      	lsls	r1, r2, #26
 8001e74:	d50b      	bpl.n	8001e8e <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001e76:	8c99      	ldrh	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 8001e78:	4620      	mov	r0, r4
 8001e7a:	b2c9      	uxtb	r1, r1
 8001e7c:	f004 ff4e 	bl	8006d1c <UFCP_RX_IRQ_Handler>
 8001e80:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d01a      	beq.n	8001ebc <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d01d      	beq.n	8001ec6 <USART2_IRQHandler+0x5e>
 8001e8a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	0612      	lsls	r2, r2, #24
 8001e92:	d504      	bpl.n	8001e9e <USART2_IRQHandler+0x36>
  /* USER CODE END USART_RXNE  */ 
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <USART2_IRQHandler+0x64>)
 8001e96:	f004 fe6f 	bl	8006b78 <UFCP_TX_IRQ_Handler>
 8001e9a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	071b      	lsls	r3, r3, #28
 8001ea2:	d400      	bmi.n	8001ea6 <USART2_IRQHandler+0x3e>
 8001ea4:	bd10      	pop	{r4, pc}
  }
  
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8001ea6:	4809      	ldr	r0, [pc, #36]	; (8001ecc <USART2_IRQHandler+0x64>)
 8001ea8:	f004 ff9a 	bl	8006de0 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001eac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */

}
 8001eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8001eb8:	f000 ba80 	b.w	80023bc <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStart();
 8001ebc:	f000 fa84 	bl	80023c8 <UI_SerialCommunicationTimeOutStart>
 8001ec0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001ec4:	e7e3      	b.n	8001e8e <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8001ec6:	f000 fa79 	bl	80023bc <UI_SerialCommunicationTimeOutStop>
 8001eca:	e7de      	b.n	8001e8a <USART2_IRQHandler+0x22>
 8001ecc:	200005b8 	.word	0x200005b8

08001ed0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8001ed2:	f7ff f9ef 	bl	80012b4 <TSK_HardwareFaultTask>
 8001ed6:	4d17      	ldr	r5, [pc, #92]	; (8001f34 <HardFault_Handler+0x64>)
 8001ed8:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8001eda:	462c      	mov	r4, r5
 8001edc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	0711      	lsls	r1, r2, #28
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	d508      	bpl.n	8001efa <HardFault_Handler+0x2a>
 8001ee8:	f004 ff7a 	bl	8006de0 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001eec:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001ef0:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8001ef2:	f000 fa63 	bl	80023bc <UI_SerialCommunicationTimeOutStop>
 8001ef6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	f012 0f80 	tst.w	r2, #128	; 0x80
      }
      
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
      {   
        UFCP_TX_IRQ_Handler(&pUSART);
 8001f00:	4620      	mov	r0, r4
 8001f02:	d003      	beq.n	8001f0c <HardFault_Handler+0x3c>
 8001f04:	f004 fe38 	bl	8006b78 <UFCP_TX_IRQ_Handler>
 8001f08:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	0692      	lsls	r2, r2, #26
 8001f10:	d5e6      	bpl.n	8001ee0 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001f12:	8c99      	ldrh	r1, [r3, #36]	; 0x24
      }  
      
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8001f14:	4620      	mov	r0, r4
 8001f16:	b2c9      	uxtb	r1, r1
 8001f18:	f004 ff00 	bl	8006d1c <UFCP_RX_IRQ_Handler>
 8001f1c:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d004      	beq.n	8001f2c <HardFault_Handler+0x5c>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d1da      	bne.n	8001edc <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8001f26:	f000 fa49 	bl	80023bc <UI_SerialCommunicationTimeOutStop>
 8001f2a:	e7d7      	b.n	8001edc <HardFault_Handler+0xc>
          UI_SerialCommunicationTimeOutStart();
 8001f2c:	f000 fa4c 	bl	80023c8 <UI_SerialCommunicationTimeOutStart>
 8001f30:	e7d4      	b.n	8001edc <HardFault_Handler+0xc>
 8001f32:	bf00      	nop
 8001f34:	200005b8 	.word	0x200005b8

08001f38 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8001f38:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8001f3a:	4c0a      	ldr	r4, [pc, #40]	; (8001f64 <SysTick_Handler+0x2c>)
 8001f3c:	7823      	ldrb	r3, [r4, #0]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d006      	beq.n	8001f50 <SysTick_Handler+0x18>
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;  
 8001f46:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8001f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8001f4c:	f7ff b9a2 	b.w	8001294 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8001f50:	f001 f86e 	bl	8003030 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8001f54:	f001 fd96 	bl	8003a84 <HAL_SYSTICK_IRQHandler>
 8001f58:	2301      	movs	r3, #1
  SystickDividerCounter ++;  
 8001f5a:	7023      	strb	r3, [r4, #0]
}
 8001f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8001f60:	f7ff b998 	b.w	8001294 <MC_RunMotorControlTasks>
 8001f64:	200006f8 	.word	0x200006f8

08001f68 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <EXTI15_10_IRQHandler+0x14>)
 8001f6a:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) ) 
 8001f6c:	0492      	lsls	r2, r2, #18
 8001f6e:	d400      	bmi.n	8001f72 <EXTI15_10_IRQHandler+0xa>
 8001f70:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f76:	615a      	str	r2, [r3, #20]
  {                                                                                
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);  
    UI_HandleStartStopButton_cb ();                                               
 8001f78:	f000 ba2c 	b.w	80023d4 <UI_HandleStartStopButton_cb>
 8001f7c:	40010400 	.word	0x40010400

08001f80 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_MspInit+0x38>)
{
 8001f82:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	619a      	str	r2, [r3, #24]
 8001f8c:	699a      	ldr	r2, [r3, #24]
{
 8001f8e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	f002 0201 	and.w	r2, r2, #1
 8001f94:	9200      	str	r2, [sp, #0]
 8001f96:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f9e:	61da      	str	r2, [r3, #28]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001fa8:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001fac:	f001 fcf8 	bl	80039a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb0:	b003      	add	sp, #12
 8001fb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001fbe:	6803      	ldr	r3, [r0, #0]
{
 8001fc0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	9404      	str	r4, [sp, #16]
 8001fca:	9403      	str	r4, [sp, #12]
 8001fcc:	9405      	str	r4, [sp, #20]
 8001fce:	9406      	str	r4, [sp, #24]
 8001fd0:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC1)
 8001fd2:	d001      	beq.n	8001fd8 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fd4:	b009      	add	sp, #36	; 0x24
 8001fd6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fd8:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001fdc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe0:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe2:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe4:	4815      	ldr	r0, [pc, #84]	; (800203c <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fea:	615a      	str	r2, [r3, #20]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001ff2:	9200      	str	r2, [sp, #0]
 8001ff4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ffc:	615a      	str	r2, [r3, #20]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002004:	9201      	str	r2, [sp, #4]
 8002006:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800200e:	615a      	str	r2, [r3, #20]
 8002010:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002012:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 800201c:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8002020:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f001 fd6d 	bl	8003b00 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	a903      	add	r1, sp, #12
 8002028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 800202c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f001 fd65 	bl	8003b00 <HAL_GPIO_Init>
}
 8002036:	b009      	add	sp, #36	; 0x24
 8002038:	bd30      	pop	{r4, r5, pc}
 800203a:	bf00      	nop
 800203c:	48000800 	.word	0x48000800

08002040 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002040:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8002042:	6801      	ldr	r1, [r0, #0]
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_DAC_MspInit+0x60>)
{
 8002046:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 800204a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	9304      	str	r3, [sp, #16]
 800204e:	9303      	str	r3, [sp, #12]
 8002050:	9305      	str	r3, [sp, #20]
 8002052:	9306      	str	r3, [sp, #24]
 8002054:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 8002056:	d001      	beq.n	800205c <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002058:	b008      	add	sp, #32
 800205a:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 800205c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002060:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8002064:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800206c:	61da      	str	r2, [r3, #28]
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8002074:	9201      	str	r2, [sp, #4]
 8002076:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800207e:	615a      	str	r2, [r3, #20]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8002088:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208a:	2303      	movs	r3, #3
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 800208c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8002092:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002094:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8002096:	f001 fd33 	bl	8003b00 <HAL_GPIO_Init>
}
 800209a:	b008      	add	sp, #32
 800209c:	bd10      	pop	{r4, pc}
 800209e:	bf00      	nop
 80020a0:	40007400 	.word	0x40007400

080020a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80020a8:	6801      	ldr	r1, [r0, #0]
 80020aa:	4a24      	ldr	r2, [pc, #144]	; (800213c <HAL_I2C_MspInit+0x98>)
{
 80020ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 80020b0:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b2:	9304      	str	r3, [sp, #16]
 80020b4:	9303      	str	r3, [sp, #12]
 80020b6:	9305      	str	r3, [sp, #20]
 80020b8:	9306      	str	r3, [sp, #24]
 80020ba:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80020bc:	d002      	beq.n	80020c4 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020be:	b008      	add	sp, #32
 80020c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c4:	4c1e      	ldr	r4, [pc, #120]	; (8002140 <HAL_I2C_MspInit+0x9c>)
 80020c6:	6963      	ldr	r3, [r4, #20]
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	6163      	str	r3, [r4, #20]
 80020ce:	6963      	ldr	r3, [r4, #20]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	6963      	ldr	r3, [r4, #20]
 80020da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020de:	6163      	str	r3, [r4, #20]
 80020e0:	6963      	ldr	r3, [r4, #20]
 80020e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e8:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f0:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f2:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f4:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	a903      	add	r1, sp, #12
 80020f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fc:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002100:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002104:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002106:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002108:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f001 fcf9 	bl	8003b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800210e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	a903      	add	r1, sp, #12
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002114:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002116:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800211e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f001 fcee 	bl	8003b00 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002124:	69e3      	ldr	r3, [r4, #28]
 8002126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800212a:	61e3      	str	r3, [r4, #28]
 800212c:	69e3      	ldr	r3, [r4, #28]
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	9b02      	ldr	r3, [sp, #8]
}
 8002136:	b008      	add	sp, #32
 8002138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800213c:	40005400 	.word	0x40005400
 8002140:	40021000 	.word	0x40021000
 8002144:	48000400 	.word	0x48000400

08002148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002148:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800214a:	6801      	ldr	r1, [r0, #0]
 800214c:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <HAL_TIM_Base_MspInit+0x68>)
{
 800214e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8002152:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	9304      	str	r3, [sp, #16]
 8002156:	9303      	str	r3, [sp, #12]
 8002158:	9305      	str	r3, [sp, #20]
 800215a:	9306      	str	r3, [sp, #24]
 800215c:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM1)
 800215e:	d001      	beq.n	8002164 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002160:	b008      	add	sp, #32
 8002162:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002164:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002168:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800216c:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002174:	619a      	str	r2, [r3, #24]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800217c:	9201      	str	r2, [sp, #4]
 800217e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002186:	615a      	str	r2, [r3, #20]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002190:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 8002192:	230c      	movs	r3, #12
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002194:	f44f 6500 	mov.w	r5, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2402      	movs	r4, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800219a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80021a0:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 80021a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80021a8:	f001 fcaa 	bl	8003b00 <HAL_GPIO_Init>
}
 80021ac:	b008      	add	sp, #32
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	40012c00 	.word	0x40012c00

080021b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80021b6:	6801      	ldr	r1, [r0, #0]
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <HAL_TIM_MspPostInit+0x58>)
{
 80021ba:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80021be:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	9303      	str	r3, [sp, #12]
 80021c6:	9304      	str	r3, [sp, #16]
 80021c8:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 80021ca:	d001      	beq.n	80021d0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021cc:	b006      	add	sp, #24
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021e0:	615a      	str	r2, [r3, #20]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021ea:	2206      	movs	r2, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80021ee:	f44f 65e0 	mov.w	r5, #1792	; 0x700
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f2:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	9e00      	ldr	r6, [sp, #0]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80021fa:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002200:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002202:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	f001 fc7c 	bl	8003b00 <HAL_GPIO_Init>
}
 8002208:	b006      	add	sp, #24
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	40012c00 	.word	0x40012c00

08002210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002212:	6801      	ldr	r1, [r0, #0]
 8002214:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_UART_MspInit+0x64>)
{
 8002216:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 800221a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	9304      	str	r3, [sp, #16]
 800221e:	9303      	str	r3, [sp, #12]
 8002220:	9305      	str	r3, [sp, #20]
 8002222:	9306      	str	r3, [sp, #24]
 8002224:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8002226:	d001      	beq.n	800222c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002228:	b009      	add	sp, #36	; 0x24
 800222a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800222c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002230:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800223c:	61da      	str	r2, [r3, #28]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002244:	9201      	str	r2, [sp, #4]
 8002246:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800224e:	615a      	str	r2, [r3, #20]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800225a:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800225c:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002264:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002268:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f001 fc49 	bl	8003b00 <HAL_GPIO_Init>
}
 800226e:	b009      	add	sp, #36	; 0x24
 8002270:	bd30      	pop	{r4, r5, pc}
 8002272:	bf00      	nop
 8002274:	40004400 	.word	0x40004400

08002278 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800227c:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;      
      pDAC->_Super = UI_Params;
 800227e:	4d2d      	ldr	r5, [pc, #180]	; (8002334 <UI_TaskInit+0xbc>)
{
 8002280:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002282:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 8002284:	462c      	mov	r4, r5
{
 8002286:	4682      	mov	sl, r0
 8002288:	460f      	mov	r7, r1
 800228a:	4690      	mov	r8, r2
 800228c:	4699      	mov	r9, r3
      pDAC->_Super = UI_Params;
 800228e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;      
 8002290:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800234c <UI_TaskInit+0xd4>
 8002294:	4e28      	ldr	r6, [pc, #160]	; (8002338 <UI_TaskInit+0xc0>)
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 8002296:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8002350 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;      
 800229a:	f8c6 c000 	str.w	ip, [r6]
      pDAC->_Super = UI_Params;
 800229e:	46e6      	mov	lr, ip
 80022a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80022a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80022aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80022ae:	f8cd a000 	str.w	sl, [sp]
      pDAC->_Super = UI_Params;
 80022b2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80022b6:	464b      	mov	r3, r9
 80022b8:	4660      	mov	r0, ip
 80022ba:	4642      	mov	r2, r8
 80022bc:	4639      	mov	r1, r7
 80022be:	f000 f895 	bl	80023ec <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 80022c2:	6830      	ldr	r0, [r6, #0]
 80022c4:	f000 fab8 	bl	8002838 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
 80022c8:	6830      	ldr	r0, [r6, #0]
 80022ca:	2223      	movs	r2, #35	; 0x23
 80022cc:	2100      	movs	r1, #0
 80022ce:	f000 fabb 	bl	8002848 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 80022d2:	6830      	ldr	r0, [r6, #0]
 80022d4:	2224      	movs	r2, #36	; 0x24
 80022d6:	2101      	movs	r1, #1
 80022d8:	f000 fab6 	bl	8002848 <UI_SetDAC>
    pMCP->_Super = UI_Params;
 80022dc:	46ac      	mov	ip, r5
 80022de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 80022e2:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002354 <UI_TaskInit+0xdc>
    pMCP->_Super = UI_Params;
 80022e6:	4675      	mov	r5, lr
 80022e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80022ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 80022f4:	4c11      	ldr	r4, [pc, #68]	; (800233c <UI_TaskInit+0xc4>)
    pMCP->_Super = UI_Params;
 80022f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 80022fa:	4658      	mov	r0, fp
    pMCP = &MCP_UI_Params;
 80022fc:	f8c4 e000 	str.w	lr, [r4]
    UFCP_Init( & pUSART );
 8002300:	f004 fc38 	bl	8006b74 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8002304:	6832      	ldr	r2, [r6, #0]
 8002306:	9905      	ldr	r1, [sp, #20]
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <UI_TaskInit+0xc8>)
 800230a:	6820      	ldr	r0, [r4, #0]
 800230c:	9102      	str	r1, [sp, #8]
 800230e:	9201      	str	r2, [sp, #4]
 8002310:	4659      	mov	r1, fp
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <UI_TaskInit+0xcc>)
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <UI_TaskInit+0xd0>)
 8002318:	f7ff fbb2 	bl	8001a80 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800231c:	6820      	ldr	r0, [r4, #0]
 800231e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002322:	464b      	mov	r3, r9
 8002324:	4642      	mov	r2, r8
 8002326:	4639      	mov	r1, r7

}
 8002328:	b007      	add	sp, #28
 800232a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800232e:	f000 b85d 	b.w	80023ec <UI_Init>
 8002332:	bf00      	nop
 8002334:	20000550 	.word	0x20000550
 8002338:	20000738 	.word	0x20000738
 800233c:	2000073c 	.word	0x2000073c
 8002340:	08006dfd 	.word	0x08006dfd
 8002344:	08006c01 	.word	0x08006c01
 8002348:	08006bdd 	.word	0x08006bdd
 800234c:	200000b4 	.word	0x200000b4
 8002350:	200005b8 	.word	0x200005b8
 8002354:	200009fc 	.word	0x200009fc

08002358 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <UI_Scheduler+0x38>)
 800235a:	8813      	ldrh	r3, [r2, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	b11b      	cbz	r3, 8002368 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002360:	8813      	ldrh	r3, [r2, #0]
 8002362:	3b01      	subs	r3, #1
 8002364:	b29b      	uxth	r3, r3
 8002366:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <UI_Scheduler+0x3c>)
 800236a:	8813      	ldrh	r3, [r2, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d903      	bls.n	800237a <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002372:	8813      	ldrh	r3, [r2, #0]
 8002374:	3b01      	subs	r3, #1
 8002376:	b29b      	uxth	r3, r3
 8002378:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <UI_Scheduler+0x40>)
 800237c:	8813      	ldrh	r3, [r2, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d903      	bls.n	800238c <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002384:	8813      	ldrh	r3, [r2, #0]
 8002386:	3b01      	subs	r3, #1
 8002388:	b29b      	uxth	r3, r3
 800238a:	8013      	strh	r3, [r2, #0]
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000736 	.word	0x20000736
 8002394:	20000734 	.word	0x20000734
 8002398:	200006fa 	.word	0x200006fa

0800239c <UI_DACUpdate>:
  }
}

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 800239c:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 800239e:	4c06      	ldr	r4, [pc, #24]	; (80023b8 <UI_DACUpdate+0x1c>)
{
 80023a0:	4605      	mov	r5, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80023a2:	6820      	ldr	r0, [r4, #0]
 80023a4:	f000 f836 	bl	8002414 <UI_GetSelectedMC>
 80023a8:	42a8      	cmp	r0, r5
 80023aa:	d000      	beq.n	80023ae <UI_DACUpdate+0x12>
 80023ac:	bd38      	pop	{r3, r4, r5, pc}
  {  
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80023ae:	6820      	ldr	r0, [r4, #0]
  }
}
 80023b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80023b4:	f000 ba44 	b.w	8002840 <UI_DACExec>
 80023b8:	20000738 	.word	0x20000738

080023bc <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <UI_SerialCommunicationTimeOutStop+0x8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	4770      	bx	lr
 80023c4:	20000734 	.word	0x20000734

080023c8 <UI_SerialCommunicationTimeOutStart>:
}

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80023c8:	4b01      	ldr	r3, [pc, #4]	; (80023d0 <UI_SerialCommunicationTimeOutStart+0x8>)
 80023ca:	224f      	movs	r2, #79	; 0x4f
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	4770      	bx	lr
 80023d0:	20000734 	.word	0x20000734

080023d4 <UI_HandleStartStopButton_cb>:
}

__weak void UI_HandleStartStopButton_cb (void)
{
 80023d4:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 80023d6:	f7fe f98d 	bl	80006f4 <MC_GetSTMStateMotor1>
 80023da:	b118      	cbz	r0, 80023e4 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80023dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 80023e0:	f7fe b97a 	b.w	80006d8 <MC_StopMotor1>
}
 80023e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 80023e8:	f7fe b970 	b.w	80006cc <MC_StartMotor1>

080023ec <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 80023ec:	b430      	push	{r4, r5}
 80023ee:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80023f0:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 80023f2:	2500      	movs	r5, #0
 80023f4:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  pHandle->bDriveNum = bMCNum;
 80023f8:	7701      	strb	r1, [r0, #28]
  pHandle->pMCI = pMCI;
 80023fa:	6202      	str	r2, [r0, #32]
  pHandle->pMCT = pMCT;
 80023fc:	6243      	str	r3, [r0, #36]	; 0x24
}
 80023fe:	bc30      	pop	{r4, r5}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop

08002404 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002404:	7f03      	ldrb	r3, [r0, #28]
 8002406:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002408:	bf86      	itte	hi
 800240a:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 800240e:	2001      	movhi	r0, #1
    retVal = false;
 8002410:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002412:	4770      	bx	lr

08002414 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002414:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop

0800241c <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 800241c:	b530      	push	{r4, r5, lr}
 800241e:	4614      	mov	r4, r2
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002420:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002424:	6a05      	ldr	r5, [r0, #32]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002426:	6a42      	ldr	r2, [r0, #36]	; 0x24
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002428:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800242c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
{
 8002430:	b083      	sub	sp, #12

  bool retVal = true;
  switch (bRegID)
 8002432:	295b      	cmp	r1, #91	; 0x5b
 8002434:	f200 813b 	bhi.w	80026ae <UI_SetReg+0x292>
 8002438:	e8df f011 	tbh	[pc, r1, lsl #1]
 800243c:	01390069 	.word	0x01390069
 8002440:	006d0139 	.word	0x006d0139
 8002444:	007e0139 	.word	0x007e0139
 8002448:	008a0084 	.word	0x008a0084
 800244c:	009c0090 	.word	0x009c0090
 8002450:	00a800a2 	.word	0x00a800a2
 8002454:	00ba00ae 	.word	0x00ba00ae
 8002458:	00c600c0 	.word	0x00c600c0
 800245c:	00e600cc 	.word	0x00e600cc
 8002460:	01390139 	.word	0x01390139
 8002464:	01190100 	.word	0x01190100
 8002468:	01390139 	.word	0x01390139
 800246c:	01390139 	.word	0x01390139
 8002470:	01390139 	.word	0x01390139
 8002474:	01390139 	.word	0x01390139
 8002478:	01390139 	.word	0x01390139
 800247c:	01390139 	.word	0x01390139
 8002480:	01390139 	.word	0x01390139
 8002484:	01390139 	.word	0x01390139
 8002488:	01390139 	.word	0x01390139
 800248c:	01390139 	.word	0x01390139
 8002490:	01390139 	.word	0x01390139
 8002494:	01390139 	.word	0x01390139
 8002498:	01390139 	.word	0x01390139
 800249c:	01390139 	.word	0x01390139
 80024a0:	01390139 	.word	0x01390139
 80024a4:	01390139 	.word	0x01390139
 80024a8:	01390139 	.word	0x01390139
 80024ac:	01390139 	.word	0x01390139
 80024b0:	01390139 	.word	0x01390139
 80024b4:	01390139 	.word	0x01390139
 80024b8:	01390139 	.word	0x01390139
 80024bc:	01320139 	.word	0x01320139
 80024c0:	01390139 	.word	0x01390139
 80024c4:	01390139 	.word	0x01390139
 80024c8:	01390139 	.word	0x01390139
 80024cc:	01390139 	.word	0x01390139
 80024d0:	01390139 	.word	0x01390139
 80024d4:	01390139 	.word	0x01390139
 80024d8:	01390139 	.word	0x01390139
 80024dc:	01390139 	.word	0x01390139
 80024e0:	01390139 	.word	0x01390139
 80024e4:	01390139 	.word	0x01390139
 80024e8:	01390139 	.word	0x01390139
 80024ec:	01390139 	.word	0x01390139
 80024f0:	005c0139 	.word	0x005c0139
    }
    break;

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 80024f4:	497c      	ldr	r1, [pc, #496]	; (80026e8 <UI_SetReg+0x2cc>)
 80024f6:	fb81 3104 	smull	r3, r1, r1, r4
 80024fa:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 80024fe:	4628      	mov	r0, r5
 8002500:	b209      	sxth	r1, r1
 8002502:	2200      	movs	r2, #0
 8002504:	f7fe f908 	bl	8000718 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002508:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 800250a:	b003      	add	sp, #12
 800250c:	bd30      	pop	{r4, r5, pc}
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 800250e:	b2e1      	uxtb	r1, r4
 8002510:	f7ff ff78 	bl	8002404 <UI_SelectMC>
    break;
 8002514:	e7f9      	b.n	800250a <UI_SetReg+0xee>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002516:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800251a:	f000 80ca 	beq.w	80026b2 <UI_SetReg+0x296>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 800251e:	2c01      	cmp	r4, #1
 8002520:	f040 80c2 	bne.w	80026a8 <UI_SetReg+0x28c>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002524:	4628      	mov	r0, r5
 8002526:	f7fe f9a7 	bl	8000878 <MCI_GetMecSpeedRefUnit>
 800252a:	2200      	movs	r2, #0
 800252c:	4601      	mov	r1, r0
 800252e:	4628      	mov	r0, r5
 8002530:	f7fe f8f2 	bl	8000718 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002534:	4620      	mov	r0, r4
 8002536:	e7e8      	b.n	800250a <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002538:	6810      	ldr	r0, [r2, #0]
 800253a:	b221      	sxth	r1, r4
 800253c:	f002 ffee 	bl	800551c <PID_SetKP>
  bool retVal = true;
 8002540:	2001      	movs	r0, #1
    break;
 8002542:	e7e2      	b.n	800250a <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002544:	6810      	ldr	r0, [r2, #0]
 8002546:	b221      	sxth	r1, r4
 8002548:	f002 ffea 	bl	8005520 <PID_SetKI>
  bool retVal = true;
 800254c:	2001      	movs	r0, #1
    break;
 800254e:	e7dc      	b.n	800250a <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002550:	6810      	ldr	r0, [r2, #0]
 8002552:	b221      	sxth	r1, r4
 8002554:	f002 fff4 	bl	8005540 <PID_SetKD>
  bool retVal = true;
 8002558:	2001      	movs	r0, #1
    break;
 800255a:	e7d6      	b.n	800250a <UI_SetReg+0xee>
      currComp = MCI_GetIqdref(pMCI);
 800255c:	4628      	mov	r0, r5
 800255e:	f7fe f9a7 	bl	80008b0 <MCI_GetIqdref>
 8002562:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002564:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002568:	4628      	mov	r0, r5
 800256a:	9901      	ldr	r1, [sp, #4]
 800256c:	f7fe f8e8 	bl	8000740 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002570:	2001      	movs	r0, #1
    break;
 8002572:	e7ca      	b.n	800250a <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002574:	6850      	ldr	r0, [r2, #4]
 8002576:	b221      	sxth	r1, r4
 8002578:	f002 ffd0 	bl	800551c <PID_SetKP>
  bool retVal = true;
 800257c:	2001      	movs	r0, #1
    break;
 800257e:	e7c4      	b.n	800250a <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002580:	6850      	ldr	r0, [r2, #4]
 8002582:	b221      	sxth	r1, r4
 8002584:	f002 ffcc 	bl	8005520 <PID_SetKI>
  bool retVal = true;
 8002588:	2001      	movs	r0, #1
    break;
 800258a:	e7be      	b.n	800250a <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 800258c:	6850      	ldr	r0, [r2, #4]
 800258e:	b221      	sxth	r1, r4
 8002590:	f002 ffd6 	bl	8005540 <PID_SetKD>
  bool retVal = true;
 8002594:	2001      	movs	r0, #1
    break;
 8002596:	e7b8      	b.n	800250a <UI_SetReg+0xee>
      currComp = MCI_GetIqdref(pMCI);
 8002598:	4628      	mov	r0, r5
 800259a:	f7fe f989 	bl	80008b0 <MCI_GetIqdref>
 800259e:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 80025a0:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80025a4:	4628      	mov	r0, r5
 80025a6:	9901      	ldr	r1, [sp, #4]
 80025a8:	f7fe f8ca 	bl	8000740 <MCI_SetCurrentReferences>
  bool retVal = true;
 80025ac:	2001      	movs	r0, #1
    break;
 80025ae:	e7ac      	b.n	800250a <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80025b0:	6890      	ldr	r0, [r2, #8]
 80025b2:	b221      	sxth	r1, r4
 80025b4:	f002 ffb2 	bl	800551c <PID_SetKP>
  bool retVal = true;
 80025b8:	2001      	movs	r0, #1
    break;
 80025ba:	e7a6      	b.n	800250a <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80025bc:	6890      	ldr	r0, [r2, #8]
 80025be:	b221      	sxth	r1, r4
 80025c0:	f002 ffae 	bl	8005520 <PID_SetKI>
  bool retVal = true;
 80025c4:	2001      	movs	r0, #1
    break;
 80025c6:	e7a0      	b.n	800250a <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80025c8:	6890      	ldr	r0, [r2, #8]
 80025ca:	b221      	sxth	r1, r4
 80025cc:	f002 ffb8 	bl	8005540 <PID_SetKD>
  bool retVal = true;
 80025d0:	2001      	movs	r0, #1
    break;
 80025d2:	e79a      	b.n	800250a <UI_SetReg+0xee>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80025d4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80025d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025da:	0f19      	lsrs	r1, r3, #28
 80025dc:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025de:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025e2:	d07c      	beq.n	80026de <UI_SetReg+0x2c2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d15f      	bne.n	80026a8 <UI_SetReg+0x28c>
        pSPD = pMCT->pSpeedSensorAux;
 80025e8:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 80025ea:	2d00      	cmp	r5, #0
 80025ec:	d05c      	beq.n	80026a8 <UI_SetReg+0x28c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80025ee:	aa01      	add	r2, sp, #4
 80025f0:	f10d 0102 	add.w	r1, sp, #2
 80025f4:	4628      	mov	r0, r5
 80025f6:	f005 f995 	bl	8007924 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 80025fa:	b221      	sxth	r1, r4
 80025fc:	4628      	mov	r0, r5
 80025fe:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002602:	f005 f997 	bl	8007934 <STO_PLL_SetObserverGains>
 8002606:	e04f      	b.n	80026a8 <UI_SetReg+0x28c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002608:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800260a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800260e:	0f19      	lsrs	r1, r3, #28
 8002610:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002612:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002616:	d05a      	beq.n	80026ce <UI_SetReg+0x2b2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002618:	2b09      	cmp	r3, #9
 800261a:	d145      	bne.n	80026a8 <UI_SetReg+0x28c>
        pSPD = pMCT->pSpeedSensorAux;
 800261c:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 800261e:	2d00      	cmp	r5, #0
 8002620:	d042      	beq.n	80026a8 <UI_SetReg+0x28c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002622:	aa01      	add	r2, sp, #4
 8002624:	f10d 0102 	add.w	r1, sp, #2
 8002628:	4628      	mov	r0, r5
 800262a:	f005 f97b 	bl	8007924 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 800262e:	b222      	sxth	r2, r4
 8002630:	4628      	mov	r0, r5
 8002632:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002636:	f005 f97d 	bl	8007934 <STO_PLL_SetObserverGains>
 800263a:	e035      	b.n	80026a8 <UI_SetReg+0x28c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800263c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800263e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002642:	0f19      	lsrs	r1, r3, #28
 8002644:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002646:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800264a:	d03c      	beq.n	80026c6 <UI_SetReg+0x2aa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800264c:	2b09      	cmp	r3, #9
 800264e:	d12b      	bne.n	80026a8 <UI_SetReg+0x28c>
        pSPD = pMCT->pSpeedSensorAux;
 8002650:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002652:	b34d      	cbz	r5, 80026a8 <UI_SetReg+0x28c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002654:	aa01      	add	r2, sp, #4
 8002656:	f10d 0102 	add.w	r1, sp, #2
 800265a:	4628      	mov	r0, r5
 800265c:	f005 f96e 	bl	800793c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002660:	b222      	sxth	r2, r4
 8002662:	4628      	mov	r0, r5
 8002664:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002668:	f005 f976 	bl	8007958 <STO_SetPLLGains>
 800266c:	e01c      	b.n	80026a8 <UI_SetReg+0x28c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800266e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002670:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002674:	0f19      	lsrs	r1, r3, #28
 8002676:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002678:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800267c:	d02b      	beq.n	80026d6 <UI_SetReg+0x2ba>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800267e:	2b09      	cmp	r3, #9
 8002680:	d112      	bne.n	80026a8 <UI_SetReg+0x28c>
        pSPD = pMCT->pSpeedSensorAux;
 8002682:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002684:	b185      	cbz	r5, 80026a8 <UI_SetReg+0x28c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002686:	aa01      	add	r2, sp, #4
 8002688:	f10d 0102 	add.w	r1, sp, #2
 800268c:	4628      	mov	r0, r5
 800268e:	f005 f955 	bl	800793c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002692:	b221      	sxth	r1, r4
 8002694:	4628      	mov	r0, r5
 8002696:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800269a:	f005 f95d 	bl	8007958 <STO_SetPLLGains>
 800269e:	e003      	b.n	80026a8 <UI_SetReg+0x28c>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80026a0:	b221      	sxth	r1, r4
 80026a2:	4628      	mov	r0, r5
 80026a4:	f7fe f924 	bl	80008f0 <MCI_SetIdref>
  bool retVal = true;
 80026a8:	2001      	movs	r0, #1
}
 80026aa:	b003      	add	sp, #12
 80026ac:	bd30      	pop	{r4, r5, pc}
    retVal = false;
 80026ae:	2000      	movs	r0, #0
 80026b0:	e72b      	b.n	800250a <UI_SetReg+0xee>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7fe f918 	bl	80008e8 <MCI_GetTeref>
 80026b8:	4622      	mov	r2, r4
 80026ba:	4601      	mov	r1, r0
 80026bc:	4628      	mov	r0, r5
 80026be:	f7fe f833 	bl	8000728 <MCI_ExecTorqueRamp>
  bool retVal = true;
 80026c2:	2001      	movs	r0, #1
 80026c4:	e721      	b.n	800250a <UI_SetReg+0xee>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026c6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80026c8:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026ca:	d1c2      	bne.n	8002652 <UI_SetReg+0x236>
 80026cc:	e7c0      	b.n	8002650 <UI_SetReg+0x234>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026ce:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80026d0:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026d2:	d1a4      	bne.n	800261e <UI_SetReg+0x202>
 80026d4:	e7a2      	b.n	800261c <UI_SetReg+0x200>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026d6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80026d8:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026da:	d1d3      	bne.n	8002684 <UI_SetReg+0x268>
 80026dc:	e7d1      	b.n	8002682 <UI_SetReg+0x266>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026de:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80026e0:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026e2:	d182      	bne.n	80025ea <UI_SetReg+0x1ce>
 80026e4:	e780      	b.n	80025e8 <UI_SetReg+0x1cc>
 80026e6:	bf00      	nop
 80026e8:	2aaaaaab 	.word	0x2aaaaaab

080026ec <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80026ec:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80026ee:	6a03      	ldr	r3, [r0, #32]
 80026f0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  switch (bCmdID)
 80026f4:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80026f6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 80026fa:	290d      	cmp	r1, #13
 80026fc:	d82c      	bhi.n	8002758 <UI_ExecCmd+0x6c>
 80026fe:	e8df f001 	tbb	[pc, r1]
 8002702:	1217      	.short	0x1217
 8002704:	0e0c0c07 	.word	0x0e0c0c07
 8002708:	2b21261c 	.word	0x2b21261c
 800270c:	122b2b2b 	.word	0x122b2b2b
    }
    break;

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8002710:	4620      	mov	r0, r4
 8002712:	f7fe f875 	bl	8000800 <MCI_GetSTMState>
 8002716:	2806      	cmp	r0, #6
 8002718:	d020      	beq.n	800275c <UI_ExecCmd+0x70>
  bool retVal = true;
 800271a:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 800271c:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 800271e:	4620      	mov	r0, r4
 8002720:	f7fe f86e 	bl	8000800 <MCI_GetSTMState>
 8002724:	b120      	cbz	r0, 8002730 <UI_ExecCmd+0x44>
        MCI_StopMotor(pMCI);
 8002726:	4620      	mov	r0, r4
 8002728:	f7fe f822 	bl	8000770 <MCI_StopMotor>
  bool retVal = true;
 800272c:	2001      	movs	r0, #1
 800272e:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002730:	4620      	mov	r0, r4
 8002732:	f7fe f813 	bl	800075c <MCI_StartMotor>
  bool retVal = true;
 8002736:	2001      	movs	r0, #1
 8002738:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 800273a:	4620      	mov	r0, r4
 800273c:	f7fe f81c 	bl	8000778 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002740:	2001      	movs	r0, #1
    break;
 8002742:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002744:	4620      	mov	r0, r4
 8002746:	f7fe f8d7 	bl	80008f8 <MCI_Clear_Iqdref>
  bool retVal = true;
 800274a:	2001      	movs	r0, #1
    break;
 800274c:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 800274e:	4620      	mov	r0, r4
 8002750:	f7fe f816 	bl	8000780 <MCI_EncoderAlign>
  bool retVal = true;
 8002754:	2001      	movs	r0, #1
    break;
 8002756:	bd10      	pop	{r4, pc}
    retVal = false;
 8002758:	2000      	movs	r0, #0
 800275a:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 800275c:	4620      	mov	r0, r4
 800275e:	f7fe f87f 	bl	8000860 <MCI_StopRamp>
  bool retVal = true;
 8002762:	2001      	movs	r0, #1
 8002764:	bd10      	pop	{r4, pc}
 8002766:	bf00      	nop

08002768 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds. 
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002768:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800276c:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002770:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002772:	fb83 e301 	smull	lr, r3, r3, r1
 8002776:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800277a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800277e:	b209      	sxth	r1, r1
 8002780:	f7fd ffca 	bl	8000718 <MCI_ExecSpeedRamp>
  return true;
}
 8002784:	2001      	movs	r0, #1
 8002786:	bd10      	pop	{r4, pc}
 8002788:	2aaaaaab 	.word	0x2aaaaaab

0800278c <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 800278c:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800278e:	6a03      	ldr	r3, [r0, #32]
 8002790:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002794:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002798:	f7fd ffc6 	bl	8000728 <MCI_ExecTorqueRamp>
  return true;
}
 800279c:	2001      	movs	r0, #1
 800279e:	bd10      	pop	{r4, pc}

080027a0 <UI_GetRevupData>:
  *         
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80027a2:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80027a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80027a8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80027ac:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 80027ae:	b194      	cbz	r4, 80027d6 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80027b0:	4620      	mov	r0, r4
 80027b2:	461e      	mov	r6, r3
 80027b4:	4617      	mov	r7, r2
 80027b6:	460d      	mov	r5, r1
 80027b8:	f004 fdfc 	bl	80073b4 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80027bc:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80027be:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f004 fdfd 	bl	80073c0 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80027c6:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80027c8:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f004 fe00 	bl	80073d0 <RUC_GetPhaseFinalTorque>
 80027d0:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 80027d2:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80027d4:	8018      	strh	r0, [r3, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80027d6:	4620      	mov	r0, r4
 80027d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027da:	bf00      	nop

080027dc <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80027e0:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80027e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80027e6:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80027ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80027ee:	695c      	ldr	r4, [r3, #20]
{
 80027f0:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80027f2:	4620      	mov	r0, r4
 80027f4:	f004 fdcc 	bl	8007390 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80027f8:	463a      	mov	r2, r7
 80027fa:	4629      	mov	r1, r5
 80027fc:	4620      	mov	r0, r4
 80027fe:	f004 fdcd 	bl	800739c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002802:	4620      	mov	r0, r4
 8002804:	4632      	mov	r2, r6
 8002806:	4629      	mov	r1, r5
 8002808:	f004 fdce 	bl	80073a8 <RUC_SetPhaseFinalTorque>
  return true;
}
 800280c:	2001      	movs	r0, #1
 800280e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002810 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame. 
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002810:	b500      	push	{lr}
 8002812:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002814:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 8002816:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800281a:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
  currComp.d = hIdRef;
 800281e:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002822:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002826:	9901      	ldr	r1, [sp, #4]
 8002828:	f7fd ff8a 	bl	8000740 <MCI_SetCurrentReferences>
}
 800282c:	b003      	add	sp, #12
 800282e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002832:	bf00      	nop

08002834 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002834:	2000      	movs	r0, #0
 8002836:	4770      	bx	lr

08002838 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002838:	6943      	ldr	r3, [r0, #20]
 800283a:	b103      	cbz	r3, 800283e <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 800283c:	4718      	bx	r3
 800283e:	4770      	bx	lr

08002840 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8002840:	6983      	ldr	r3, [r0, #24]
 8002842:	b103      	cbz	r3, 8002846 <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 8002844:	4718      	bx	r3
 8002846:	4770      	bx	lr

08002848 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8002848:	6843      	ldr	r3, [r0, #4]
 800284a:	b103      	cbz	r3, 800284e <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 800284c:	4718      	bx	r3
 800284e:	4770      	bx	lr

08002850 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8002850:	6883      	ldr	r3, [r0, #8]
 8002852:	b103      	cbz	r3, 8002856 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002854:	4718      	bx	r3
  }
  return retVal;
}
 8002856:	2089      	movs	r0, #137	; 0x89
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop

0800285c <UI_GetReg>:
{
 800285c:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800285e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002860:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002864:	6a04      	ldr	r4, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002866:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800286a:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
{
 800286e:	b090      	sub	sp, #64	; 0x40
  if ( success != (bool *) 0 ) 
 8002870:	2a00      	cmp	r2, #0
 8002872:	f000 8091 	beq.w	8002998 <UI_GetReg+0x13c>
    *success = true;
 8002876:	2401      	movs	r4, #1
 8002878:	7014      	strb	r4, [r2, #0]
  switch (bRegID)
 800287a:	2981      	cmp	r1, #129	; 0x81
 800287c:	f200 8350 	bhi.w	8002f20 <UI_GetReg+0x6c4>
 8002880:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002884:	020b01d2 	.word	0x020b01d2
 8002888:	022b031c 	.word	0x022b031c
 800288c:	03200324 	.word	0x03200324
 8002890:	01ce019b 	.word	0x01ce019b
 8002894:	01ca0194 	.word	0x01ca0194
 8002898:	01c201c6 	.word	0x01c201c6
 800289c:	01bc0082 	.word	0x01bc0082
 80028a0:	01b401b8 	.word	0x01b401b8
 80028a4:	0217019f 	.word	0x0217019f
 80028a8:	034e034e 	.word	0x034e034e
 80028ac:	02330247 	.word	0x02330247
 80028b0:	034e034e 	.word	0x034e034e
 80028b4:	022f034e 	.word	0x022f034e
 80028b8:	020f0213 	.word	0x020f0213
 80028bc:	01fe0202 	.word	0x01fe0202
 80028c0:	0300026e 	.word	0x0300026e
 80028c4:	034e02fb 	.word	0x034e02fb
 80028c8:	02ef02f4 	.word	0x02ef02f4
 80028cc:	0305030a 	.word	0x0305030a
 80028d0:	03000206 	.word	0x03000206
 80028d4:	019402fb 	.word	0x019402fb
 80028d8:	028e0082 	.word	0x028e0082
 80028dc:	03140289 	.word	0x03140289
 80028e0:	034e030f 	.word	0x034e030f
 80028e4:	02ce034e 	.word	0x02ce034e
 80028e8:	025a02bb 	.word	0x025a02bb
 80028ec:	029302a7 	.word	0x029302a7
 80028f0:	034e033b 	.word	0x034e033b
 80028f4:	034e034e 	.word	0x034e034e
 80028f8:	034e034e 	.word	0x034e034e
 80028fc:	0334034e 	.word	0x0334034e
 8002900:	02e102e8 	.word	0x02e102e8
 8002904:	0082032d 	.word	0x0082032d
 8002908:	01ea0275 	.word	0x01ea0275
 800290c:	034e034e 	.word	0x034e034e
 8002910:	034e034e 	.word	0x034e034e
 8002914:	034e034e 	.word	0x034e034e
 8002918:	034e034e 	.word	0x034e034e
 800291c:	034e034e 	.word	0x034e034e
 8002920:	034e034e 	.word	0x034e034e
 8002924:	034e034e 	.word	0x034e034e
 8002928:	034e034e 	.word	0x034e034e
 800292c:	034e034e 	.word	0x034e034e
 8002930:	034e034e 	.word	0x034e034e
 8002934:	034e034e 	.word	0x034e034e
 8002938:	01dd034e 	.word	0x01dd034e
 800293c:	034e034e 	.word	0x034e034e
 8002940:	034e034e 	.word	0x034e034e
 8002944:	034e034e 	.word	0x034e034e
 8002948:	034e034e 	.word	0x034e034e
 800294c:	034e034e 	.word	0x034e034e
 8002950:	034e034e 	.word	0x034e034e
 8002954:	034e034e 	.word	0x034e034e
 8002958:	034e034e 	.word	0x034e034e
 800295c:	034e034e 	.word	0x034e034e
 8002960:	01d501d9 	.word	0x01d501d9
 8002964:	034e0199 	.word	0x034e0199
 8002968:	01c0032b 	.word	0x01c0032b
 800296c:	034e034e 	.word	0x034e034e
 8002970:	034e034e 	.word	0x034e034e
 8002974:	034e034e 	.word	0x034e034e
 8002978:	034e034e 	.word	0x034e034e
 800297c:	034e034e 	.word	0x034e034e
 8002980:	034e034e 	.word	0x034e034e
 8002984:	0088034e 	.word	0x0088034e
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002988:	4630      	mov	r0, r6
 800298a:	f7fd ff91 	bl	80008b0 <MCI_GetIqdref>
 800298e:	1400      	asrs	r0, r0, #16
}
 8002990:	b010      	add	sp, #64	; 0x40
 8002992:	bd70      	pop	{r4, r5, r6, pc}
  int32_t bRetVal = 0;
 8002994:	2000      	movs	r0, #0
 8002996:	e7fb      	b.n	8002990 <UI_GetReg+0x134>
  switch (bRegID)
 8002998:	2981      	cmp	r1, #129	; 0x81
 800299a:	d8fb      	bhi.n	8002994 <UI_GetReg+0x138>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <UI_GetReg+0x148>)
 800299e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	08002c29 	.word	0x08002c29
 80029a8:	08002c9b 	.word	0x08002c9b
 80029ac:	08002ebd 	.word	0x08002ebd
 80029b0:	08002cdb 	.word	0x08002cdb
 80029b4:	08002ecd 	.word	0x08002ecd
 80029b8:	08002ec5 	.word	0x08002ec5
 80029bc:	08002bbb 	.word	0x08002bbb
 80029c0:	08002c21 	.word	0x08002c21
 80029c4:	08002bad 	.word	0x08002bad
 80029c8:	08002c19 	.word	0x08002c19
 80029cc:	08002c11 	.word	0x08002c11
 80029d0:	08002c09 	.word	0x08002c09
 80029d4:	08002989 	.word	0x08002989
 80029d8:	08002bfd 	.word	0x08002bfd
 80029dc:	08002bf5 	.word	0x08002bf5
 80029e0:	08002bed 	.word	0x08002bed
 80029e4:	08002bc3 	.word	0x08002bc3
 80029e8:	08002cb3 	.word	0x08002cb3
 80029ec:	08002995 	.word	0x08002995
 80029f0:	08002995 	.word	0x08002995
 80029f4:	08002d13 	.word	0x08002d13
 80029f8:	08002ceb 	.word	0x08002ceb
 80029fc:	08002995 	.word	0x08002995
 8002a00:	08002995 	.word	0x08002995
 8002a04:	08002995 	.word	0x08002995
 8002a08:	08002ce3 	.word	0x08002ce3
 8002a0c:	08002cab 	.word	0x08002cab
 8002a10:	08002ca3 	.word	0x08002ca3
 8002a14:	08002c89 	.word	0x08002c89
 8002a18:	08002c81 	.word	0x08002c81
 8002a1c:	08002d61 	.word	0x08002d61
 8002a20:	08002e85 	.word	0x08002e85
 8002a24:	08002e7b 	.word	0x08002e7b
 8002a28:	08002995 	.word	0x08002995
 8002a2c:	08002e6d 	.word	0x08002e6d
 8002a30:	08002e63 	.word	0x08002e63
 8002a34:	08002e99 	.word	0x08002e99
 8002a38:	08002e8f 	.word	0x08002e8f
 8002a3c:	08002c91 	.word	0x08002c91
 8002a40:	08002e85 	.word	0x08002e85
 8002a44:	08002e7b 	.word	0x08002e7b
 8002a48:	08002bad 	.word	0x08002bad
 8002a4c:	08002989 	.word	0x08002989
 8002a50:	08002da1 	.word	0x08002da1
 8002a54:	08002d97 	.word	0x08002d97
 8002a58:	08002ead 	.word	0x08002ead
 8002a5c:	08002ea3 	.word	0x08002ea3
 8002a60:	08002995 	.word	0x08002995
 8002a64:	08002995 	.word	0x08002995
 8002a68:	08002e21 	.word	0x08002e21
 8002a6c:	08002dfb 	.word	0x08002dfb
 8002a70:	08002d39 	.word	0x08002d39
 8002a74:	08002dd3 	.word	0x08002dd3
 8002a78:	08002dab 	.word	0x08002dab
 8002a7c:	08002efb 	.word	0x08002efb
 8002a80:	08002995 	.word	0x08002995
 8002a84:	08002995 	.word	0x08002995
 8002a88:	08002995 	.word	0x08002995
 8002a8c:	08002995 	.word	0x08002995
 8002a90:	08002995 	.word	0x08002995
 8002a94:	08002995 	.word	0x08002995
 8002a98:	08002eed 	.word	0x08002eed
 8002a9c:	08002e55 	.word	0x08002e55
 8002aa0:	08002e47 	.word	0x08002e47
 8002aa4:	08002edf 	.word	0x08002edf
 8002aa8:	08002989 	.word	0x08002989
 8002aac:	08002d6f 	.word	0x08002d6f
 8002ab0:	08002c59 	.word	0x08002c59
 8002ab4:	08002995 	.word	0x08002995
 8002ab8:	08002995 	.word	0x08002995
 8002abc:	08002995 	.word	0x08002995
 8002ac0:	08002995 	.word	0x08002995
 8002ac4:	08002995 	.word	0x08002995
 8002ac8:	08002995 	.word	0x08002995
 8002acc:	08002995 	.word	0x08002995
 8002ad0:	08002995 	.word	0x08002995
 8002ad4:	08002995 	.word	0x08002995
 8002ad8:	08002995 	.word	0x08002995
 8002adc:	08002995 	.word	0x08002995
 8002ae0:	08002995 	.word	0x08002995
 8002ae4:	08002995 	.word	0x08002995
 8002ae8:	08002995 	.word	0x08002995
 8002aec:	08002995 	.word	0x08002995
 8002af0:	08002995 	.word	0x08002995
 8002af4:	08002995 	.word	0x08002995
 8002af8:	08002995 	.word	0x08002995
 8002afc:	08002995 	.word	0x08002995
 8002b00:	08002995 	.word	0x08002995
 8002b04:	08002995 	.word	0x08002995
 8002b08:	08002995 	.word	0x08002995
 8002b0c:	08002995 	.word	0x08002995
 8002b10:	08002c3f 	.word	0x08002c3f
 8002b14:	08002995 	.word	0x08002995
 8002b18:	08002995 	.word	0x08002995
 8002b1c:	08002995 	.word	0x08002995
 8002b20:	08002995 	.word	0x08002995
 8002b24:	08002995 	.word	0x08002995
 8002b28:	08002995 	.word	0x08002995
 8002b2c:	08002995 	.word	0x08002995
 8002b30:	08002995 	.word	0x08002995
 8002b34:	08002995 	.word	0x08002995
 8002b38:	08002995 	.word	0x08002995
 8002b3c:	08002995 	.word	0x08002995
 8002b40:	08002995 	.word	0x08002995
 8002b44:	08002995 	.word	0x08002995
 8002b48:	08002995 	.word	0x08002995
 8002b4c:	08002995 	.word	0x08002995
 8002b50:	08002995 	.word	0x08002995
 8002b54:	08002995 	.word	0x08002995
 8002b58:	08002995 	.word	0x08002995
 8002b5c:	08002c37 	.word	0x08002c37
 8002b60:	08002c2f 	.word	0x08002c2f
 8002b64:	08002bb7 	.word	0x08002bb7
 8002b68:	08002995 	.word	0x08002995
 8002b6c:	08002edb 	.word	0x08002edb
 8002b70:	08002c05 	.word	0x08002c05
 8002b74:	08002995 	.word	0x08002995
 8002b78:	08002995 	.word	0x08002995
 8002b7c:	08002995 	.word	0x08002995
 8002b80:	08002995 	.word	0x08002995
 8002b84:	08002995 	.word	0x08002995
 8002b88:	08002995 	.word	0x08002995
 8002b8c:	08002995 	.word	0x08002995
 8002b90:	08002995 	.word	0x08002995
 8002b94:	08002995 	.word	0x08002995
 8002b98:	08002995 	.word	0x08002995
 8002b9c:	08002995 	.word	0x08002995
 8002ba0:	08002995 	.word	0x08002995
 8002ba4:	08002995 	.word	0x08002995
 8002ba8:	08002995 	.word	0x08002995
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002bac:	4630      	mov	r0, r6
 8002bae:	f7fd fe7f 	bl	80008b0 <MCI_GetIqdref>
 8002bb2:	b200      	sxth	r0, r0
    break;
 8002bb4:	e6ec      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)(MC_UID);
 8002bb6:	48c0      	ldr	r0, [pc, #768]	; (8002eb8 <UI_GetReg+0x65c>)
  return bRetVal;
 8002bb8:	e6ea      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002bba:	6828      	ldr	r0, [r5, #0]
 8002bbc:	f002 fcb6 	bl	800552c <PID_GetKI>
    break;
 8002bc0:	e6e6      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002bc2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bc8:	0f1a      	lsrs	r2, r3, #28
 8002bca:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bcc:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bd0:	f000 81df 	beq.w	8002f92 <UI_GetReg+0x736>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	f040 8099 	bne.w	8002d0c <UI_GetReg+0x4b0>
        pSPD = pMCT->pSpeedSensorAux;
 8002bda:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	f000 8095 	beq.w	8002d0c <UI_GetReg+0x4b0>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002be2:	aa0f      	add	r2, sp, #60	; 0x3c
 8002be4:	a90e      	add	r1, sp, #56	; 0x38
 8002be6:	f004 fe9d 	bl	8007924 <STO_PLL_GetObserverGains>
 8002bea:	e08f      	b.n	8002d0c <UI_GetReg+0x4b0>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8002bec:	68a8      	ldr	r0, [r5, #8]
 8002bee:	f002 fca9 	bl	8005544 <PID_GetKD>
    break;
 8002bf2:	e6cd      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002bf4:	68a8      	ldr	r0, [r5, #8]
 8002bf6:	f002 fc99 	bl	800552c <PID_GetKI>
    break;
 8002bfa:	e6c9      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002bfc:	68a8      	ldr	r0, [r5, #8]
 8002bfe:	f002 fc91 	bl	8005524 <PID_GetKP>
    break;
 8002c02:	e6c5      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = PWBDID;
 8002c04:	2002      	movs	r0, #2
    break;
 8002c06:	e6c3      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002c08:	6868      	ldr	r0, [r5, #4]
 8002c0a:	f002 fc9b 	bl	8005544 <PID_GetKD>
    break;
 8002c0e:	e6bf      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002c10:	6868      	ldr	r0, [r5, #4]
 8002c12:	f002 fc8b 	bl	800552c <PID_GetKI>
    break;
 8002c16:	e6bb      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002c18:	6868      	ldr	r0, [r5, #4]
 8002c1a:	f002 fc83 	bl	8005524 <PID_GetKP>
    break;
 8002c1e:	e6b7      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002c20:	6828      	ldr	r0, [r5, #0]
 8002c22:	f002 fc8f 	bl	8005544 <PID_GetKD>
    break;
 8002c26:	e6b3      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002c28:	f7ff fbf4 	bl	8002414 <UI_GetSelectedMC>
    break;
 8002c2c:	e6b0      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002c2e:	6828      	ldr	r0, [r5, #0]
 8002c30:	f002 fc84 	bl	800553c <PID_GetKIDivisor>
    break;
 8002c34:	e6ac      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002c36:	6828      	ldr	r0, [r5, #0]
 8002c38:	f002 fc7e 	bl	8005538 <PID_GetKPDivisor>
    break;
 8002c3c:	e6a8      	b.n	8002990 <UI_GetReg+0x134>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002c3e:	4630      	mov	r0, r6
 8002c40:	f7fd fde2 	bl	8000808 <MCI_GetControlMode>
 8002c44:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002c46:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002c48:	f000 81a8 	beq.w	8002f9c <UI_GetReg+0x740>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002c4c:	f7fd fe14 	bl	8000878 <MCI_GetMecSpeedRefUnit>
 8002c50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c54:	0040      	lsls	r0, r0, #1
 8002c56:	e69b      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002c58:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c5e:	0f1a      	lsrs	r2, r3, #28
 8002c60:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c62:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c66:	f000 816d 	beq.w	8002f44 <UI_GetReg+0x6e8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c6a:	2b09      	cmp	r3, #9
 8002c6c:	f47f ae92 	bne.w	8002994 <UI_GetReg+0x138>
        pSPD = pMCT->pSpeedSensorAux;
 8002c70:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002c72:	2800      	cmp	r0, #0
 8002c74:	f43f ae8e 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002c78:	f004 fe8a 	bl	8007990 <STO_PLL_GetObservedBemfLevel>
 8002c7c:	1400      	asrs	r0, r0, #16
 8002c7e:	e687      	b.n	8002990 <UI_GetReg+0x134>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8002c80:	2101      	movs	r1, #1
 8002c82:	f7ff fde5 	bl	8002850 <UI_GetDAC>
    break;
 8002c86:	e683      	b.n	8002990 <UI_GetReg+0x134>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8002c88:	2100      	movs	r1, #0
 8002c8a:	f7ff fde1 	bl	8002850 <UI_GetDAC>
    break;
 8002c8e:	e67f      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002c90:	4630      	mov	r0, r6
 8002c92:	f7fd fdfd 	bl	8000890 <MCI_GetIalphabeta>
 8002c96:	1400      	asrs	r0, r0, #16
    break;
 8002c98:	e67a      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002c9a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002c9c:	f003 ff64 	bl	8006b68 <STM_GetFaultState>
	break;
 8002ca0:	e676      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002ca2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8002ca4:	f002 fbd6 	bl	8005454 <MPM_GetAvrgElMotorPowerW>
    break;
 8002ca8:	e672      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002caa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002cac:	f002 fc18 	bl	80054e0 <NTC_GetAvTemp_C>
    break;
 8002cb0:	e66e      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002cb2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cb8:	0f1a      	lsrs	r2, r3, #28
 8002cba:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cbc:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cc0:	f000 8136 	beq.w	8002f30 <UI_GetReg+0x6d4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cc4:	2b09      	cmp	r3, #9
 8002cc6:	d105      	bne.n	8002cd4 <UI_GetReg+0x478>
        pSPD = pMCT->pSpeedSensorAux;
 8002cc8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002cca:	b118      	cbz	r0, 8002cd4 <UI_GetReg+0x478>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002ccc:	aa0f      	add	r2, sp, #60	; 0x3c
 8002cce:	a90e      	add	r1, sp, #56	; 0x38
 8002cd0:	f004 fe28 	bl	8007924 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hIgain;
 8002cd4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 8002cd8:	e65a      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002cda:	4630      	mov	r0, r6
 8002cdc:	f7fd fd94 	bl	8000808 <MCI_GetControlMode>
    break;
 8002ce0:	e656      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002ce2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002ce4:	f002 fb0c 	bl	8005300 <VBS_GetAvBusVoltage_V>
    break;
 8002ce8:	e652      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002cea:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cf0:	0f1a      	lsrs	r2, r3, #28
 8002cf2:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cf4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cf8:	f000 811f 	beq.w	8002f3a <UI_GetReg+0x6de>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cfc:	2b09      	cmp	r3, #9
 8002cfe:	d105      	bne.n	8002d0c <UI_GetReg+0x4b0>
        pSPD = pMCT->pSpeedSensorAux;
 8002d00:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002d02:	b118      	cbz	r0, 8002d0c <UI_GetReg+0x4b0>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002d04:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d06:	a90e      	add	r1, sp, #56	; 0x38
 8002d08:	f004 fe18 	bl	800793c <STO_GetPLLGains>
      bRetVal = (int32_t)hPgain;
 8002d0c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 8002d10:	e63e      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002d12:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d18:	0f1a      	lsrs	r2, r3, #28
 8002d1a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d1c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d20:	f000 812d 	beq.w	8002f7e <UI_GetReg+0x722>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d24:	2b09      	cmp	r3, #9
 8002d26:	d1d5      	bne.n	8002cd4 <UI_GetReg+0x478>
        pSPD = pMCT->pSpeedSensorAux;
 8002d28:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	d0d2      	beq.n	8002cd4 <UI_GetReg+0x478>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002d2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d30:	a90e      	add	r1, sp, #56	; 0x38
 8002d32:	f004 fe03 	bl	800793c <STO_GetPLLGains>
 8002d36:	e7cd      	b.n	8002cd4 <UI_GetReg+0x478>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002d38:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d3e:	0f1a      	lsrs	r2, r3, #28
 8002d40:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d42:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d46:	f000 810b 	beq.w	8002f60 <UI_GetReg+0x704>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d4a:	2b09      	cmp	r3, #9
 8002d4c:	f47f ae22 	bne.w	8002994 <UI_GetReg+0x138>
        pSPD = pMCT->pSpeedSensorAux;
 8002d50:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002d52:	2800      	cmp	r0, #0
 8002d54:	f43f ae1e 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8002d58:	f004 fdd0 	bl	80078fc <STO_PLL_GetEstimatedCurrent>
 8002d5c:	b200      	sxth	r0, r0
 8002d5e:	e617      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002d60:	4630      	mov	r0, r6
 8002d62:	f7fd fd81 	bl	8000868 <MCI_GetAvrgMecSpeedUnit>
 8002d66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002d6a:	0040      	lsls	r0, r0, #1
    break;
 8002d6c:	e610      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002d6e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d74:	0f1a      	lsrs	r2, r3, #28
 8002d76:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d78:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d7c:	f000 80e7 	beq.w	8002f4e <UI_GetReg+0x6f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002d80:	2b09      	cmp	r3, #9
 8002d82:	f47f ae07 	bne.w	8002994 <UI_GetReg+0x138>
        pSPD = pMCT->pSpeedSensorAux;
 8002d86:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	f43f ae03 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002d8e:	f004 fdfb 	bl	8007988 <STO_PLL_GetEstimatedBemfLevel>
 8002d92:	1400      	asrs	r0, r0, #16
 8002d94:	e5fc      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002d96:	4630      	mov	r0, r6
 8002d98:	f7fd fd92 	bl	80008c0 <MCI_GetVqd>
 8002d9c:	1400      	asrs	r0, r0, #16
    break;
 8002d9e:	e5f7      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002da0:	4630      	mov	r0, r6
 8002da2:	f7fd fd8d 	bl	80008c0 <MCI_GetVqd>
 8002da6:	b200      	sxth	r0, r0
    break;
 8002da8:	e5f2      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002daa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002db0:	0f1a      	lsrs	r2, r3, #28
 8002db2:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002db4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002db8:	f000 80dc 	beq.w	8002f74 <UI_GetReg+0x718>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002dbc:	2b09      	cmp	r3, #9
 8002dbe:	f47f ade9 	bne.w	8002994 <UI_GetReg+0x138>
        pSPD =  pMCT->pSpeedSensorAux;
 8002dc2:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f43f ade5 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8002dca:	f004 fd8b 	bl	80078e4 <STO_PLL_GetEstimatedBemf>
 8002dce:	b200      	sxth	r0, r0
 8002dd0:	e5de      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002dd2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002dd8:	0f1a      	lsrs	r2, r3, #28
 8002dda:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ddc:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002de0:	f000 80a1 	beq.w	8002f26 <UI_GetReg+0x6ca>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002de4:	2b09      	cmp	r3, #9
 8002de6:	f47f add5 	bne.w	8002994 <UI_GetReg+0x138>
        pSPD = pMCT->pSpeedSensorAux;
 8002dea:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002dec:	2800      	cmp	r0, #0
 8002dee:	f43f add1 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8002df2:	f004 fd83 	bl	80078fc <STO_PLL_GetEstimatedCurrent>
 8002df6:	1400      	asrs	r0, r0, #16
 8002df8:	e5ca      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002dfa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e00:	0f1a      	lsrs	r2, r3, #28
 8002e02:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e04:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e08:	f000 80be 	beq.w	8002f88 <UI_GetReg+0x72c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	f47f adc1 	bne.w	8002994 <UI_GetReg+0x138>
        pSPD = pMCT->pSpeedSensorAux;
 8002e12:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002e14:	2800      	cmp	r0, #0
 8002e16:	f43f adbd 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002e1a:	f003 fd23 	bl	8006864 <SPD_GetS16Speed>
 8002e1e:	e5b7      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e20:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e26:	0f1a      	lsrs	r2, r3, #28
 8002e28:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e2a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e2e:	f000 809c 	beq.w	8002f6a <UI_GetReg+0x70e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	f47f adae 	bne.w	8002994 <UI_GetReg+0x138>
        pSPD = pMCT->pSpeedSensorAux;
 8002e38:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	f43f adaa 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = SPD_GetElAngle(pSPD);
 8002e40:	f003 fcd8 	bl	80067f4 <SPD_GetElAngle>
 8002e44:	e5a4      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002e46:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002e48:	f003 fdd0 	bl	80069ec <STC_GetMaxAppPositiveMecSpeedUnit>
 8002e4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002e50:	0040      	lsls	r0, r0, #1
    break;
 8002e52:	e59d      	b.n	8002990 <UI_GetReg+0x134>
      if (pHandle->pFctDACGetUserChannelValue)
 8002e54:	6903      	ldr	r3, [r0, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f43f ad9c 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4798      	blx	r3
 8002e60:	e596      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetIab(pMCI).a;
 8002e62:	4630      	mov	r0, r6
 8002e64:	f7fd fd0c 	bl	8000880 <MCI_GetIab>
 8002e68:	b200      	sxth	r0, r0
    break;
 8002e6a:	e591      	b.n	8002990 <UI_GetReg+0x134>
      if (pMCT->pRevupCtrl)
 8002e6c:	6968      	ldr	r0, [r5, #20]
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	f43f ad90 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002e74:	f004 fab4 	bl	80073e0 <RUC_GetNumberOfPhases>
 8002e78:	e58a      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	f7fd fd10 	bl	80008a0 <MCI_GetIqd>
 8002e80:	1400      	asrs	r0, r0, #16
    break;
 8002e82:	e585      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetIqd(pMCI).q;
 8002e84:	4630      	mov	r0, r6
 8002e86:	f7fd fd0b 	bl	80008a0 <MCI_GetIqd>
 8002e8a:	b200      	sxth	r0, r0
    break;
 8002e8c:	e580      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002e8e:	4630      	mov	r0, r6
 8002e90:	f7fd fcfe 	bl	8000890 <MCI_GetIalphabeta>
 8002e94:	b200      	sxth	r0, r0
    break;
 8002e96:	e57b      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetIab(pMCI).b;
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f7fd fcf1 	bl	8000880 <MCI_GetIab>
 8002e9e:	1400      	asrs	r0, r0, #16
    break;
 8002ea0:	e576      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f7fd fd16 	bl	80008d4 <MCI_GetValphabeta>
 8002ea8:	1400      	asrs	r0, r0, #16
    break;
 8002eaa:	e571      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002eac:	4630      	mov	r0, r6
 8002eae:	f7fd fd11 	bl	80008d4 <MCI_GetValphabeta>
 8002eb2:	b200      	sxth	r0, r0
    break;
 8002eb4:	e56c      	b.n	8002990 <UI_GetReg+0x134>
 8002eb6:	bf00      	nop
 8002eb8:	34a6847a 	.word	0x34a6847a
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002ebc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002ebe:	f003 fe45 	bl	8006b4c <STM_GetState>
	break;
 8002ec2:	e565      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002ec4:	6828      	ldr	r0, [r5, #0]
 8002ec6:	f002 fb2d 	bl	8005524 <PID_GetKP>
    break;
 8002eca:	e561      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f7fd fcd3 	bl	8000878 <MCI_GetMecSpeedRefUnit>
 8002ed2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ed6:	0040      	lsls	r0, r0, #1
    break;
 8002ed8:	e55a      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = CTRBDID;
 8002eda:	2001      	movs	r0, #1
    break;
 8002edc:	e558      	b.n	8002990 <UI_GetReg+0x134>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002ede:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002ee0:	f003 fd86 	bl	80069f0 <STC_GetMinAppNegativeMecSpeedUnit>
 8002ee4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ee8:	0040      	lsls	r0, r0, #1
    break;
 8002eea:	e551      	b.n	8002990 <UI_GetReg+0x134>
      if (pHandle->pFctDACGetUserChannelValue)
 8002eec:	6903      	ldr	r3, [r0, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f43f ad50 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4798      	blx	r3
 8002ef8:	e54a      	b.n	8002990 <UI_GetReg+0x134>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002efa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f00:	0f1a      	lsrs	r2, r3, #28
 8002f02:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f04:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f08:	d026      	beq.n	8002f58 <UI_GetReg+0x6fc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f0a:	2b09      	cmp	r3, #9
 8002f0c:	f47f ad42 	bne.w	8002994 <UI_GetReg+0x138>
        pSPD = pMCT->pSpeedSensorAux;
 8002f10:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002f12:	2800      	cmp	r0, #0
 8002f14:	f43f ad3e 	beq.w	8002994 <UI_GetReg+0x138>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8002f18:	f004 fce4 	bl	80078e4 <STO_PLL_GetEstimatedBemf>
 8002f1c:	1400      	asrs	r0, r0, #16
 8002f1e:	e537      	b.n	8002990 <UI_GetReg+0x134>
        *success = false;
 8002f20:	2000      	movs	r0, #0
 8002f22:	7010      	strb	r0, [r2, #0]
 8002f24:	e534      	b.n	8002990 <UI_GetReg+0x134>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f26:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f28:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f2a:	f47f af5f 	bne.w	8002dec <UI_GetReg+0x590>
 8002f2e:	e75c      	b.n	8002dea <UI_GetReg+0x58e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f30:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f32:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f34:	f47f aec9 	bne.w	8002cca <UI_GetReg+0x46e>
 8002f38:	e6c6      	b.n	8002cc8 <UI_GetReg+0x46c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f3a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f3c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f3e:	f47f aee0 	bne.w	8002d02 <UI_GetReg+0x4a6>
 8002f42:	e6dd      	b.n	8002d00 <UI_GetReg+0x4a4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f44:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f46:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f48:	f47f ae93 	bne.w	8002c72 <UI_GetReg+0x416>
 8002f4c:	e690      	b.n	8002c70 <UI_GetReg+0x414>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f4e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f50:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f52:	f47f af19 	bne.w	8002d88 <UI_GetReg+0x52c>
 8002f56:	e716      	b.n	8002d86 <UI_GetReg+0x52a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f58:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 8002f5a:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f5c:	d1d9      	bne.n	8002f12 <UI_GetReg+0x6b6>
 8002f5e:	e7d7      	b.n	8002f10 <UI_GetReg+0x6b4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f60:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f62:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f64:	f47f aef5 	bne.w	8002d52 <UI_GetReg+0x4f6>
 8002f68:	e6f2      	b.n	8002d50 <UI_GetReg+0x4f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f6a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f6c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f6e:	f47f af64 	bne.w	8002e3a <UI_GetReg+0x5de>
 8002f72:	e761      	b.n	8002e38 <UI_GetReg+0x5dc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f74:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f76:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f78:	f47f af24 	bne.w	8002dc4 <UI_GetReg+0x568>
 8002f7c:	e721      	b.n	8002dc2 <UI_GetReg+0x566>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f7e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f80:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f82:	f47f aed2 	bne.w	8002d2a <UI_GetReg+0x4ce>
 8002f86:	e6cf      	b.n	8002d28 <UI_GetReg+0x4cc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f88:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f8a:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f8c:	f47f af42 	bne.w	8002e14 <UI_GetReg+0x5b8>
 8002f90:	e73f      	b.n	8002e12 <UI_GetReg+0x5b6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f92:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f94:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f96:	f47f ae21 	bne.w	8002bdc <UI_GetReg+0x380>
 8002f9a:	e61e      	b.n	8002bda <UI_GetReg+0x37e>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002f9c:	f7fd fc58 	bl	8000850 <MCI_GetLastRampFinalSpeed>
 8002fa0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fa4:	0040      	lsls	r0, r0, #1
 8002fa6:	e4f3      	b.n	8002990 <UI_GetReg+0x134>

08002fa8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <SystemInit+0x18>)
 8002faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fb2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fba:	6099      	str	r1, [r3, #8]
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <HAL_InitTick+0x3c>)
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_InitTick+0x40>)
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
{
 8002fce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fd4:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fd8:	fbb3 f0f0 	udiv	r0, r3, r0
 8002fdc:	f000 fd36 	bl	8003a4c <HAL_SYSTICK_Config>
 8002fe0:	b908      	cbnz	r0, 8002fe6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe2:	2d0f      	cmp	r5, #15
 8002fe4:	d901      	bls.n	8002fea <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002fe6:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8002fe8:	bd38      	pop	{r3, r4, r5, pc}
 8002fea:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fec:	4602      	mov	r2, r0
 8002fee:	4629      	mov	r1, r5
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f000 fce6 	bl	80039c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_InitTick+0x44>)
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	601d      	str	r5, [r3, #0]
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	20000700 	.word	0x20000700
 8003004:	200006fc 	.word	0x200006fc
 8003008:	20000704 	.word	0x20000704

0800300c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300c:	4a07      	ldr	r2, [pc, #28]	; (800302c <HAL_Init+0x20>)
{
 800300e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003010:	6813      	ldr	r3, [r2, #0]
 8003012:	f043 0310 	orr.w	r3, r3, #16
 8003016:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003018:	2003      	movs	r0, #3
 800301a:	f000 fcc1 	bl	80039a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800301e:	2004      	movs	r0, #4
 8003020:	f7ff ffd0 	bl	8002fc4 <HAL_InitTick>
  HAL_MspInit();
 8003024:	f7fe ffac 	bl	8001f80 <HAL_MspInit>
}
 8003028:	2000      	movs	r0, #0
 800302a:	bd08      	pop	{r3, pc}
 800302c:	40022000 	.word	0x40022000

08003030 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003030:	4a03      	ldr	r2, [pc, #12]	; (8003040 <HAL_IncTick+0x10>)
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_IncTick+0x14>)
 8003034:	6811      	ldr	r1, [r2, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	440b      	add	r3, r1
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000ac8 	.word	0x20000ac8
 8003044:	20000700 	.word	0x20000700

08003048 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8003048:	4b01      	ldr	r3, [pc, #4]	; (8003050 <HAL_GetTick+0x8>)
 800304a:	6818      	ldr	r0, [r3, #0]
}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000ac8 	.word	0x20000ac8

08003054 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff fff6 	bl	8003048 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800305c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800305e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003060:	d002      	beq.n	8003068 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <HAL_Delay+0x20>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003068:	f7ff ffee 	bl	8003048 <HAL_GetTick>
 800306c:	1b40      	subs	r0, r0, r5
 800306e:	4284      	cmp	r4, r0
 8003070:	d8fa      	bhi.n	8003068 <HAL_Delay+0x14>
  {
  }
}
 8003072:	bd38      	pop	{r3, r4, r5, pc}
 8003074:	20000700 	.word	0x20000700

08003078 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003080:	2800      	cmp	r0, #0
 8003082:	f000 808f 	beq.w	80031a4 <HAL_ADC_Init+0x12c>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003086:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003088:	f013 0310 	ands.w	r3, r3, #16
 800308c:	4604      	mov	r4, r0
 800308e:	d116      	bne.n	80030be <HAL_ADC_Init+0x46>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003090:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003092:	2d00      	cmp	r5, #0
 8003094:	d079      	beq.n	800318a <HAL_ADC_Init+0x112>
 8003096:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003098:	6891      	ldr	r1, [r2, #8]
 800309a:	00c9      	lsls	r1, r1, #3
 800309c:	d569      	bpl.n	8003172 <HAL_ADC_Init+0xfa>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800309e:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80030a0:	008f      	lsls	r7, r1, #2
 80030a2:	d466      	bmi.n	8003172 <HAL_ADC_Init+0xfa>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80030a6:	06ce      	lsls	r6, r1, #27
 80030a8:	d400      	bmi.n	80030ac <HAL_ADC_Init+0x34>
 80030aa:	b163      	cbz	r3, 80030c6 <HAL_ADC_Init+0x4e>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80030ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030ae:	f023 0312 	bic.w	r3, r3, #18
 80030b2:	f043 0310 	orr.w	r3, r3, #16
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80030b6:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80030b8:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  
  /* Return function status */
  return tmp_hal_status;
}
 80030ba:	b003      	add	sp, #12
 80030bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80030c0:	06db      	lsls	r3, r3, #27
 80030c2:	d4f3      	bmi.n	80030ac <HAL_ADC_Init+0x34>
 80030c4:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030c6:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80030c8:	f010 0004 	ands.w	r0, r0, #4
 80030cc:	d1ee      	bne.n	80030ac <HAL_ADC_Init+0x34>
    ADC_STATE_CLR_SET(hadc->State,
 80030ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80030d0:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80030d4:	f041 0102 	orr.w	r1, r1, #2
 80030d8:	6421      	str	r1, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80030da:	6893      	ldr	r3, [r2, #8]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	f000 809f 	beq.w	8003224 <HAL_ADC_Init+0x1ac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80030e6:	496f      	ldr	r1, [pc, #444]	; (80032a4 <HAL_ADC_Init+0x22c>)
 80030e8:	6865      	ldr	r5, [r4, #4]
 80030ea:	688b      	ldr	r3, [r1, #8]
 80030ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80030f0:	432b      	orrs	r3, r5
 80030f2:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80030f4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80030f6:	68e1      	ldr	r1, [r4, #12]
 80030f8:	68a3      	ldr	r3, [r4, #8]
 80030fa:	7e65      	ldrb	r5, [r4, #25]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030fc:	f894 6020 	ldrb.w	r6, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003100:	2f01      	cmp	r7, #1
 8003102:	ea43 0301 	orr.w	r3, r3, r1
 8003106:	bf18      	it	ne
 8003108:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800310c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003110:	2e01      	cmp	r6, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003112:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003116:	d07d      	beq.n	8003214 <HAL_ADC_Init+0x19c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003118:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800311a:	2901      	cmp	r1, #1
 800311c:	d002      	beq.n	8003124 <HAL_ADC_Init+0xac>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800311e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003120:	4301      	orrs	r1, r0
 8003122:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003124:	6891      	ldr	r1, [r2, #8]
 8003126:	f011 0f0c 	tst.w	r1, #12
 800312a:	d10c      	bne.n	8003146 <HAL_ADC_Init+0xce>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800312c:	68d0      	ldr	r0, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800312e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8003132:	7e25      	ldrb	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003134:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003138:	0049      	lsls	r1, r1, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800313a:	f020 0002 	bic.w	r0, r0, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800313e:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003142:	60d0      	str	r0, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003144:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8003146:	68d5      	ldr	r5, [r2, #12]
 8003148:	4957      	ldr	r1, [pc, #348]	; (80032a8 <HAL_ADC_Init+0x230>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800314a:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800314c:	4029      	ands	r1, r5
 800314e:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003150:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8003152:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003154:	d056      	beq.n	8003204 <HAL_ADC_Init+0x18c>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003156:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003158:	f023 030f 	bic.w	r3, r3, #15
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800315e:	2000      	movs	r0, #0
 8003160:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003164:	f023 0303 	bic.w	r3, r3, #3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800316e:	b003      	add	sp, #12
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8003172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003174:	f023 0312 	bic.w	r3, r3, #18
 8003178:	f043 0310 	orr.w	r3, r3, #16
 800317c:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003188:	e790      	b.n	80030ac <HAL_ADC_Init+0x34>
      ADC_CLEAR_ERRORCODE(hadc);
 800318a:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 800318c:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800318e:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 8003190:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8003194:	f7fe ff12 	bl	8001fbc <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003198:	6822      	ldr	r2, [r4, #0]
 800319a:	6893      	ldr	r3, [r2, #8]
 800319c:	00de      	lsls	r6, r3, #3
 800319e:	d504      	bpl.n	80031aa <HAL_ADC_Init+0x132>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e779      	b.n	8003098 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 80031a4:	2001      	movs	r0, #1
}
 80031a6:	b003      	add	sp, #12
 80031a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80031aa:	6893      	ldr	r3, [r2, #8]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d047      	beq.n	8003244 <HAL_ADC_Init+0x1cc>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b6:	06d8      	lsls	r0, r3, #27
 80031b8:	d4f2      	bmi.n	80031a0 <HAL_ADC_Init+0x128>
          ADC_STATE_CLR_SET(hadc->State,
 80031ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031bc:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_ADC_Init+0x234>)
 80031be:	483c      	ldr	r0, [pc, #240]	; (80032b0 <HAL_ADC_Init+0x238>)
 80031c0:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80031c2:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80031c6:	f021 0102 	bic.w	r1, r1, #2
 80031ca:	f041 0102 	orr.w	r1, r1, #2
 80031ce:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80031d0:	6891      	ldr	r1, [r2, #8]
 80031d2:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80031d6:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031d8:	fba0 1303 	umull	r1, r3, r0, r3
 80031dc:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80031de:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031e4:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80031e6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80031ea:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031ec:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80031ee:	9b01      	ldr	r3, [sp, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f43f af51 	beq.w	8003098 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 80031f6:	9b01      	ldr	r3, [sp, #4]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80031fc:	9b01      	ldr	r3, [sp, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f9      	bne.n	80031f6 <HAL_ADC_Init+0x17e>
 8003202:	e749      	b.n	8003098 <HAL_ADC_Init+0x20>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003204:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003206:	69e3      	ldr	r3, [r4, #28]
 8003208:	f021 010f 	bic.w	r1, r1, #15
 800320c:	3b01      	subs	r3, #1
 800320e:	430b      	orrs	r3, r1
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	e7a4      	b.n	800315e <HAL_ADC_Init+0xe6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003214:	b95d      	cbnz	r5, 800322e <HAL_ADC_Init+0x1b6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003216:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003218:	3901      	subs	r1, #1
 800321a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800321e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003222:	e779      	b.n	8003118 <HAL_ADC_Init+0xa0>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	07dd      	lsls	r5, r3, #31
 8003228:	f57f af5d 	bpl.w	80030e6 <HAL_ADC_Init+0x6e>
 800322c:	e762      	b.n	80030f4 <HAL_ADC_Init+0x7c>
        ADC_STATE_CLR_SET(hadc->State,
 800322e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003230:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8003234:	f041 0120 	orr.w	r1, r1, #32
 8003238:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800323c:	f041 0101 	orr.w	r1, r1, #1
 8003240:	6461      	str	r1, [r4, #68]	; 0x44
 8003242:	e769      	b.n	8003118 <HAL_ADC_Init+0xa0>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003244:	6813      	ldr	r3, [r2, #0]
 8003246:	07dd      	lsls	r5, r3, #31
 8003248:	d5b4      	bpl.n	80031b4 <HAL_ADC_Init+0x13c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800324a:	6893      	ldr	r3, [r2, #8]
 800324c:	f003 030d 	and.w	r3, r3, #13
 8003250:	2b01      	cmp	r3, #1
 8003252:	d00a      	beq.n	800326a <HAL_ADC_Init+0x1f2>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003254:	6c23      	ldr	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	f043 0310 	orr.w	r3, r3, #16
 800325a:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003264:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003266:	2301      	movs	r3, #1
 8003268:	e716      	b.n	8003098 <HAL_ADC_Init+0x20>
      __HAL_ADC_DISABLE(hadc);
 800326a:	6893      	ldr	r3, [r2, #8]
 800326c:	2103      	movs	r1, #3
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	6093      	str	r3, [r2, #8]
 8003274:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8003276:	f7ff fee7 	bl	8003048 <HAL_GetTick>
 800327a:	4605      	mov	r5, r0
 800327c:	e004      	b.n	8003288 <HAL_ADC_Init+0x210>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800327e:	f7ff fee3 	bl	8003048 <HAL_GetTick>
 8003282:	1b40      	subs	r0, r0, r5
 8003284:	2802      	cmp	r0, #2
 8003286:	d809      	bhi.n	800329c <HAL_ADC_Init+0x224>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	6893      	ldr	r3, [r2, #8]
 800328c:	f013 0301 	ands.w	r3, r3, #1
 8003290:	d1f5      	bne.n	800327e <HAL_ADC_Init+0x206>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003292:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003294:	06c9      	lsls	r1, r1, #27
 8003296:	f53f aeff 	bmi.w	8003098 <HAL_ADC_Init+0x20>
 800329a:	e78e      	b.n	80031ba <HAL_ADC_Init+0x142>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	e7d9      	b.n	8003256 <HAL_ADC_Init+0x1de>
 80032a2:	bf00      	nop
 80032a4:	50000300 	.word	0x50000300
 80032a8:	fff0c007 	.word	0xfff0c007
 80032ac:	200006fc 	.word	0x200006fc
 80032b0:	431bde83 	.word	0x431bde83

080032b4 <HAL_ADC_ConfigChannel>:
{
 80032b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b6:	4603      	mov	r3, r0
 80032b8:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 80032ba:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
  __IO uint32_t wait_loop_index = 0U;
 80032be:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 80032c0:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 80032c2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80032c4:	d047      	beq.n	8003356 <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032c6:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032c8:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032ca:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 80032cc:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032ce:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 80032d0:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032d4:	d508      	bpl.n	80032e8 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d8:	f042 0220 	orr.w	r2, r2, #32
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80032e4:	b003      	add	sp, #12
 80032e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 80032e8:	6848      	ldr	r0, [r1, #4]
 80032ea:	2804      	cmp	r0, #4
 80032ec:	d936      	bls.n	800335c <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 80032ee:	2809      	cmp	r0, #9
 80032f0:	d870      	bhi.n	80033d4 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->SQR2,
 80032f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80032f6:	0040      	lsls	r0, r0, #1
 80032f8:	381e      	subs	r0, #30
 80032fa:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80032fc:	680d      	ldr	r5, [r1, #0]
 80032fe:	271f      	movs	r7, #31
 8003300:	4087      	lsls	r7, r0
 8003302:	ea26 0607 	bic.w	r6, r6, r7
 8003306:	fa05 f000 	lsl.w	r0, r5, r0
 800330a:	4330      	orrs	r0, r6
 800330c:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800330e:	6890      	ldr	r0, [r2, #8]
 8003310:	f010 0f0c 	tst.w	r0, #12
 8003314:	d133      	bne.n	800337e <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003316:	2d09      	cmp	r5, #9
 8003318:	d94e      	bls.n	80033b8 <HAL_ADC_ConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800331a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800331e:	3f1e      	subs	r7, #30
 8003320:	6990      	ldr	r0, [r2, #24]
 8003322:	688e      	ldr	r6, [r1, #8]
 8003324:	f04f 0e07 	mov.w	lr, #7
 8003328:	fa0e fe07 	lsl.w	lr, lr, r7
 800332c:	ea20 000e 	bic.w	r0, r0, lr
 8003330:	40be      	lsls	r6, r7
 8003332:	4330      	orrs	r0, r6
 8003334:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003336:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8003338:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800333a:	694f      	ldr	r7, [r1, #20]
 800333c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003340:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8003342:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003344:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8003348:	2e03      	cmp	r6, #3
 800334a:	f200 80f2 	bhi.w	8003532 <HAL_ADC_ConfigChannel+0x27e>
 800334e:	e8df f006 	tbb	[pc, r6]
 8003352:	737d      	.short	0x737d
 8003354:	5f69      	.short	0x5f69
  __HAL_LOCK(hadc);
 8003356:	2002      	movs	r0, #2
}
 8003358:	b003      	add	sp, #12
 800335a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 800335c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003360:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8003362:	680d      	ldr	r5, [r1, #0]
 8003364:	0040      	lsls	r0, r0, #1
 8003366:	271f      	movs	r7, #31
 8003368:	4087      	lsls	r7, r0
 800336a:	ea26 0607 	bic.w	r6, r6, r7
 800336e:	fa05 f000 	lsl.w	r0, r5, r0
 8003372:	4330      	orrs	r0, r6
 8003374:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003376:	6890      	ldr	r0, [r2, #8]
 8003378:	f010 0f0c 	tst.w	r0, #12
 800337c:	d0cb      	beq.n	8003316 <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800337e:	6890      	ldr	r0, [r2, #8]
 8003380:	f000 0003 	and.w	r0, r0, #3
 8003384:	2801      	cmp	r0, #1
 8003386:	d013      	beq.n	80033b0 <HAL_ADC_ConfigChannel+0xfc>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003388:	2c01      	cmp	r4, #1
 800338a:	f000 80a4 	beq.w	80034d6 <HAL_ADC_ConfigChannel+0x222>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800338e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8003392:	2001      	movs	r0, #1
 8003394:	40a8      	lsls	r0, r5
 8003396:	ea21 0100 	bic.w	r1, r1, r0
 800339a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800339e:	2d10      	cmp	r5, #16
 80033a0:	d072      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x1d4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80033a2:	2d11      	cmp	r5, #17
 80033a4:	f000 80ae 	beq.w	8003504 <HAL_ADC_ConfigChannel+0x250>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033a8:	2d12      	cmp	r5, #18
 80033aa:	d059      	beq.n	8003460 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ac:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80033ae:	e796      	b.n	80032de <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033b0:	6810      	ldr	r0, [r2, #0]
 80033b2:	07c0      	lsls	r0, r0, #31
 80033b4:	d5e8      	bpl.n	8003388 <HAL_ADC_ConfigChannel+0xd4>
 80033b6:	e7f9      	b.n	80033ac <HAL_ADC_ConfigChannel+0xf8>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033b8:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80033bc:	6950      	ldr	r0, [r2, #20]
 80033be:	688e      	ldr	r6, [r1, #8]
 80033c0:	2707      	movs	r7, #7
 80033c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80033c6:	ea20 0007 	bic.w	r0, r0, r7
 80033ca:	fa06 f60e 	lsl.w	r6, r6, lr
 80033ce:	4330      	orrs	r0, r6
 80033d0:	6150      	str	r0, [r2, #20]
 80033d2:	e7b0      	b.n	8003336 <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 80033d4:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80033d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80033da:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 80033de:	d80b      	bhi.n	80033f8 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80033e0:	383c      	subs	r0, #60	; 0x3c
 80033e2:	6b96      	ldr	r6, [r2, #56]	; 0x38
 80033e4:	680d      	ldr	r5, [r1, #0]
 80033e6:	271f      	movs	r7, #31
 80033e8:	4087      	lsls	r7, r0
 80033ea:	ea26 0607 	bic.w	r6, r6, r7
 80033ee:	fa05 f000 	lsl.w	r0, r5, r0
 80033f2:	4330      	orrs	r0, r6
 80033f4:	6390      	str	r0, [r2, #56]	; 0x38
 80033f6:	e78a      	b.n	800330e <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80033f8:	385a      	subs	r0, #90	; 0x5a
 80033fa:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80033fc:	680d      	ldr	r5, [r1, #0]
 80033fe:	271f      	movs	r7, #31
 8003400:	4087      	lsls	r7, r0
 8003402:	ea26 0607 	bic.w	r6, r6, r7
 8003406:	fa05 f000 	lsl.w	r0, r5, r0
 800340a:	4330      	orrs	r0, r6
 800340c:	63d0      	str	r0, [r2, #60]	; 0x3c
 800340e:	e77e      	b.n	800330e <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003410:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8003412:	4e6a      	ldr	r6, [pc, #424]	; (80035bc <HAL_ADC_ConfigChannel+0x308>)
 8003414:	403e      	ands	r6, r7
 8003416:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800341a:	4330      	orrs	r0, r6
 800341c:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 8003420:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8003422:	e7ac      	b.n	800337e <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003424:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8003426:	4e65      	ldr	r6, [pc, #404]	; (80035bc <HAL_ADC_ConfigChannel+0x308>)
 8003428:	403e      	ands	r6, r7
 800342a:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800342e:	4330      	orrs	r0, r6
 8003430:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 8003434:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8003436:	e7a2      	b.n	800337e <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003438:	6e57      	ldr	r7, [r2, #100]	; 0x64
 800343a:	4e60      	ldr	r6, [pc, #384]	; (80035bc <HAL_ADC_ConfigChannel+0x308>)
 800343c:	403e      	ands	r6, r7
 800343e:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8003442:	4330      	orrs	r0, r6
 8003444:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 8003448:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 800344a:	e798      	b.n	800337e <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800344c:	6e17      	ldr	r7, [r2, #96]	; 0x60
 800344e:	4e5b      	ldr	r6, [pc, #364]	; (80035bc <HAL_ADC_ConfigChannel+0x308>)
 8003450:	403e      	ands	r6, r7
 8003452:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8003456:	4330      	orrs	r0, r6
 8003458:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 800345c:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 800345e:	e78e      	b.n	800337e <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003460:	4957      	ldr	r1, [pc, #348]	; (80035c0 <HAL_ADC_ConfigChannel+0x30c>)
 8003462:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003464:	024d      	lsls	r5, r1, #9
 8003466:	d4a1      	bmi.n	80033ac <HAL_ADC_ConfigChannel+0xf8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003468:	6891      	ldr	r1, [r2, #8]
 800346a:	f001 0103 	and.w	r1, r1, #3
 800346e:	2901      	cmp	r1, #1
 8003470:	f040 809c 	bne.w	80035ac <HAL_ADC_ConfigChannel+0x2f8>
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	07d0      	lsls	r0, r2, #31
 8003478:	f140 8098 	bpl.w	80035ac <HAL_ADC_ConfigChannel+0x2f8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800347c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347e:	f042 0220 	orr.w	r2, r2, #32
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003484:	2001      	movs	r0, #1
 8003486:	e72a      	b.n	80032de <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003488:	494d      	ldr	r1, [pc, #308]	; (80035c0 <HAL_ADC_ConfigChannel+0x30c>)
 800348a:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800348c:	020f      	lsls	r7, r1, #8
 800348e:	d48d      	bmi.n	80033ac <HAL_ADC_ConfigChannel+0xf8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003490:	6891      	ldr	r1, [r2, #8]
 8003492:	f001 0103 	and.w	r1, r1, #3
 8003496:	2901      	cmp	r1, #1
 8003498:	f000 8083 	beq.w	80035a2 <HAL_ADC_ConfigChannel+0x2ee>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800349c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80034a0:	d184      	bne.n	80033ac <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034a2:	4947      	ldr	r1, [pc, #284]	; (80035c0 <HAL_ADC_ConfigChannel+0x30c>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034a4:	4c47      	ldr	r4, [pc, #284]	; (80035c4 <HAL_ADC_ConfigChannel+0x310>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034a6:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034a8:	4847      	ldr	r0, [pc, #284]	; (80035c8 <HAL_ADC_ConfigChannel+0x314>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034aa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034ae:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	fba0 1202 	umull	r1, r2, r0, r2
 80034b6:	0c92      	lsrs	r2, r2, #18
 80034b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80034bc:	0052      	lsls	r2, r2, #1
 80034be:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80034c0:	9a01      	ldr	r2, [sp, #4]
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	f43f af72 	beq.w	80033ac <HAL_ADC_ConfigChannel+0xf8>
            wait_loop_index--;
 80034c8:	9a01      	ldr	r2, [sp, #4]
 80034ca:	3a01      	subs	r2, #1
 80034cc:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80034ce:	9a01      	ldr	r2, [sp, #4]
 80034d0:	2a00      	cmp	r2, #0
 80034d2:	d1f9      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x214>
 80034d4:	e76a      	b.n	80033ac <HAL_ADC_ConfigChannel+0xf8>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80034d6:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 80034da:	40ac      	lsls	r4, r5
 80034dc:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80034de:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80034e0:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80034e4:	d940      	bls.n	8003568 <HAL_ADC_ConfigChannel+0x2b4>
        MODIFY_REG(hadc->Instance->SMPR2,
 80034e6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80034ea:	688e      	ldr	r6, [r1, #8]
 80034ec:	6994      	ldr	r4, [r2, #24]
 80034ee:	f1a0 011b 	sub.w	r1, r0, #27
 80034f2:	2707      	movs	r7, #7
 80034f4:	408f      	lsls	r7, r1
 80034f6:	fa06 f001 	lsl.w	r0, r6, r1
 80034fa:	ea24 0107 	bic.w	r1, r4, r7
 80034fe:	4301      	orrs	r1, r0
 8003500:	6191      	str	r1, [r2, #24]
 8003502:	e74c      	b.n	800339e <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003504:	492e      	ldr	r1, [pc, #184]	; (80035c0 <HAL_ADC_ConfigChannel+0x30c>)
 8003506:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003508:	01ce      	lsls	r6, r1, #7
 800350a:	f53f af4f 	bmi.w	80033ac <HAL_ADC_ConfigChannel+0xf8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800350e:	6891      	ldr	r1, [r2, #8]
 8003510:	f001 0103 	and.w	r1, r1, #3
 8003514:	2901      	cmp	r1, #1
 8003516:	d102      	bne.n	800351e <HAL_ADC_ConfigChannel+0x26a>
 8003518:	6811      	ldr	r1, [r2, #0]
 800351a:	07c9      	lsls	r1, r1, #31
 800351c:	d4ae      	bmi.n	800347c <HAL_ADC_ConfigChannel+0x1c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800351e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003522:	f47f af43 	bne.w	80033ac <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003526:	4926      	ldr	r1, [pc, #152]	; (80035c0 <HAL_ADC_ConfigChannel+0x30c>)
 8003528:	688a      	ldr	r2, [r1, #8]
 800352a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800352e:	608a      	str	r2, [r1, #8]
 8003530:	e73c      	b.n	80033ac <HAL_ADC_ConfigChannel+0xf8>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003532:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8003534:	06a8      	lsls	r0, r5, #26
 8003536:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800353a:	4286      	cmp	r6, r0
 800353c:	d02c      	beq.n	8003598 <HAL_ADC_ConfigChannel+0x2e4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800353e:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8003540:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8003544:	42b0      	cmp	r0, r6
 8003546:	d022      	beq.n	800358e <HAL_ADC_ConfigChannel+0x2da>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003548:	6e96      	ldr	r6, [r2, #104]	; 0x68
 800354a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800354e:	42b0      	cmp	r0, r6
 8003550:	d018      	beq.n	8003584 <HAL_ADC_ConfigChannel+0x2d0>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003552:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 8003554:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8003558:	42b0      	cmp	r0, r6
 800355a:	f47f af10 	bne.w	800337e <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800355e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8003560:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003564:	66d0      	str	r0, [r2, #108]	; 0x6c
 8003566:	e70a      	b.n	800337e <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 8003568:	1c68      	adds	r0, r5, #1
 800356a:	688e      	ldr	r6, [r1, #8]
 800356c:	6954      	ldr	r4, [r2, #20]
 800356e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8003572:	2707      	movs	r7, #7
 8003574:	408f      	lsls	r7, r1
 8003576:	fa06 f001 	lsl.w	r0, r6, r1
 800357a:	ea24 0107 	bic.w	r1, r4, r7
 800357e:	4301      	orrs	r1, r0
 8003580:	6151      	str	r1, [r2, #20]
 8003582:	e70e      	b.n	80033a2 <HAL_ADC_ConfigChannel+0xee>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003584:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8003586:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 800358a:	6696      	str	r6, [r2, #104]	; 0x68
 800358c:	e7e1      	b.n	8003552 <HAL_ADC_ConfigChannel+0x29e>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800358e:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8003590:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8003594:	6656      	str	r6, [r2, #100]	; 0x64
 8003596:	e7d7      	b.n	8003548 <HAL_ADC_ConfigChannel+0x294>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003598:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800359a:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 800359e:	6616      	str	r6, [r2, #96]	; 0x60
 80035a0:	e7cd      	b.n	800353e <HAL_ADC_ConfigChannel+0x28a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80035a2:	6811      	ldr	r1, [r2, #0]
 80035a4:	07cc      	lsls	r4, r1, #31
 80035a6:	f53f af69 	bmi.w	800347c <HAL_ADC_ConfigChannel+0x1c8>
 80035aa:	e777      	b.n	800349c <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80035ac:	4904      	ldr	r1, [pc, #16]	; (80035c0 <HAL_ADC_ConfigChannel+0x30c>)
 80035ae:	688a      	ldr	r2, [r1, #8]
 80035b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80035b4:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b6:	2000      	movs	r0, #0
 80035b8:	e691      	b.n	80032de <HAL_ADC_ConfigChannel+0x2a>
 80035ba:	bf00      	nop
 80035bc:	83fff000 	.word	0x83fff000
 80035c0:	50000300 	.word	0x50000300
 80035c4:	200006fc 	.word	0x200006fc
 80035c8:	431bde83 	.word	0x431bde83

080035cc <HAL_ADCEx_InjectedConfigChannel>:
{
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	4602      	mov	r2, r0
 80035d0:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 80035d2:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
  __IO uint32_t wait_loop_index = 0U;
 80035d6:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 80035d8:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 80035da:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80035dc:	f000 80a0 	beq.w	8003720 <HAL_ADCEx_InjectedConfigChannel+0x154>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035e0:	6913      	ldr	r3, [r2, #16]
  __HAL_LOCK(hadc);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d14c      	bne.n	8003686 <HAL_ADCEx_InjectedConfigChannel+0xba>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80035ec:	684b      	ldr	r3, [r1, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	f000 813f 	beq.w	8003872 <HAL_ADCEx_InjectedConfigChannel+0x2a6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f4:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80035f6:	6813      	ldr	r3, [r2, #0]
 80035f8:	f040 0020 	orr.w	r0, r0, #32
 80035fc:	6410      	str	r0, [r2, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 80035fe:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003600:	689c      	ldr	r4, [r3, #8]
 8003602:	0725      	lsls	r5, r4, #28
 8003604:	d40d      	bmi.n	8003622 <HAL_ADCEx_InjectedConfigChannel+0x56>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003606:	7f4c      	ldrb	r4, [r1, #29]
 8003608:	2c00      	cmp	r4, #0
 800360a:	f040 809b 	bne.w	8003744 <HAL_ADCEx_InjectedConfigChannel+0x178>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 800360e:	7f0c      	ldrb	r4, [r1, #28]
 8003610:	7f8e      	ldrb	r6, [r1, #30]
 8003612:	68dd      	ldr	r5, [r3, #12]
 8003614:	0524      	lsls	r4, r4, #20
 8003616:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 800361a:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 800361e:	432c      	orrs	r4, r5
 8003620:	60dc      	str	r4, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003622:	689c      	ldr	r4, [r3, #8]
 8003624:	f014 0f0c 	tst.w	r4, #12
 8003628:	d15a      	bne.n	80036e0 <HAL_ADCEx_InjectedConfigChannel+0x114>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800362a:	6a0c      	ldr	r4, [r1, #32]
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800362c:	7f4d      	ldrb	r5, [r1, #29]
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800362e:	2c01      	cmp	r4, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003630:	68dc      	ldr	r4, [r3, #12]
 8003632:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003636:	f000 8147 	beq.w	80038c8 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800363a:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800363c:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800363e:	f000 810d 	beq.w	800385c <HAL_ADCEx_InjectedConfigChannel+0x290>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003642:	680c      	ldr	r4, [r1, #0]
 8003644:	2c09      	cmp	r4, #9
 8003646:	d86e      	bhi.n	8003726 <HAL_ADCEx_InjectedConfigChannel+0x15a>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003648:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800364c:	695d      	ldr	r5, [r3, #20]
 800364e:	688e      	ldr	r6, [r1, #8]
 8003650:	2707      	movs	r7, #7
 8003652:	fa07 f70e 	lsl.w	r7, r7, lr
 8003656:	ea25 0507 	bic.w	r5, r5, r7
 800365a:	fa06 f60e 	lsl.w	r6, r6, lr
 800365e:	4335      	orrs	r5, r6
 8003660:	615d      	str	r5, [r3, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003662:	68dd      	ldr	r5, [r3, #12]
    switch (sConfigInjected->InjectedOffsetNumber)
 8003664:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003666:	694f      	ldr	r7, [r1, #20]
 8003668:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 800366c:	006d      	lsls	r5, r5, #1
    switch (sConfigInjected->InjectedOffsetNumber)
 800366e:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003670:	fa07 f505 	lsl.w	r5, r7, r5
    switch (sConfigInjected->InjectedOffsetNumber)
 8003674:	2e03      	cmp	r6, #3
 8003676:	f200 813e 	bhi.w	80038f6 <HAL_ADCEx_InjectedConfigChannel+0x32a>
 800367a:	e8df f016 	tbh	[pc, r6, lsl #1]
 800367e:	00cc      	.short	0x00cc
 8003680:	002600c0 	.word	0x002600c0
 8003684:	00b4      	.short	0x00b4
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8003686:	698c      	ldr	r4, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003688:	4284      	cmp	r4, r0
 800368a:	d0af      	beq.n	80035ec <HAL_ADCEx_InjectedConfigChannel+0x20>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800368c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800368e:	2800      	cmp	r0, #0
 8003690:	d169      	bne.n	8003766 <HAL_ADCEx_InjectedConfigChannel+0x19a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003692:	6a0b      	ldr	r3, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003694:	64d4      	str	r4, [r2, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003696:	2b01      	cmp	r3, #1
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003698:	6490      	str	r0, [r2, #72]	; 0x48
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800369a:	f000 8166 	beq.w	800396a <HAL_ADCEx_InjectedConfigChannel+0x39e>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800369e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80036a0:	3c01      	subs	r4, #1
 80036a2:	4303      	orrs	r3, r0
 80036a4:	4323      	orrs	r3, r4
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80036a6:	684d      	ldr	r5, [r1, #4]
 80036a8:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 80036aa:	64d4      	str	r4, [r2, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80036ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036b0:	0068      	lsls	r0, r5, #1
 80036b2:	3002      	adds	r0, #2
 80036b4:	241f      	movs	r4, #31
 80036b6:	4084      	lsls	r4, r0
 80036b8:	ea23 0304 	bic.w	r3, r3, r4
 80036bc:	fa06 f000 	lsl.w	r0, r6, r0
 80036c0:	4303      	orrs	r3, r0
 80036c2:	6493      	str	r3, [r2, #72]	; 0x48
 80036c4:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c6:	2000      	movs	r0, #0
 80036c8:	e79a      	b.n	8003600 <HAL_ADCEx_InjectedConfigChannel+0x34>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80036ca:	f8d3 e068 	ldr.w	lr, [r3, #104]	; 0x68
 80036ce:	4eaf      	ldr	r6, [pc, #700]	; (800398c <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 80036d0:	06a7      	lsls	r7, r4, #26
 80036d2:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 80036d6:	ea0e 0606 	and.w	r6, lr, r6
 80036da:	4337      	orrs	r7, r6
 80036dc:	433d      	orrs	r5, r7
 80036de:	669d      	str	r5, [r3, #104]	; 0x68
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036e0:	689c      	ldr	r4, [r3, #8]
 80036e2:	f004 0403 	and.w	r4, r4, #3
 80036e6:	2c01      	cmp	r4, #1
 80036e8:	f000 80be 	beq.w	8003868 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036ec:	68cc      	ldr	r4, [r1, #12]
 80036ee:	2c01      	cmp	r4, #1
 80036f0:	f000 80d0 	beq.w	8003894 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80036f4:	680d      	ldr	r5, [r1, #0]
 80036f6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036fa:	2401      	movs	r4, #1
 80036fc:	40ac      	lsls	r4, r5
 80036fe:	ea21 0104 	bic.w	r1, r1, r4
 8003702:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003706:	2d10      	cmp	r5, #16
 8003708:	d047      	beq.n	800379a <HAL_ADCEx_InjectedConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800370a:	2d11      	cmp	r5, #17
 800370c:	f000 808f 	beq.w	800382e <HAL_ADCEx_InjectedConfigChannel+0x262>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003710:	2d12      	cmp	r5, #18
 8003712:	f000 80dd 	beq.w	80038d0 <HAL_ADCEx_InjectedConfigChannel+0x304>
  __HAL_UNLOCK(hadc);
 8003716:	2300      	movs	r3, #0
 8003718:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800371c:	b003      	add	sp, #12
 800371e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8003720:	2002      	movs	r0, #2
}
 8003722:	b003      	add	sp, #12
 8003724:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003726:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800372a:	3f1e      	subs	r7, #30
 800372c:	699d      	ldr	r5, [r3, #24]
 800372e:	688e      	ldr	r6, [r1, #8]
 8003730:	f04f 0e07 	mov.w	lr, #7
 8003734:	fa0e fe07 	lsl.w	lr, lr, r7
 8003738:	ea25 050e 	bic.w	r5, r5, lr
 800373c:	40be      	lsls	r6, r7
 800373e:	4335      	orrs	r5, r6
 8003740:	619d      	str	r5, [r3, #24]
 8003742:	e78e      	b.n	8003662 <HAL_ADCEx_InjectedConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003744:	68dc      	ldr	r4, [r3, #12]
 8003746:	7f8e      	ldrb	r6, [r1, #30]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003748:	7f0d      	ldrb	r5, [r1, #28]
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 800374a:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 800374e:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003752:	2d01      	cmp	r5, #1
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003754:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003756:	f47f af64 	bne.w	8003622 <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375a:	6c14      	ldr	r4, [r2, #64]	; 0x40
 800375c:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 8003760:	4628      	mov	r0, r5
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003762:	6414      	str	r4, [r2, #64]	; 0x40
 8003764:	e75d      	b.n	8003622 <HAL_ADCEx_InjectedConfigChannel+0x56>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003766:	684b      	ldr	r3, [r1, #4]
 8003768:	680e      	ldr	r6, [r1, #0]
 800376a:	6c95      	ldr	r5, [r2, #72]	; 0x48
 800376c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	3302      	adds	r3, #2
 8003774:	241f      	movs	r4, #31
 8003776:	409c      	lsls	r4, r3
 8003778:	ea25 0504 	bic.w	r5, r5, r4
 800377c:	fa06 f303 	lsl.w	r3, r6, r3
 8003780:	3801      	subs	r0, #1
 8003782:	431d      	orrs	r5, r3
 8003784:	6495      	str	r5, [r2, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount --;
 8003786:	64d0      	str	r0, [r2, #76]	; 0x4c
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8003788:	2800      	cmp	r0, #0
 800378a:	d19b      	bne.n	80036c4 <HAL_ADCEx_InjectedConfigChannel+0xf8>
        MODIFY_REG(hadc->Instance->JSQR              ,
 800378c:	6813      	ldr	r3, [r2, #0]
 800378e:	4c80      	ldr	r4, [pc, #512]	; (8003990 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 8003790:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8003792:	4026      	ands	r6, r4
 8003794:	4335      	orrs	r5, r6
 8003796:	64dd      	str	r5, [r3, #76]	; 0x4c
 8003798:	e732      	b.n	8003600 <HAL_ADCEx_InjectedConfigChannel+0x34>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800379a:	497e      	ldr	r1, [pc, #504]	; (8003994 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 800379c:	6889      	ldr	r1, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800379e:	020f      	lsls	r7, r1, #8
 80037a0:	d4b9      	bmi.n	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	f001 0103 	and.w	r1, r1, #3
 80037a8:	2901      	cmp	r1, #1
 80037aa:	f000 80e4 	beq.w	8003976 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b2:	d1b0      	bne.n	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80037b4:	4977      	ldr	r1, [pc, #476]	; (8003994 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037b6:	4d78      	ldr	r5, [pc, #480]	; (8003998 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80037b8:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037ba:	4c78      	ldr	r4, [pc, #480]	; (800399c <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80037bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037c0:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037c2:	682b      	ldr	r3, [r5, #0]
 80037c4:	fba4 1303 	umull	r1, r3, r4, r3
 80037c8:	0c9b      	lsrs	r3, r3, #18
 80037ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80037d2:	9b01      	ldr	r3, [sp, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d09e      	beq.n	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
            wait_loop_index--;
 80037d8:	9b01      	ldr	r3, [sp, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80037de:	9b01      	ldr	r3, [sp, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f9      	bne.n	80037d8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
 80037e4:	e797      	b.n	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80037e6:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 80037ea:	4e68      	ldr	r6, [pc, #416]	; (800398c <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 80037ec:	06a7      	lsls	r7, r4, #26
 80037ee:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 80037f2:	ea0e 0606 	and.w	r6, lr, r6
 80037f6:	4337      	orrs	r7, r6
 80037f8:	433d      	orrs	r5, r7
 80037fa:	66dd      	str	r5, [r3, #108]	; 0x6c
      break;
 80037fc:	e770      	b.n	80036e0 <HAL_ADCEx_InjectedConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 80037fe:	f8d3 e064 	ldr.w	lr, [r3, #100]	; 0x64
 8003802:	4e62      	ldr	r6, [pc, #392]	; (800398c <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8003804:	06a7      	lsls	r7, r4, #26
 8003806:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 800380a:	ea0e 0606 	and.w	r6, lr, r6
 800380e:	4337      	orrs	r7, r6
 8003810:	433d      	orrs	r5, r7
 8003812:	665d      	str	r5, [r3, #100]	; 0x64
      break;
 8003814:	e764      	b.n	80036e0 <HAL_ADCEx_InjectedConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8003816:	f8d3 e060 	ldr.w	lr, [r3, #96]	; 0x60
 800381a:	4e5c      	ldr	r6, [pc, #368]	; (800398c <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 800381c:	06a7      	lsls	r7, r4, #26
 800381e:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8003822:	ea0e 0606 	and.w	r6, lr, r6
 8003826:	4337      	orrs	r7, r6
 8003828:	433d      	orrs	r5, r7
 800382a:	661d      	str	r5, [r3, #96]	; 0x60
      break;
 800382c:	e758      	b.n	80036e0 <HAL_ADCEx_InjectedConfigChannel+0x114>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800382e:	4959      	ldr	r1, [pc, #356]	; (8003994 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 8003830:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003832:	01ce      	lsls	r6, r1, #7
 8003834:	f53f af6f 	bmi.w	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003838:	6899      	ldr	r1, [r3, #8]
 800383a:	f001 0103 	and.w	r1, r1, #3
 800383e:	2901      	cmp	r1, #1
 8003840:	d102      	bne.n	8003848 <HAL_ADCEx_InjectedConfigChannel+0x27c>
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	07cc      	lsls	r4, r1, #31
 8003846:	d450      	bmi.n	80038ea <HAL_ADCEx_InjectedConfigChannel+0x31e>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800384c:	f47f af63 	bne.w	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003850:	4950      	ldr	r1, [pc, #320]	; (8003994 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 8003852:	688b      	ldr	r3, [r1, #8]
 8003854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003858:	608b      	str	r3, [r1, #8]
 800385a:	e75c      	b.n	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385c:	6c14      	ldr	r4, [r2, #64]	; 0x40
 800385e:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 8003862:	4628      	mov	r0, r5
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003864:	6414      	str	r4, [r2, #64]	; 0x40
 8003866:	e6ec      	b.n	8003642 <HAL_ADCEx_InjectedConfigChannel+0x76>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003868:	681c      	ldr	r4, [r3, #0]
 800386a:	07e4      	lsls	r4, r4, #31
 800386c:	f53f af53 	bmi.w	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
 8003870:	e73c      	b.n	80036ec <HAL_ADCEx_InjectedConfigChannel+0x120>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003872:	6a0b      	ldr	r3, [r1, #32]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d07b      	beq.n	8003970 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003878:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800387a:	680c      	ldr	r4, [r1, #0]
 800387c:	4303      	orrs	r3, r0
 800387e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
      MODIFY_REG(hadc->Instance->JSQR           ,
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	4d42      	ldr	r5, [pc, #264]	; (8003990 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 8003886:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003888:	4028      	ands	r0, r5
 800388a:	4320      	orrs	r0, r4
 800388c:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388e:	2000      	movs	r0, #0
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003890:	6494      	str	r4, [r2, #72]	; 0x48
 8003892:	e6b5      	b.n	8003600 <HAL_ADCEx_InjectedConfigChannel+0x34>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003894:	680d      	ldr	r5, [r1, #0]
 8003896:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 800389a:	40ac      	lsls	r4, r5
 800389c:	4334      	orrs	r4, r6
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800389e:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80038a0:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80038a4:	d942      	bls.n	800392c <HAL_ADCEx_InjectedConfigChannel+0x360>
        MODIFY_REG(hadc->Instance->SMPR2,
 80038a6:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80038aa:	688f      	ldr	r7, [r1, #8]
 80038ac:	699e      	ldr	r6, [r3, #24]
 80038ae:	f1a4 011b 	sub.w	r1, r4, #27
 80038b2:	f04f 0e07 	mov.w	lr, #7
 80038b6:	fa0e fe01 	lsl.w	lr, lr, r1
 80038ba:	fa07 f401 	lsl.w	r4, r7, r1
 80038be:	ea26 010e 	bic.w	r1, r6, lr
 80038c2:	4321      	orrs	r1, r4
 80038c4:	6199      	str	r1, [r3, #24]
 80038c6:	e71e      	b.n	8003706 <HAL_ADCEx_InjectedConfigChannel+0x13a>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 80038c8:	ea44 6445 	orr.w	r4, r4, r5, lsl #25
 80038cc:	60dc      	str	r4, [r3, #12]
 80038ce:	e6b8      	b.n	8003642 <HAL_ADCEx_InjectedConfigChannel+0x76>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80038d0:	4930      	ldr	r1, [pc, #192]	; (8003994 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 80038d2:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80038d4:	024d      	lsls	r5, r1, #9
 80038d6:	f53f af1e 	bmi.w	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	f001 0103 	and.w	r1, r1, #3
 80038e0:	2901      	cmp	r1, #1
 80038e2:	d14c      	bne.n	800397e <HAL_ADCEx_InjectedConfigChannel+0x3b2>
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	07db      	lsls	r3, r3, #31
 80038e8:	d549      	bpl.n	800397e <HAL_ADCEx_InjectedConfigChannel+0x3b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80038ec:	f043 0320 	orr.w	r3, r3, #32
 80038f0:	6413      	str	r3, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80038f2:	2001      	movs	r0, #1
 80038f4:	e70f      	b.n	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80038f6:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80038f8:	06a4      	lsls	r4, r4, #26
 80038fa:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80038fe:	42a5      	cmp	r5, r4
 8003900:	d024      	beq.n	800394c <HAL_ADCEx_InjectedConfigChannel+0x380>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003902:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8003904:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003908:	42ac      	cmp	r4, r5
 800390a:	d029      	beq.n	8003960 <HAL_ADCEx_InjectedConfigChannel+0x394>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800390c:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800390e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003912:	42ac      	cmp	r4, r5
 8003914:	d01f      	beq.n	8003956 <HAL_ADCEx_InjectedConfigChannel+0x38a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003916:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8003918:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800391c:	42ac      	cmp	r4, r5
 800391e:	f47f aedf 	bne.w	80036e0 <HAL_ADCEx_InjectedConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003922:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8003924:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003928:	66dc      	str	r4, [r3, #108]	; 0x6c
 800392a:	e6d9      	b.n	80036e0 <HAL_ADCEx_InjectedConfigChannel+0x114>
        MODIFY_REG(hadc->Instance->SMPR1,
 800392c:	1c6c      	adds	r4, r5, #1
 800392e:	688f      	ldr	r7, [r1, #8]
 8003930:	695e      	ldr	r6, [r3, #20]
 8003932:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8003936:	f04f 0e07 	mov.w	lr, #7
 800393a:	fa0e fe01 	lsl.w	lr, lr, r1
 800393e:	fa07 f401 	lsl.w	r4, r7, r1
 8003942:	ea26 010e 	bic.w	r1, r6, lr
 8003946:	4321      	orrs	r1, r4
 8003948:	6159      	str	r1, [r3, #20]
 800394a:	e6de      	b.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x13e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800394c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800394e:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003952:	661d      	str	r5, [r3, #96]	; 0x60
 8003954:	e7d5      	b.n	8003902 <HAL_ADCEx_InjectedConfigChannel+0x336>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003956:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8003958:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800395c:	669d      	str	r5, [r3, #104]	; 0x68
 800395e:	e7da      	b.n	8003916 <HAL_ADCEx_InjectedConfigChannel+0x34a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003960:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8003962:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003966:	665d      	str	r5, [r3, #100]	; 0x64
 8003968:	e7d0      	b.n	800390c <HAL_ADCEx_InjectedConfigChannel+0x340>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 800396a:	1e63      	subs	r3, r4, #1
 800396c:	461c      	mov	r4, r3
 800396e:	e69a      	b.n	80036a6 <HAL_ADCEx_InjectedConfigChannel+0xda>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003970:	680c      	ldr	r4, [r1, #0]
 8003972:	0224      	lsls	r4, r4, #8
 8003974:	e785      	b.n	8003882 <HAL_ADCEx_InjectedConfigChannel+0x2b6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003976:	6819      	ldr	r1, [r3, #0]
 8003978:	07c9      	lsls	r1, r1, #31
 800397a:	d4b6      	bmi.n	80038ea <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800397c:	e717      	b.n	80037ae <HAL_ADCEx_InjectedConfigChannel+0x1e2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800397e:	4905      	ldr	r1, [pc, #20]	; (8003994 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 8003980:	688b      	ldr	r3, [r1, #8]
 8003982:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003986:	608b      	str	r3, [r1, #8]
 8003988:	e6c5      	b.n	8003716 <HAL_ADCEx_InjectedConfigChannel+0x14a>
 800398a:	bf00      	nop
 800398c:	83fff000 	.word	0x83fff000
 8003990:	82082000 	.word	0x82082000
 8003994:	50000300 	.word	0x50000300
 8003998:	200006fc 	.word	0x200006fc
 800399c:	431bde83 	.word	0x431bde83

080039a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a0:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80039a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a4:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80039a8:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039aa:	0200      	lsls	r0, r0, #8
 80039ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039b0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80039b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80039b8:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80039ba:	60d3      	str	r3, [r2, #12]
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c4:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c6:	b470      	push	{r4, r5, r6}
 80039c8:	68dc      	ldr	r4, [r3, #12]
 80039ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ce:	f1c4 0607 	rsb	r6, r4, #7
 80039d2:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d8:	bf28      	it	cs
 80039da:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d917      	bls.n	8003a10 <HAL_NVIC_SetPriority+0x4c>
 80039e0:	3c03      	subs	r4, #3
 80039e2:	2501      	movs	r5, #1
 80039e4:	40a5      	lsls	r5, r4
 80039e6:	3d01      	subs	r5, #1
 80039e8:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ea:	2301      	movs	r3, #1
 80039ec:	40b3      	lsls	r3, r6
 80039ee:	3b01      	subs	r3, #1
 80039f0:	4019      	ands	r1, r3
 80039f2:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80039f4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80039fa:	db0c      	blt.n	8003a16 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003a00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003a04:	0109      	lsls	r1, r1, #4
 8003a06:	b2c9      	uxtb	r1, r1
 8003a08:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003a0c:	bc70      	pop	{r4, r5, r6}
 8003a0e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a10:	2200      	movs	r2, #0
 8003a12:	4614      	mov	r4, r2
 8003a14:	e7e9      	b.n	80039ea <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_NVIC_SetPriority+0x68>)
 8003a18:	f000 000f 	and.w	r0, r0, #15
 8003a1c:	0109      	lsls	r1, r1, #4
 8003a1e:	4403      	add	r3, r0
 8003a20:	b2c9      	uxtb	r1, r1
 8003a22:	7619      	strb	r1, [r3, #24]
 8003a24:	bc70      	pop	{r4, r5, r6}
 8003a26:	4770      	bx	lr
 8003a28:	e000ed00 	.word	0xe000ed00
 8003a2c:	e000ecfc 	.word	0xe000ecfc

08003a30 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a30:	2800      	cmp	r0, #0
 8003a32:	db07      	blt.n	8003a44 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a34:	f000 011f 	and.w	r1, r0, #31
 8003a38:	2301      	movs	r3, #1
 8003a3a:	0940      	lsrs	r0, r0, #5
 8003a3c:	4a02      	ldr	r2, [pc, #8]	; (8003a48 <HAL_NVIC_EnableIRQ+0x18>)
 8003a3e:	408b      	lsls	r3, r1
 8003a40:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	e000e100 	.word	0xe000e100

08003a4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	3801      	subs	r0, #1
 8003a4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003a52:	d20e      	bcs.n	8003a72 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a54:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a58:	4c08      	ldr	r4, [pc, #32]	; (8003a7c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5c:	20f0      	movs	r0, #240	; 0xf0
 8003a5e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a62:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a64:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a66:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8003a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000e010 	.word	0xe000e010
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop

08003a84 <HAL_SYSTICK_IRQHandler>:
{
 8003a84:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003a86:	f7ff fffb 	bl	8003a80 <HAL_SYSTICK_Callback>
 8003a8a:	bd08      	pop	{r3, pc}

08003a8c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8003a8c:	b188      	cbz	r0, 8003ab2 <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003a8e:	7903      	ldrb	r3, [r0, #4]
{ 
 8003a90:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003a92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a96:	4604      	mov	r4, r0
 8003a98:	b13b      	cbz	r3, 8003aaa <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a9a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a9c:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a9e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aa0:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8003aa2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003aa4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003aa6:	7122      	strb	r2, [r4, #4]
  return HAL_OK;
 8003aa8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003aaa:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003aac:	f7fe fac8 	bl	8002040 <HAL_DAC_MspInit>
 8003ab0:	e7f3      	b.n	8003a9a <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop

08003ab8 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003ab8:	7943      	ldrb	r3, [r0, #5]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d01d      	beq.n	8003afa <HAL_DAC_ConfigChannel+0x42>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003abe:	2302      	movs	r3, #2
{
 8003ac0:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ac2:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ac4:	6804      	ldr	r4, [r0, #0]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ac6:	e891 0048 	ldmia.w	r1, {r3, r6}
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003aca:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8003ace:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ad0:	4095      	lsls	r5, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ad2:	4333      	orrs	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ad4:	ea21 0105 	bic.w	r1, r1, r5
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003ad8:	4093      	lsls	r3, r2
 8003ada:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003adc:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	21c0      	movs	r1, #192	; 0xc0
 8003ae2:	fa01 f202 	lsl.w	r2, r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ae6:	2501      	movs	r5, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ae8:	2100      	movs	r1, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003aea:	ea23 0202 	bic.w	r2, r3, r2
 8003aee:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003af0:	7105      	strb	r5, [r0, #4]
  __HAL_UNLOCK(hdac);
 8003af2:	7141      	strb	r1, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
}
 8003af4:	bc70      	pop	{r4, r5, r6}
 8003af6:	4608      	mov	r0, r1
 8003af8:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8003afa:	2302      	movs	r3, #2
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	4770      	bx	lr

08003b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b00:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b02:	6809      	ldr	r1, [r1, #0]
 8003b04:	2900      	cmp	r1, #0
 8003b06:	f000 80d9 	beq.w	8003cbc <HAL_GPIO_Init+0x1bc>
{
 8003b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b0e:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8003cd0 <HAL_GPIO_Init+0x1d0>
{
 8003b12:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b14:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b16:	f04f 0801 	mov.w	r8, #1
 8003b1a:	e079      	b.n	8003c10 <HAL_GPIO_Init+0x110>
 8003b1c:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b20:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8003b22:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b26:	fa03 f309 	lsl.w	r3, r3, r9
 8003b2a:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b2c:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b30:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b34:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b38:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b3c:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b40:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8003b44:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b46:	f240 8098 	bls.w	8003c7a <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8003b4a:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b4c:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b50:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b52:	fa02 f209 	lsl.w	r2, r2, r9
 8003b56:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b58:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8003b5a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b5c:	d554      	bpl.n	8003c08 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5e:	4b58      	ldr	r3, [pc, #352]	; (8003cc0 <HAL_GPIO_Init+0x1c0>)
 8003b60:	4a57      	ldr	r2, [pc, #348]	; (8003cc0 <HAL_GPIO_Init+0x1c0>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6193      	str	r3, [r2, #24]
 8003b6a:	6993      	ldr	r3, [r2, #24]
 8003b6c:	f025 0603 	bic.w	r6, r5, #3
 8003b70:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8003b7c:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b7e:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b82:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b84:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	f04f 090f 	mov.w	r9, #15
 8003b8c:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b90:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b94:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b98:	f000 8086 	beq.w	8003ca8 <HAL_GPIO_Init+0x1a8>
 8003b9c:	4a49      	ldr	r2, [pc, #292]	; (8003cc4 <HAL_GPIO_Init+0x1c4>)
 8003b9e:	4290      	cmp	r0, r2
 8003ba0:	f000 8084 	beq.w	8003cac <HAL_GPIO_Init+0x1ac>
 8003ba4:	4a48      	ldr	r2, [pc, #288]	; (8003cc8 <HAL_GPIO_Init+0x1c8>)
 8003ba6:	4290      	cmp	r0, r2
 8003ba8:	f000 8083 	beq.w	8003cb2 <HAL_GPIO_Init+0x1b2>
 8003bac:	4a47      	ldr	r2, [pc, #284]	; (8003ccc <HAL_GPIO_Init+0x1cc>)
 8003bae:	4290      	cmp	r0, r2
 8003bb0:	bf0b      	itete	eq
 8003bb2:	f04f 0903 	moveq.w	r9, #3
 8003bb6:	2205      	movne	r2, #5
 8003bb8:	fa09 f303 	lsleq.w	r3, r9, r3
 8003bbc:	fa02 f303 	lslne.w	r3, r2, r3
 8003bc0:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bc4:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8003bc6:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 8003bca:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bcc:	03e6      	lsls	r6, r4, #15
        temp &= ~(iocurrent);
 8003bce:	bf54      	ite	pl
 8003bd0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8003bd2:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8003bd4:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8003bd8:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bdc:	03a6      	lsls	r6, r4, #14
        temp &= ~(iocurrent);
 8003bde:	bf54      	ite	pl
 8003be0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8003be2:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8003be4:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003be8:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bec:	02e6      	lsls	r6, r4, #11
        temp &= ~(iocurrent);
 8003bee:	bf54      	ite	pl
 8003bf0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8003bf2:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8003bf4:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8003bf8:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bfc:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8003bfe:	bf54      	ite	pl
 8003c00:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8003c02:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8003c04:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }

    position++;
 8003c08:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c0a:	fa31 f305 	lsrs.w	r3, r1, r5
 8003c0e:	d048      	beq.n	8003ca2 <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c10:	fa08 f205 	lsl.w	r2, r8, r5
    if (iocurrent != 0x00u)
 8003c14:	ea12 0701 	ands.w	r7, r2, r1
 8003c18:	d0f6      	beq.n	8003c08 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c1a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003c1e:	f024 0a10 	bic.w	sl, r4, #16
 8003c22:	f1ba 0f02 	cmp.w	sl, #2
 8003c26:	f47f af79 	bne.w	8003b1c <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3u];
 8003c2a:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8003c2e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c32:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 8003c36:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	f04f 0a0f 	mov.w	sl, #15
 8003c40:	fa0a fb03 	lsl.w	fp, sl, r3
 8003c44:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c48:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8003c4c:	fa06 f303 	lsl.w	r3, r6, r3
 8003c50:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8003c54:	f8c9 3020 	str.w	r3, [r9, #32]
 8003c58:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c5c:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8003c5e:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c62:	fa03 f309 	lsl.w	r3, r3, r9
 8003c66:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c68:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c6c:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c70:	fa06 f609 	lsl.w	r6, r6, r9
 8003c74:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8003c78:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8003c7a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c7c:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c80:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8003c84:	fa06 f609 	lsl.w	r6, r6, r9
 8003c88:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8003c8c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003c8e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c92:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c96:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c9a:	40ae      	lsls	r6, r5
 8003c9c:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8003c9e:	6046      	str	r6, [r0, #4]
 8003ca0:	e753      	b.n	8003b4a <HAL_GPIO_Init+0x4a>
  }
}
 8003ca2:	b003      	add	sp, #12
 8003ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e789      	b.n	8003bc0 <HAL_GPIO_Init+0xc0>
 8003cac:	fa08 f303 	lsl.w	r3, r8, r3
 8003cb0:	e786      	b.n	8003bc0 <HAL_GPIO_Init+0xc0>
 8003cb2:	f04f 0902 	mov.w	r9, #2
 8003cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8003cba:	e781      	b.n	8003bc0 <HAL_GPIO_Init+0xc0>
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	48000400 	.word	0x48000400
 8003cc8:	48000800 	.word	0x48000800
 8003ccc:	48000c00 	.word	0x48000c00
 8003cd0:	40010400 	.word	0x40010400

08003cd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd4:	b90a      	cbnz	r2, 8003cda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cd6:	6281      	str	r1, [r0, #40]	; 0x28
 8003cd8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cda:	6181      	str	r1, [r0, #24]
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d051      	beq.n	8003d88 <HAL_I2C_Init+0xa8>
{
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003cea:	4604      	mov	r4, r0
 8003cec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d040      	beq.n	8003d76 <HAL_I2C_Init+0x96>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf4:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cf6:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf8:	2224      	movs	r2, #36	; 0x24
 8003cfa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003cfe:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d00:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8003d02:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8003d0a:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d0c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d0e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d10:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d16:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d18:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d1a:	d031      	beq.n	8003d80 <HAL_I2C_Init+0xa0>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d1c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d20:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d22:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d24:	bf04      	itt	eq
 8003d26:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003d2a:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d2c:	6859      	ldr	r1, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d2e:	6922      	ldr	r2, [r4, #16]
 8003d30:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8003d34:	69a7      	ldr	r7, [r4, #24]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d36:	69e0      	ldr	r0, [r4, #28]
 8003d38:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d3a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003d3e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003d42:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d44:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d46:	ea42 020e 	orr.w	r2, r2, lr
 8003d4a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d4e:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d50:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 8003d54:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d56:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d58:	6018      	str	r0, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d5a:	6819      	ldr	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5c:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8003d5e:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8003d64:	6019      	str	r1, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003d66:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d68:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d6a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6e:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8003d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003d76:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003d7a:	f7fe f993 	bl	80020a4 <HAL_I2C_MspInit>
 8003d7e:	e7b9      	b.n	8003cf4 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d84:	609a      	str	r2, [r3, #8]
 8003d86:	e7d1      	b.n	8003d2c <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 8003d88:	2001      	movs	r0, #1
 8003d8a:	4770      	bx	lr

08003d8c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d001      	beq.n	8003d9a <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003d96:	2002      	movs	r0, #2
 8003d98:	4770      	bx	lr
 8003d9a:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003d9c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003da0:	2801      	cmp	r0, #1
 8003da2:	d0f8      	beq.n	8003d96 <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8003da4:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8003da6:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da8:	2424      	movs	r4, #36	; 0x24
 8003daa:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003dae:	6804      	ldr	r4, [r0, #0]
 8003db0:	f024 0401 	bic.w	r4, r4, #1
 8003db4:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003db6:	6804      	ldr	r4, [r0, #0]
 8003db8:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003dbc:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dbe:	6804      	ldr	r4, [r0, #0]
 8003dc0:	4321      	orrs	r1, r4
 8003dc2:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003dc4:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8003dc6:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8003dc8:	f041 0101 	orr.w	r1, r1, #1
 8003dcc:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8003dce:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003dd0:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop

08003de0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d001      	beq.n	8003dee <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003dea:	2002      	movs	r0, #2
 8003dec:	4770      	bx	lr
 8003dee:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003df0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003df4:	2801      	cmp	r0, #1
 8003df6:	d0f8      	beq.n	8003dea <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 8003df8:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8003dfa:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfc:	2424      	movs	r4, #36	; 0x24
 8003dfe:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003e02:	6804      	ldr	r4, [r0, #0]
 8003e04:	f024 0401 	bic.w	r4, r4, #1
 8003e08:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 8003e0a:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003e0c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003e10:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8003e14:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003e16:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8003e18:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8003e1a:	f041 0101 	orr.w	r1, r1, #1
 8003e1e:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8003e20:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003e22:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e30:	2800      	cmp	r0, #0
 8003e32:	f000 82de 	beq.w	80043f2 <HAL_RCC_OscConfig+0x5c2>
{
 8003e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3a:	6803      	ldr	r3, [r0, #0]
 8003e3c:	07d9      	lsls	r1, r3, #31
{
 8003e3e:	b083      	sub	sp, #12
 8003e40:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e42:	d543      	bpl.n	8003ecc <HAL_RCC_OscConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e44:	49b8      	ldr	r1, [pc, #736]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8003e46:	684a      	ldr	r2, [r1, #4]
 8003e48:	f002 020c 	and.w	r2, r2, #12
 8003e4c:	2a04      	cmp	r2, #4
 8003e4e:	f000 81b2 	beq.w	80041b6 <HAL_RCC_OscConfig+0x386>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e52:	684a      	ldr	r2, [r1, #4]
 8003e54:	f002 020c 	and.w	r2, r2, #12
 8003e58:	2a08      	cmp	r2, #8
 8003e5a:	f000 81a8 	beq.w	80041ae <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5e:	6863      	ldr	r3, [r4, #4]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	f000 821a 	beq.w	800429c <HAL_RCC_OscConfig+0x46c>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8163 	beq.w	8004134 <HAL_RCC_OscConfig+0x304>
 8003e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e72:	f000 82b1 	beq.w	80043d8 <HAL_RCC_OscConfig+0x5a8>
 8003e76:	4bac      	ldr	r3, [pc, #688]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e86:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e88:	4da7      	ldr	r5, [pc, #668]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8003e8a:	68a2      	ldr	r2, [r4, #8]
 8003e8c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003e8e:	f023 030f 	bic.w	r3, r3, #15
 8003e92:	4313      	orrs	r3, r2
 8003e94:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7ff f8d7 	bl	8003048 <HAL_GetTick>
 8003e9a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8003e9e:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea0:	2601      	movs	r6, #1
 8003ea2:	e005      	b.n	8003eb0 <HAL_RCC_OscConfig+0x80>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea4:	f7ff f8d0 	bl	8003048 <HAL_GetTick>
 8003ea8:	1bc0      	subs	r0, r0, r7
 8003eaa:	2864      	cmp	r0, #100	; 0x64
 8003eac:	f200 817b 	bhi.w	80041a6 <HAL_RCC_OscConfig+0x376>
 8003eb0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb4:	682a      	ldr	r2, [r5, #0]
 8003eb6:	fa98 f3a8 	rbit	r3, r8
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	fa06 f303 	lsl.w	r3, r6, r3
 8003ec6:	4213      	tst	r3, r2
 8003ec8:	d0ec      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x74>
 8003eca:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ecc:	079f      	lsls	r7, r3, #30
 8003ece:	d542      	bpl.n	8003f56 <HAL_RCC_OscConfig+0x126>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ed0:	4a95      	ldr	r2, [pc, #596]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8003ed2:	6851      	ldr	r1, [r2, #4]
 8003ed4:	f011 0f0c 	tst.w	r1, #12
 8003ed8:	f000 80ca 	beq.w	8004070 <HAL_RCC_OscConfig+0x240>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003edc:	6851      	ldr	r1, [r2, #4]
 8003ede:	f001 010c 	and.w	r1, r1, #12
 8003ee2:	2908      	cmp	r1, #8
 8003ee4:	f000 80c0 	beq.w	8004068 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee8:	6922      	ldr	r2, [r4, #16]
 8003eea:	2a00      	cmp	r2, #0
 8003eec:	f000 81b0 	beq.w	8004250 <HAL_RCC_OscConfig+0x420>
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f02:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8003f06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f08:	f7ff f89e 	bl	8003048 <HAL_GetTick>
 8003f0c:	f04f 0802 	mov.w	r8, #2
 8003f10:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4d85      	ldr	r5, [pc, #532]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8003f14:	e005      	b.n	8003f22 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f16:	f7ff f897 	bl	8003048 <HAL_GetTick>
 8003f1a:	1bc0      	subs	r0, r0, r7
 8003f1c:	2802      	cmp	r0, #2
 8003f1e:	f200 8142 	bhi.w	80041a6 <HAL_RCC_OscConfig+0x376>
 8003f22:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f26:	682a      	ldr	r2, [r5, #0]
 8003f28:	fa98 f3a8 	rbit	r3, r8
 8003f2c:	fab3 f383 	clz	r3, r3
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	fa06 f303 	lsl.w	r3, r6, r3
 8003f38:	4213      	tst	r3, r2
 8003f3a:	d0ec      	beq.n	8003f16 <HAL_RCC_OscConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3c:	6829      	ldr	r1, [r5, #0]
 8003f3e:	22f8      	movs	r2, #248	; 0xf8
 8003f40:	fa92 f2a2 	rbit	r2, r2
 8003f44:	6963      	ldr	r3, [r4, #20]
 8003f46:	fab2 f282 	clz	r2, r2
 8003f4a:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8003f4e:	4093      	lsls	r3, r2
 8003f50:	430b      	orrs	r3, r1
 8003f52:	602b      	str	r3, [r5, #0]
 8003f54:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f56:	071d      	lsls	r5, r3, #28
 8003f58:	d421      	bmi.n	8003f9e <HAL_RCC_OscConfig+0x16e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5a:	0758      	lsls	r0, r3, #29
 8003f5c:	d54d      	bpl.n	8003ffa <HAL_RCC_OscConfig+0x1ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b72      	ldr	r3, [pc, #456]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	00d1      	lsls	r1, r2, #3
 8003f64:	f140 80c2 	bpl.w	80040ec <HAL_RCC_OscConfig+0x2bc>
    FlagStatus       pwrclkchanged = RESET;
 8003f68:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	4d6f      	ldr	r5, [pc, #444]	; (800412c <HAL_RCC_OscConfig+0x2fc>)
 8003f6e:	682b      	ldr	r3, [r5, #0]
 8003f70:	05da      	lsls	r2, r3, #23
 8003f72:	f140 8108 	bpl.w	8004186 <HAL_RCC_OscConfig+0x356>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f000 81a6 	beq.w	80042ca <HAL_RCC_OscConfig+0x49a>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8130 	beq.w	80041e4 <HAL_RCC_OscConfig+0x3b4>
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	f000 81c8 	beq.w	800431e <HAL_RCC_OscConfig+0x4ee>
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	621a      	str	r2, [r3, #32]
 8003f94:	6a1a      	ldr	r2, [r3, #32]
 8003f96:	f022 0204 	bic.w	r2, r2, #4
 8003f9a:	621a      	str	r2, [r3, #32]
 8003f9c:	e19a      	b.n	80042d4 <HAL_RCC_OscConfig+0x4a4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f9e:	69a2      	ldr	r2, [r4, #24]
 8003fa0:	2a00      	cmp	r2, #0
 8003fa2:	d07c      	beq.n	800409e <HAL_RCC_OscConfig+0x26e>
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_RCC_OscConfig+0x300>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fac:	4e5e      	ldr	r6, [pc, #376]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_ENABLE();
 8003fae:	fab1 f181 	clz	r1, r1
 8003fb2:	440b      	add	r3, r1
 8003fb4:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8003fb8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003fba:	f7ff f845 	bl	8003048 <HAL_GetTick>
 8003fbe:	f04f 0802 	mov.w	r8, #2
 8003fc2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc4:	e005      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1a2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc6:	f7ff f83f 	bl	8003048 <HAL_GetTick>
 8003fca:	1bc0      	subs	r0, r0, r7
 8003fcc:	2802      	cmp	r0, #2
 8003fce:	f200 80ea 	bhi.w	80041a6 <HAL_RCC_OscConfig+0x376>
 8003fd2:	fa98 f3a8 	rbit	r3, r8
 8003fd6:	fa98 f3a8 	rbit	r3, r8
 8003fda:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003fe0:	fa98 f3a8 	rbit	r3, r8
 8003fe4:	fab3 f383 	clz	r3, r3
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa05 f303 	lsl.w	r3, r5, r3
 8003ff0:	4213      	tst	r3, r2
 8003ff2:	d0e8      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x196>
 8003ff4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff6:	0758      	lsls	r0, r3, #29
 8003ff8:	d4b1      	bmi.n	8003f5e <HAL_RCC_OscConfig+0x12e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffa:	69e0      	ldr	r0, [r4, #28]
 8003ffc:	b380      	cbz	r0, 8004060 <HAL_RCC_OscConfig+0x230>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffe:	4d4a      	ldr	r5, [pc, #296]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8004000:	686b      	ldr	r3, [r5, #4]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b08      	cmp	r3, #8
 8004008:	f000 814e 	beq.w	80042a8 <HAL_RCC_OscConfig+0x478>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800400c:	2802      	cmp	r0, #2
 800400e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004012:	f000 818c 	beq.w	800432e <HAL_RCC_OscConfig+0x4fe>
 8004016:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004022:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7ff f80c 	bl	8003048 <HAL_GetTick>
 8004030:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8004034:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004036:	2601      	movs	r6, #1
 8004038:	e005      	b.n	8004046 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403a:	f7ff f805 	bl	8003048 <HAL_GetTick>
 800403e:	1bc0      	subs	r0, r0, r7
 8004040:	2802      	cmp	r0, #2
 8004042:	f200 80b0 	bhi.w	80041a6 <HAL_RCC_OscConfig+0x376>
 8004046:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404a:	682a      	ldr	r2, [r5, #0]
 800404c:	fa94 f3a4 	rbit	r3, r4
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	fa06 f303 	lsl.w	r3, r6, r3
 800405c:	4213      	tst	r3, r2
 800405e:	d1ec      	bne.n	800403a <HAL_RCC_OscConfig+0x20a>
        }
      }
    }
  }

  return HAL_OK;
 8004060:	2000      	movs	r0, #0
}
 8004062:	b003      	add	sp, #12
 8004064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004068:	6852      	ldr	r2, [r2, #4]
 800406a:	03d6      	lsls	r6, r2, #15
 800406c:	f53f af3c 	bmi.w	8003ee8 <HAL_RCC_OscConfig+0xb8>
 8004070:	2202      	movs	r2, #2
 8004072:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004076:	492c      	ldr	r1, [pc, #176]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8004078:	6808      	ldr	r0, [r1, #0]
 800407a:	fa92 f2a2 	rbit	r2, r2
 800407e:	fab2 f282 	clz	r2, r2
 8004082:	f002 021f 	and.w	r2, r2, #31
 8004086:	2101      	movs	r1, #1
 8004088:	fa01 f202 	lsl.w	r2, r1, r2
 800408c:	4202      	tst	r2, r0
 800408e:	d039      	beq.n	8004104 <HAL_RCC_OscConfig+0x2d4>
 8004090:	6922      	ldr	r2, [r4, #16]
 8004092:	428a      	cmp	r2, r1
 8004094:	d036      	beq.n	8004104 <HAL_RCC_OscConfig+0x2d4>
        return HAL_ERROR;
 8004096:	2001      	movs	r0, #1
}
 8004098:	b003      	add	sp, #12
 800409a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800409e:	2501      	movs	r5, #1
 80040a0:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_OscConfig+0x300>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a6:	4e20      	ldr	r6, [pc, #128]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_DISABLE();
 80040a8:	fab1 f181 	clz	r1, r1
 80040ac:	440b      	add	r3, r1
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	f04f 0802 	mov.w	r8, #2
 80040b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80040b6:	f7fe ffc7 	bl	8003048 <HAL_GetTick>
 80040ba:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040bc:	e004      	b.n	80040c8 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040be:	f7fe ffc3 	bl	8003048 <HAL_GetTick>
 80040c2:	1bc0      	subs	r0, r0, r7
 80040c4:	2802      	cmp	r0, #2
 80040c6:	d86e      	bhi.n	80041a6 <HAL_RCC_OscConfig+0x376>
 80040c8:	fa98 f3a8 	rbit	r3, r8
 80040cc:	fa98 f3a8 	rbit	r3, r8
 80040d0:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80040d6:	fa98 f3a8 	rbit	r3, r8
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	fa05 f303 	lsl.w	r3, r5, r3
 80040e6:	4213      	tst	r3, r2
 80040e8:	d1e9      	bne.n	80040be <HAL_RCC_OscConfig+0x28e>
 80040ea:	e783      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040f2:	61da      	str	r2, [r3, #28]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80040fe:	f04f 0801 	mov.w	r8, #1
 8004102:	e733      	b.n	8003f6c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4d08      	ldr	r5, [pc, #32]	; (8004128 <HAL_RCC_OscConfig+0x2f8>)
 8004106:	21f8      	movs	r1, #248	; 0xf8
 8004108:	6828      	ldr	r0, [r5, #0]
 800410a:	fa91 f1a1 	rbit	r1, r1
 800410e:	6962      	ldr	r2, [r4, #20]
 8004110:	fab1 f181 	clz	r1, r1
 8004114:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8004118:	408a      	lsls	r2, r1
 800411a:	4302      	orrs	r2, r0
 800411c:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	071d      	lsls	r5, r3, #28
 8004120:	f57f af1b 	bpl.w	8003f5a <HAL_RCC_OscConfig+0x12a>
 8004124:	e73b      	b.n	8003f9e <HAL_RCC_OscConfig+0x16e>
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
 8004130:	10908120 	.word	0x10908120
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004134:	4db0      	ldr	r5, [pc, #704]	; (80043f8 <HAL_RCC_OscConfig+0x5c8>)
 8004136:	682b      	ldr	r3, [r5, #0]
 8004138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413c:	602b      	str	r3, [r5, #0]
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004144:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004146:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004148:	68a2      	ldr	r2, [r4, #8]
 800414a:	f023 030f 	bic.w	r3, r3, #15
 800414e:	4313      	orrs	r3, r2
 8004150:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8004152:	f7fe ff79 	bl	8003048 <HAL_GetTick>
 8004156:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 800415a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415c:	2601      	movs	r6, #1
 800415e:	e004      	b.n	800416a <HAL_RCC_OscConfig+0x33a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7fe ff72 	bl	8003048 <HAL_GetTick>
 8004164:	1bc0      	subs	r0, r0, r7
 8004166:	2864      	cmp	r0, #100	; 0x64
 8004168:	d81d      	bhi.n	80041a6 <HAL_RCC_OscConfig+0x376>
 800416a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	682a      	ldr	r2, [r5, #0]
 8004170:	fa98 f3a8 	rbit	r3, r8
 8004174:	fab3 f383 	clz	r3, r3
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	fa06 f303 	lsl.w	r3, r6, r3
 8004180:	4213      	tst	r3, r2
 8004182:	d1ed      	bne.n	8004160 <HAL_RCC_OscConfig+0x330>
 8004184:	e6a1      	b.n	8003eca <HAL_RCC_OscConfig+0x9a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800418e:	f7fe ff5b 	bl	8003048 <HAL_GetTick>
 8004192:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	05db      	lsls	r3, r3, #23
 8004198:	f53f aeed 	bmi.w	8003f76 <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419c:	f7fe ff54 	bl	8003048 <HAL_GetTick>
 80041a0:	1b80      	subs	r0, r0, r6
 80041a2:	2864      	cmp	r0, #100	; 0x64
 80041a4:	d9f6      	bls.n	8004194 <HAL_RCC_OscConfig+0x364>
            return HAL_TIMEOUT;
 80041a6:	2003      	movs	r0, #3
}
 80041a8:	b003      	add	sp, #12
 80041aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041ae:	684a      	ldr	r2, [r1, #4]
 80041b0:	03d2      	lsls	r2, r2, #15
 80041b2:	f57f ae54 	bpl.w	8003e5e <HAL_RCC_OscConfig+0x2e>
 80041b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041ba:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041be:	498e      	ldr	r1, [pc, #568]	; (80043f8 <HAL_RCC_OscConfig+0x5c8>)
 80041c0:	6808      	ldr	r0, [r1, #0]
 80041c2:	fa92 f2a2 	rbit	r2, r2
 80041c6:	fab2 f282 	clz	r2, r2
 80041ca:	f002 021f 	and.w	r2, r2, #31
 80041ce:	2101      	movs	r1, #1
 80041d0:	fa01 f202 	lsl.w	r2, r1, r2
 80041d4:	4202      	tst	r2, r0
 80041d6:	f43f ae79 	beq.w	8003ecc <HAL_RCC_OscConfig+0x9c>
 80041da:	6862      	ldr	r2, [r4, #4]
 80041dc:	2a00      	cmp	r2, #0
 80041de:	f47f ae75 	bne.w	8003ecc <HAL_RCC_OscConfig+0x9c>
 80041e2:	e758      	b.n	8004096 <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e4:	4d84      	ldr	r5, [pc, #528]	; (80043f8 <HAL_RCC_OscConfig+0x5c8>)
 80041e6:	6a2b      	ldr	r3, [r5, #32]
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	622b      	str	r3, [r5, #32]
 80041ee:	6a2b      	ldr	r3, [r5, #32]
 80041f0:	f023 0304 	bic.w	r3, r3, #4
 80041f4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80041f6:	f7fe ff27 	bl	8003048 <HAL_GetTick>
 80041fa:	f04f 0902 	mov.w	r9, #2
 80041fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004200:	2601      	movs	r6, #1
 8004202:	e013      	b.n	800422c <HAL_RCC_OscConfig+0x3fc>
 8004204:	fa99 f3a9 	rbit	r3, r9
 8004208:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800420a:	fa99 f3a9 	rbit	r3, r9
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	fa06 f303 	lsl.w	r3, r6, r3
 800421a:	4213      	tst	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_RCC_OscConfig+0x40c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fe ff13 	bl	8003048 <HAL_GetTick>
 8004222:	f241 3388 	movw	r3, #5000	; 0x1388
 8004226:	1bc0      	subs	r0, r0, r7
 8004228:	4298      	cmp	r0, r3
 800422a:	d8bc      	bhi.n	80041a6 <HAL_RCC_OscConfig+0x376>
 800422c:	fa99 f3a9 	rbit	r3, r9
 8004230:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0e5      	beq.n	8004204 <HAL_RCC_OscConfig+0x3d4>
 8004238:	6a2a      	ldr	r2, [r5, #32]
 800423a:	e7e6      	b.n	800420a <HAL_RCC_OscConfig+0x3da>
    if(pwrclkchanged == SET)
 800423c:	f1b8 0f00 	cmp.w	r8, #0
 8004240:	f43f aedb 	beq.w	8003ffa <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4a6c      	ldr	r2, [pc, #432]	; (80043f8 <HAL_RCC_OscConfig+0x5c8>)
 8004246:	69d3      	ldr	r3, [r2, #28]
 8004248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424c:	61d3      	str	r3, [r2, #28]
 800424e:	e6d4      	b.n	8003ffa <HAL_RCC_OscConfig+0x1ca>
 8004250:	2501      	movs	r5, #1
 8004252:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800425e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	f04f 0802 	mov.w	r8, #2
 8004268:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800426a:	f7fe feed 	bl	8003048 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	4e62      	ldr	r6, [pc, #392]	; (80043f8 <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 8004270:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	e004      	b.n	800427e <HAL_RCC_OscConfig+0x44e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004274:	f7fe fee8 	bl	8003048 <HAL_GetTick>
 8004278:	1bc0      	subs	r0, r0, r7
 800427a:	2802      	cmp	r0, #2
 800427c:	d893      	bhi.n	80041a6 <HAL_RCC_OscConfig+0x376>
 800427e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	6832      	ldr	r2, [r6, #0]
 8004284:	fa98 f3a8 	rbit	r3, r8
 8004288:	fab3 f383 	clz	r3, r3
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa05 f303 	lsl.w	r3, r5, r3
 8004294:	4213      	tst	r3, r2
 8004296:	d1ed      	bne.n	8004274 <HAL_RCC_OscConfig+0x444>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	e65c      	b.n	8003f56 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429c:	4a56      	ldr	r2, [pc, #344]	; (80043f8 <HAL_RCC_OscConfig+0x5c8>)
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e5ef      	b.n	8003e88 <HAL_RCC_OscConfig+0x58>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a8:	2801      	cmp	r0, #1
 80042aa:	f43f aeda 	beq.w	8004062 <HAL_RCC_OscConfig+0x232>
        pll_config = RCC->CFGR;
 80042ae:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042b0:	6a22      	ldr	r2, [r4, #32]
 80042b2:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80042b6:	4291      	cmp	r1, r2
 80042b8:	f47f aeed 	bne.w	8004096 <HAL_RCC_OscConfig+0x266>
 80042bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042be:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 80042c2:	1a18      	subs	r0, r3, r0
 80042c4:	bf18      	it	ne
 80042c6:	2001      	movne	r0, #1
 80042c8:	e6cb      	b.n	8004062 <HAL_RCC_OscConfig+0x232>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ca:	4a4b      	ldr	r2, [pc, #300]	; (80043f8 <HAL_RCC_OscConfig+0x5c8>)
 80042cc:	6a13      	ldr	r3, [r2, #32]
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80042d4:	f7fe feb8 	bl	8003048 <HAL_GetTick>
 80042d8:	f04f 0902 	mov.w	r9, #2
 80042dc:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	4e46      	ldr	r6, [pc, #280]	; (80043f8 <HAL_RCC_OscConfig+0x5c8>)
 80042e0:	2501      	movs	r5, #1
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x4de>
 80042e4:	fa99 f3a9 	rbit	r3, r9
 80042e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80042ea:	fa99 f3a9 	rbit	r3, r9
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	fa05 f303 	lsl.w	r3, r5, r3
 80042fa:	4213      	tst	r3, r2
 80042fc:	d19e      	bne.n	800423c <HAL_RCC_OscConfig+0x40c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fe fea3 	bl	8003048 <HAL_GetTick>
 8004302:	f241 3388 	movw	r3, #5000	; 0x1388
 8004306:	1bc0      	subs	r0, r0, r7
 8004308:	4298      	cmp	r0, r3
 800430a:	f63f af4c 	bhi.w	80041a6 <HAL_RCC_OscConfig+0x376>
 800430e:	fa99 f3a9 	rbit	r3, r9
 8004312:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0e4      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4b4>
 800431a:	6a32      	ldr	r2, [r6, #32]
 800431c:	e7e5      	b.n	80042ea <HAL_RCC_OscConfig+0x4ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431e:	f042 0204 	orr.w	r2, r2, #4
 8004322:	621a      	str	r2, [r3, #32]
 8004324:	6a1a      	ldr	r2, [r3, #32]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	621a      	str	r2, [r3, #32]
 800432c:	e7d2      	b.n	80042d4 <HAL_RCC_OscConfig+0x4a4>
 800432e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800433a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004344:	f7fe fe80 	bl	8003048 <HAL_GetTick>
 8004348:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800434c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434e:	2601      	movs	r6, #1
 8004350:	e005      	b.n	800435e <HAL_RCC_OscConfig+0x52e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004352:	f7fe fe79 	bl	8003048 <HAL_GetTick>
 8004356:	1bc0      	subs	r0, r0, r7
 8004358:	2802      	cmp	r0, #2
 800435a:	f63f af24 	bhi.w	80041a6 <HAL_RCC_OscConfig+0x376>
 800435e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004362:	682a      	ldr	r2, [r5, #0]
 8004364:	fa98 f3a8 	rbit	r3, r8
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	fa06 f303 	lsl.w	r3, r6, r3
 8004374:	4213      	tst	r3, r2
 8004376:	d1ec      	bne.n	8004352 <HAL_RCC_OscConfig+0x522>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004378:	686a      	ldr	r2, [r5, #4]
 800437a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800437c:	6a21      	ldr	r1, [r4, #32]
 800437e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004382:	430b      	orrs	r3, r1
 8004384:	4313      	orrs	r3, r2
 8004386:	606b      	str	r3, [r5, #4]
 8004388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800438c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80043a2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80043a4:	f7fe fe50 	bl	8003048 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043a8:	4e13      	ldr	r6, [pc, #76]	; (80043f8 <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 80043aa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ac:	2501      	movs	r5, #1
 80043ae:	e005      	b.n	80043bc <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fe fe4a 	bl	8003048 <HAL_GetTick>
 80043b4:	1bc0      	subs	r0, r0, r7
 80043b6:	2802      	cmp	r0, #2
 80043b8:	f63f aef5 	bhi.w	80041a6 <HAL_RCC_OscConfig+0x376>
 80043bc:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043c0:	6832      	ldr	r2, [r6, #0]
 80043c2:	fa94 f3a4 	rbit	r3, r4
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	fa05 f303 	lsl.w	r3, r5, r3
 80043d2:	4213      	tst	r3, r2
 80043d4:	d0ec      	beq.n	80043b0 <HAL_RCC_OscConfig+0x580>
 80043d6:	e643      	b.n	8004060 <HAL_RCC_OscConfig+0x230>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043dc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e54a      	b.n	8003e88 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 80043f2:	2001      	movs	r0, #1
}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000

080043fc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fc:	b178      	cbz	r0, 800441e <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043fe:	4a66      	ldr	r2, [pc, #408]	; (8004598 <HAL_RCC_ClockConfig+0x19c>)
 8004400:	6813      	ldr	r3, [r2, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	428b      	cmp	r3, r1
 8004408:	d20b      	bcs.n	8004422 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	f023 0307 	bic.w	r3, r3, #7
 8004410:	430b      	orrs	r3, r1
 8004412:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	4299      	cmp	r1, r3
 800441c:	d001      	beq.n	8004422 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800441e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8004420:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004422:	6803      	ldr	r3, [r0, #0]
{
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	079f      	lsls	r7, r3, #30
 800442a:	d506      	bpl.n	800443a <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442c:	4c5b      	ldr	r4, [pc, #364]	; (800459c <HAL_RCC_ClockConfig+0x1a0>)
 800442e:	6885      	ldr	r5, [r0, #8]
 8004430:	6862      	ldr	r2, [r4, #4]
 8004432:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004436:	432a      	orrs	r2, r5
 8004438:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443a:	07de      	lsls	r6, r3, #31
 800443c:	4604      	mov	r4, r0
 800443e:	460d      	mov	r5, r1
 8004440:	d530      	bpl.n	80044a4 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004442:	6842      	ldr	r2, [r0, #4]
 8004444:	2a01      	cmp	r2, #1
 8004446:	f000 8094 	beq.w	8004572 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800444a:	2a02      	cmp	r2, #2
 800444c:	bf0c      	ite	eq
 800444e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8004452:	2302      	movne	r3, #2
 8004454:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	4950      	ldr	r1, [pc, #320]	; (800459c <HAL_RCC_ClockConfig+0x1a0>)
 800445a:	6808      	ldr	r0, [r1, #0]
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2101      	movs	r1, #1
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	4203      	tst	r3, r0
 8004470:	d028      	beq.n	80044c4 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004472:	4e4a      	ldr	r6, [pc, #296]	; (800459c <HAL_RCC_ClockConfig+0x1a0>)
 8004474:	6873      	ldr	r3, [r6, #4]
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	4313      	orrs	r3, r2
 800447c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800447e:	f7fe fde3 	bl	8003048 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004482:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004486:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004488:	e005      	b.n	8004496 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448a:	f7fe fddd 	bl	8003048 <HAL_GetTick>
 800448e:	eba0 0008 	sub.w	r0, r0, r8
 8004492:	42b8      	cmp	r0, r7
 8004494:	d86a      	bhi.n	800456c <HAL_RCC_ClockConfig+0x170>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	6873      	ldr	r3, [r6, #4]
 8004498:	6862      	ldr	r2, [r4, #4]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80044a2:	d1f2      	bne.n	800448a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a4:	4a3c      	ldr	r2, [pc, #240]	; (8004598 <HAL_RCC_ClockConfig+0x19c>)
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	429d      	cmp	r5, r3
 80044ae:	d20c      	bcs.n	80044ca <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b0:	6813      	ldr	r3, [r2, #0]
 80044b2:	f023 0307 	bic.w	r3, r3, #7
 80044b6:	432b      	orrs	r3, r5
 80044b8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	429d      	cmp	r5, r3
 80044c2:	d002      	beq.n	80044ca <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 80044c4:	2001      	movs	r0, #1
 80044c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	0758      	lsls	r0, r3, #29
 80044ce:	d506      	bpl.n	80044de <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d0:	4932      	ldr	r1, [pc, #200]	; (800459c <HAL_RCC_ClockConfig+0x1a0>)
 80044d2:	68e0      	ldr	r0, [r4, #12]
 80044d4:	684a      	ldr	r2, [r1, #4]
 80044d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044da:	4302      	orrs	r2, r0
 80044dc:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044de:	0719      	lsls	r1, r3, #28
 80044e0:	d507      	bpl.n	80044f2 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e2:	4a2e      	ldr	r2, [pc, #184]	; (800459c <HAL_RCC_ClockConfig+0x1a0>)
 80044e4:	6921      	ldr	r1, [r4, #16]
 80044e6:	6853      	ldr	r3, [r2, #4]
 80044e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80044ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044f0:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80044f2:	4b2a      	ldr	r3, [pc, #168]	; (800459c <HAL_RCC_ClockConfig+0x1a0>)
 80044f4:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044f6:	f002 010c 	and.w	r1, r2, #12
 80044fa:	2908      	cmp	r1, #8
 80044fc:	d017      	beq.n	800452e <HAL_RCC_ClockConfig+0x132>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044fe:	4928      	ldr	r1, [pc, #160]	; (80045a0 <HAL_RCC_ClockConfig+0x1a4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004500:	4b26      	ldr	r3, [pc, #152]	; (800459c <HAL_RCC_ClockConfig+0x1a0>)
 8004502:	22f0      	movs	r2, #240	; 0xf0
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	fa92 f2a2 	rbit	r2, r2
 800450a:	fab2 f282 	clz	r2, r2
 800450e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004512:	40d3      	lsrs	r3, r2
 8004514:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 8004516:	4824      	ldr	r0, [pc, #144]	; (80045a8 <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004518:	5cd3      	ldrb	r3, [r2, r3]
 800451a:	4a24      	ldr	r2, [pc, #144]	; (80045ac <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 800451c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800451e:	fa21 f303 	lsr.w	r3, r1, r3
 8004522:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8004524:	f7fe fd4e 	bl	8002fc4 <HAL_InitTick>
  return HAL_OK;
 8004528:	2000      	movs	r0, #0
 800452a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800452e:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8004532:	fa91 f1a1 	rbit	r1, r1
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004536:	fab1 f181 	clz	r1, r1
 800453a:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 800453e:	40c8      	lsrs	r0, r1
 8004540:	4c1b      	ldr	r4, [pc, #108]	; (80045b0 <HAL_RCC_ClockConfig+0x1b4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004542:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004544:	5c23      	ldrb	r3, [r4, r0]
 8004546:	200f      	movs	r0, #15
 8004548:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800454c:	fab0 f080 	clz	r0, r0
 8004550:	f001 010f 	and.w	r1, r1, #15
 8004554:	40c1      	lsrs	r1, r0
 8004556:	4817      	ldr	r0, [pc, #92]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004558:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800455a:	5c40      	ldrb	r0, [r0, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800455c:	bf4a      	itet	mi
 800455e:	4910      	ldrmi	r1, [pc, #64]	; (80045a0 <HAL_RCC_ClockConfig+0x1a4>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004560:	4915      	ldrpl	r1, [pc, #84]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004562:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004566:	fb01 f103 	mul.w	r1, r1, r3
 800456a:	e7c9      	b.n	8004500 <HAL_RCC_ClockConfig+0x104>
        return HAL_TIMEOUT;
 800456c:	2003      	movs	r0, #3
}
 800456e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004576:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4908      	ldr	r1, [pc, #32]	; (800459c <HAL_RCC_ClockConfig+0x1a0>)
 800457c:	6809      	ldr	r1, [r1, #0]
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	fab3 f383 	clz	r3, r3
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	420b      	tst	r3, r1
 8004590:	f47f af6f 	bne.w	8004472 <HAL_RCC_ClockConfig+0x76>
 8004594:	e796      	b.n	80044c4 <HAL_RCC_ClockConfig+0xc8>
 8004596:	bf00      	nop
 8004598:	40022000 	.word	0x40022000
 800459c:	40021000 	.word	0x40021000
 80045a0:	007a1200 	.word	0x007a1200
 80045a4:	08007ccc 	.word	0x08007ccc
 80045a8:	20000704 	.word	0x20000704
 80045ac:	200006fc 	.word	0x200006fc
 80045b0:	08007ce4 	.word	0x08007ce4
 80045b4:	08007cf4 	.word	0x08007cf4
 80045b8:	003d0900 	.word	0x003d0900

080045bc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80045bc:	4a14      	ldr	r2, [pc, #80]	; (8004610 <HAL_RCC_GetSysClockFreq+0x54>)
 80045be:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80045c0:	f003 010c 	and.w	r1, r3, #12
 80045c4:	2908      	cmp	r1, #8
 80045c6:	d121      	bne.n	800460c <HAL_RCC_GetSysClockFreq+0x50>
 80045c8:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80045cc:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045d0:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80045d4:	fab1 f181 	clz	r1, r1
 80045d8:	fa20 f101 	lsr.w	r1, r0, r1
 80045dc:	480d      	ldr	r0, [pc, #52]	; (8004614 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045e0:	5c40      	ldrb	r0, [r0, r1]
 80045e2:	210f      	movs	r1, #15
 80045e4:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045e8:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045ea:	fab1 f181 	clz	r1, r1
 80045ee:	f002 020f 	and.w	r2, r2, #15
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045f2:	bf4c      	ite	mi
 80045f4:	4b08      	ldrmi	r3, [pc, #32]	; (8004618 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045f6:	4b09      	ldrpl	r3, [pc, #36]	; (800461c <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045f8:	fa22 f201 	lsr.w	r2, r2, r1
 80045fc:	4908      	ldr	r1, [pc, #32]	; (8004620 <HAL_RCC_GetSysClockFreq+0x64>)
 80045fe:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004600:	bf48      	it	mi
 8004602:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004606:	fb03 f000 	mul.w	r0, r3, r0
 800460a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800460c:	4802      	ldr	r0, [pc, #8]	; (8004618 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800460e:	4770      	bx	lr
 8004610:	40021000 	.word	0x40021000
 8004614:	08007ce4 	.word	0x08007ce4
 8004618:	007a1200 	.word	0x007a1200
 800461c:	003d0900 	.word	0x003d0900
 8004620:	08007cf4 	.word	0x08007cf4

08004624 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004624:	4b01      	ldr	r3, [pc, #4]	; (800462c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	200006fc 	.word	0x200006fc

08004630 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004632:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	fa92 f2a2 	rbit	r2, r2
 800463c:	fab2 f282 	clz	r2, r2
 8004640:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004644:	40d3      	lsrs	r3, r2
 8004646:	4904      	ldr	r1, [pc, #16]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8004648:	4a04      	ldr	r2, [pc, #16]	; (800465c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	6810      	ldr	r0, [r2, #0]
}    
 800464e:	40d8      	lsrs	r0, r3
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40021000 	.word	0x40021000
 8004658:	08007cdc 	.word	0x08007cdc
 800465c:	200006fc 	.word	0x200006fc

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004660:	4b08      	ldr	r3, [pc, #32]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004662:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	fa92 f2a2 	rbit	r2, r2
 800466c:	fab2 f282 	clz	r2, r2
 8004670:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004674:	40d3      	lsrs	r3, r2
 8004676:	4904      	ldr	r1, [pc, #16]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800467a:	5ccb      	ldrb	r3, [r1, r3]
 800467c:	6810      	ldr	r0, [r2, #0]
} 
 800467e:	40d8      	lsrs	r0, r3
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	08007cdc 	.word	0x08007cdc
 800468c:	200006fc 	.word	0x200006fc

08004690 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004694:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004696:	6800      	ldr	r0, [r0, #0]
 8004698:	03c5      	lsls	r5, r0, #15
{
 800469a:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800469c:	d53c      	bpl.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469e:	4b79      	ldr	r3, [pc, #484]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	00d1      	lsls	r1, r2, #3
 80046a4:	f140 80a1 	bpl.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	4d77      	ldr	r5, [pc, #476]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 80046ae:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b2:	f140 80aa 	bpl.w	800480a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b6:	4d73      	ldr	r5, [pc, #460]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80046b8:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ba:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80046be:	d020      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80046c0:	6861      	ldr	r1, [r4, #4]
 80046c2:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01c      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ca:	6a29      	ldr	r1, [r5, #32]
 80046cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046d0:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80046d4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046d8:	4f6c      	ldr	r7, [pc, #432]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80046da:	fab2 f282 	clz	r2, r2
 80046de:	443a      	add	r2, r7
 80046e0:	0092      	lsls	r2, r2, #2
 80046e2:	f04f 0e01 	mov.w	lr, #1
 80046e6:	f8c2 e000 	str.w	lr, [r2]
 80046ea:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	443b      	add	r3, r7
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046f8:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046fa:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80046fc:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046fe:	f100 809b 	bmi.w	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004702:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004704:	4a5f      	ldr	r2, [pc, #380]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004706:	6a13      	ldr	r3, [r2, #32]
 8004708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470c:	430b      	orrs	r3, r1
 800470e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004710:	2e00      	cmp	r6, #0
 8004712:	f040 808c 	bne.w	800482e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004716:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004718:	07c5      	lsls	r5, r0, #31
 800471a:	d506      	bpl.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800471c:	4a59      	ldr	r2, [pc, #356]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800471e:	68a1      	ldr	r1, [r4, #8]
 8004720:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	430b      	orrs	r3, r1
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800472a:	0681      	lsls	r1, r0, #26
 800472c:	d506      	bpl.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800472e:	4a55      	ldr	r2, [pc, #340]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004730:	68e1      	ldr	r1, [r4, #12]
 8004732:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004734:	f023 0310 	bic.w	r3, r3, #16
 8004738:	430b      	orrs	r3, r1
 800473a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800473c:	0382      	lsls	r2, r0, #14
 800473e:	d506      	bpl.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004740:	4a50      	ldr	r2, [pc, #320]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004742:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004744:	6853      	ldr	r3, [r2, #4]
 8004746:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800474a:	430b      	orrs	r3, r1
 800474c:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800474e:	0643      	lsls	r3, r0, #25
 8004750:	d506      	bpl.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004752:	4a4c      	ldr	r2, [pc, #304]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004754:	6921      	ldr	r1, [r4, #16]
 8004756:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004758:	f023 0320 	bic.w	r3, r3, #32
 800475c:	430b      	orrs	r3, r1
 800475e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004760:	0407      	lsls	r7, r0, #16
 8004762:	d506      	bpl.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004764:	4a47      	ldr	r2, [pc, #284]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004766:	6961      	ldr	r1, [r4, #20]
 8004768:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800476a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476e:	430b      	orrs	r3, r1
 8004770:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004772:	0586      	lsls	r6, r0, #22
 8004774:	d506      	bpl.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004776:	4a43      	ldr	r2, [pc, #268]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004778:	69e1      	ldr	r1, [r4, #28]
 800477a:	6853      	ldr	r3, [r2, #4]
 800477c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004780:	430b      	orrs	r3, r1
 8004782:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004784:	0605      	lsls	r5, r0, #24
 8004786:	d506      	bpl.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004788:	4a3e      	ldr	r2, [pc, #248]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800478a:	69a1      	ldr	r1, [r4, #24]
 800478c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800478e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8004792:	430b      	orrs	r3, r1
 8004794:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004796:	04c1      	lsls	r1, r0, #19
 8004798:	d506      	bpl.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800479a:	4a3a      	ldr	r2, [pc, #232]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800479c:	6a21      	ldr	r1, [r4, #32]
 800479e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80047a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80047a8:	0342      	lsls	r2, r0, #13
 80047aa:	d506      	bpl.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80047ac:	4a35      	ldr	r2, [pc, #212]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80047ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80047b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80047b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b6:	430b      	orrs	r3, r1
 80047b8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80047ba:	0303      	lsls	r3, r0, #12
 80047bc:	d40d      	bmi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x14a>
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80047be:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 80047c2:	d007      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80047c4:	4a2f      	ldr	r2, [pc, #188]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80047c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80047c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80047ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ce:	430b      	orrs	r3, r1
 80047d0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80047d2:	2000      	movs	r0, #0
}
 80047d4:	b003      	add	sp, #12
 80047d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80047da:	4a2a      	ldr	r2, [pc, #168]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80047dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80047de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80047e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6313      	str	r3, [r2, #48]	; 0x30
 80047e8:	e7e9      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	4d26      	ldr	r5, [pc, #152]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047f2:	61da      	str	r2, [r3, #28]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 8004802:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	f53f af56 	bmi.w	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800480a:	682b      	ldr	r3, [r5, #0]
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004812:	f7fe fc19 	bl	8003048 <HAL_GetTick>
 8004816:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	05db      	lsls	r3, r3, #23
 800481c:	f53f af4b 	bmi.w	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004820:	f7fe fc12 	bl	8003048 <HAL_GetTick>
 8004824:	1bc0      	subs	r0, r0, r7
 8004826:	2864      	cmp	r0, #100	; 0x64
 8004828:	d9f6      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x188>
          return HAL_TIMEOUT;
 800482a:	2003      	movs	r0, #3
 800482c:	e7d2      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 800482e:	69d3      	ldr	r3, [r2, #28]
 8004830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004834:	61d3      	str	r3, [r2, #28]
 8004836:	e76e      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x86>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 800483a:	f7fe fc05 	bl	8003048 <HAL_GetTick>
 800483e:	f04f 0902 	mov.w	r9, #2
 8004842:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	e015      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004846:	fa99 f3a9 	rbit	r3, r9
 800484a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800484c:	fa99 f3a9 	rbit	r3, r9
 8004850:	fab3 f383 	clz	r3, r3
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa07 f303 	lsl.w	r3, r7, r3
 800485c:	4213      	tst	r3, r2
 800485e:	f47f af50 	bne.w	8004702 <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004862:	f7fe fbf1 	bl	8003048 <HAL_GetTick>
 8004866:	f241 3388 	movw	r3, #5000	; 0x1388
 800486a:	eba0 0008 	sub.w	r0, r0, r8
 800486e:	4298      	cmp	r0, r3
 8004870:	d8db      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004872:	fa99 f3a9 	rbit	r3, r9
 8004876:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0e3      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800487e:	6a2a      	ldr	r2, [r5, #32]
 8004880:	e7e4      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
 800488c:	10908100 	.word	0x10908100

08004890 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	2800      	cmp	r0, #0
 8004892:	d05b      	beq.n	800494c <HAL_TIM_Base_Init+0xbc>
{
 8004894:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004896:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800489a:	4604      	mov	r4, r0
 800489c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d035      	beq.n	8004910 <HAL_TIM_Base_Init+0x80>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a6:	492a      	ldr	r1, [pc, #168]	; (8004950 <HAL_TIM_Base_Init+0xc0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	2202      	movs	r2, #2
 80048aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ae:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80048b0:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b2:	d032      	beq.n	800491a <HAL_TIM_Base_Init+0x8a>
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d036      	beq.n	8004928 <HAL_TIM_Base_Init+0x98>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ba:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 80048be:	428b      	cmp	r3, r1
 80048c0:	d016      	beq.n	80048f0 <HAL_TIM_Base_Init+0x60>
 80048c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80048c6:	428b      	cmp	r3, r1
 80048c8:	d012      	beq.n	80048f0 <HAL_TIM_Base_Init+0x60>
 80048ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80048ce:	428b      	cmp	r3, r1
 80048d0:	d00e      	beq.n	80048f0 <HAL_TIM_Base_Init+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d2:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d4:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d6:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048dc:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80048de:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e0:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048e2:	6299      	str	r1, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e4:	2201      	movs	r2, #1
 80048e6:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 80048e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80048ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80048f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f8:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048fe:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8004900:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004902:	68e2      	ldr	r2, [r4, #12]
 8004904:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004906:	6862      	ldr	r2, [r4, #4]
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800490a:	6962      	ldr	r2, [r4, #20]
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
 800490e:	e7e9      	b.n	80048e4 <HAL_TIM_Base_Init+0x54>
    htim->Lock = HAL_UNLOCKED;
 8004910:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004914:	f7fd fc18 	bl	8002148 <HAL_TIM_Base_MspInit>
 8004918:	e7c4      	b.n	80048a4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800491a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800491c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800491e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004920:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004924:	432a      	orrs	r2, r5
 8004926:	e7e5      	b.n	80048f4 <HAL_TIM_Base_Init+0x64>
 8004928:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800492c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800492e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004932:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004934:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004938:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800493a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800493e:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8004940:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004942:	68e2      	ldr	r2, [r4, #12]
 8004944:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
 800494a:	e7cb      	b.n	80048e4 <HAL_TIM_Base_Init+0x54>
    return HAL_ERROR;
 800494c:	2001      	movs	r0, #1
 800494e:	4770      	bx	lr
 8004950:	40012c00 	.word	0x40012c00

08004954 <HAL_TIM_PWM_MspInit>:
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop

08004958 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004958:	2800      	cmp	r0, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_TIM_PWM_Init+0xbc>
{
 800495c:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800495e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004962:	4604      	mov	r4, r0
 8004964:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004968:	2b00      	cmp	r3, #0
 800496a:	d035      	beq.n	80049d8 <HAL_TIM_PWM_Init+0x80>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800496e:	492a      	ldr	r1, [pc, #168]	; (8004a18 <HAL_TIM_PWM_Init+0xc0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	2202      	movs	r2, #2
 8004972:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004976:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8004978:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800497a:	d032      	beq.n	80049e2 <HAL_TIM_PWM_Init+0x8a>
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004980:	d036      	beq.n	80049f0 <HAL_TIM_PWM_Init+0x98>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004982:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8004986:	428b      	cmp	r3, r1
 8004988:	d016      	beq.n	80049b8 <HAL_TIM_PWM_Init+0x60>
 800498a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800498e:	428b      	cmp	r3, r1
 8004990:	d012      	beq.n	80049b8 <HAL_TIM_PWM_Init+0x60>
 8004992:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004996:	428b      	cmp	r3, r1
 8004998:	d00e      	beq.n	80049b8 <HAL_TIM_PWM_Init+0x60>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800499a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800499c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800499e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049a4:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80049a6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a8:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049aa:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80049ac:	2201      	movs	r2, #1
 80049ae:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 80049b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80049b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ba:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80049bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c0:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c6:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80049c8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ca:	68e2      	ldr	r2, [r4, #12]
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80049d2:	6962      	ldr	r2, [r4, #20]
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
 80049d6:	e7e9      	b.n	80049ac <HAL_TIM_PWM_Init+0x54>
    htim->Lock = HAL_UNLOCKED;
 80049d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80049dc:	f7ff ffba 	bl	8004954 <HAL_TIM_PWM_MspInit>
 80049e0:	e7c4      	b.n	800496c <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80049e2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80049ec:	432a      	orrs	r2, r5
 80049ee:	e7e5      	b.n	80049bc <HAL_TIM_PWM_Init+0x64>
 80049f0:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80049fa:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a00:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a06:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8004a08:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a0a:	68e2      	ldr	r2, [r4, #12]
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a0e:	6862      	ldr	r2, [r4, #4]
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
 8004a12:	e7cb      	b.n	80049ac <HAL_TIM_PWM_Init+0x54>
    return HAL_ERROR;
 8004a14:	2001      	movs	r0, #1
 8004a16:	4770      	bx	lr
 8004a18:	40012c00 	.word	0x40012c00

08004a1c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004a1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d061      	beq.n	8004ae8 <HAL_TIM_PWM_ConfigChannel+0xcc>
{
 8004a24:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8004a26:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004a28:	2401      	movs	r4, #1
 8004a2a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8004a32:	2a14      	cmp	r2, #20
 8004a34:	d850      	bhi.n	8004ad8 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8004a36:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004a3a:	0094      	.short	0x0094
 8004a3c:	004f004f 	.word	0x004f004f
 8004a40:	00ce004f 	.word	0x00ce004f
 8004a44:	004f004f 	.word	0x004f004f
 8004a48:	0107004f 	.word	0x0107004f
 8004a4c:	004f004f 	.word	0x004f004f
 8004a50:	0015004f 	.word	0x0015004f
 8004a54:	004f004f 	.word	0x004f004f
 8004a58:	013b004f 	.word	0x013b004f
 8004a5c:	004f004f 	.word	0x004f004f
 8004a60:	0059004f 	.word	0x0059004f
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a64:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a66:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a6a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a6c:	680f      	ldr	r7, [r1, #0]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6e:	4eb4      	ldr	r6, [pc, #720]	; (8004d40 <HAL_TIM_PWM_ConfigChannel+0x324>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a70:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8004a74:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004a76:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004a78:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004a7a:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a7c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8004a80:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a84:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a88:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a8a:	ea44 340e 	orr.w	r4, r4, lr, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a8e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	f000 814f 	beq.w	8004d34 <HAL_TIM_PWM_ConfigChannel+0x318>
 8004a96:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8004a9a:	42b3      	cmp	r3, r6
 8004a9c:	f000 814a 	beq.w	8004d34 <HAL_TIM_PWM_ConfigChannel+0x318>
 8004aa0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004aa4:	42b3      	cmp	r3, r6
 8004aa6:	f000 8145 	beq.w	8004d34 <HAL_TIM_PWM_ConfigChannel+0x318>
 8004aaa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004aae:	42b3      	cmp	r3, r6
 8004ab0:	f000 8140 	beq.w	8004d34 <HAL_TIM_PWM_ConfigChannel+0x318>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ab4:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ab6:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004ab8:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004aba:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abc:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004abe:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ac0:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ac2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004ac6:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ac8:	69d9      	ldr	r1, [r3, #28]
 8004aca:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004ace:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ad0:	69da      	ldr	r2, [r3, #28]
 8004ad2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004ad6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004ad8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004ada:	2201      	movs	r2, #1
 8004adc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ae0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8004ae8:	2002      	movs	r0, #2
 8004aea:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004aec:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004aee:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004af2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af6:	4e92      	ldr	r6, [pc, #584]	; (8004d40 <HAL_TIM_PWM_ConfigChannel+0x324>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004af8:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8004afc:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004afe:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004b00:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004b02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b04:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b08:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b0c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b10:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b12:	ea44 540e 	orr.w	r4, r4, lr, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b16:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	f000 80ff 	beq.w	8004d1c <HAL_TIM_PWM_ConfigChannel+0x300>
 8004b1e:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8004b22:	42b3      	cmp	r3, r6
 8004b24:	f000 80fa 	beq.w	8004d1c <HAL_TIM_PWM_ConfigChannel+0x300>
 8004b28:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004b2c:	42b3      	cmp	r3, r6
 8004b2e:	f000 80f5 	beq.w	8004d1c <HAL_TIM_PWM_ConfigChannel+0x300>
 8004b32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004b36:	42b3      	cmp	r3, r6
 8004b38:	f000 80f0 	beq.w	8004d1c <HAL_TIM_PWM_ConfigChannel+0x300>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b3c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b3e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004b42:	65de      	str	r6, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b44:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b46:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b48:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b4a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004b4e:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b52:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004b56:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b60:	e7ba      	b.n	8004ad8 <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b62:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8004b64:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b68:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004b6a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b6c:	4e74      	ldr	r6, [pc, #464]	; (8004d40 <HAL_TIM_PWM_ConfigChannel+0x324>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6e:	f025 0501 	bic.w	r5, r5, #1
 8004b72:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004b74:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004b76:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b78:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b7a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8004b7e:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b82:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b86:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8004b88:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8004b8c:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b90:	f000 80fa 	beq.w	8004d88 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8004b94:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8004b98:	42b3      	cmp	r3, r6
 8004b9a:	f000 80f5 	beq.w	8004d88 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8004b9e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004ba2:	42b3      	cmp	r3, r6
 8004ba4:	f000 80f0 	beq.w	8004d88 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8004ba8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004bac:	42b3      	cmp	r3, r6
 8004bae:	f000 80eb 	beq.w	8004d88 <HAL_TIM_PWM_ConfigChannel+0x36c>
  TIMx->CCR1 = OC_Config->Pulse;
 8004bb2:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004bb4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004bb6:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004bb8:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004bba:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bbc:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bbe:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc0:	f044 0408 	orr.w	r4, r4, #8
 8004bc4:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bc6:	6999      	ldr	r1, [r3, #24]
 8004bc8:	f021 0104 	bic.w	r1, r1, #4
 8004bcc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	432a      	orrs	r2, r5
 8004bd2:	619a      	str	r2, [r3, #24]
      break;
 8004bd4:	e780      	b.n	8004ad8 <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd6:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bd8:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bdc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bde:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004be0:	4e57      	ldr	r6, [pc, #348]	; (8004d40 <HAL_TIM_PWM_ConfigChannel+0x324>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be2:	f025 0510 	bic.w	r5, r5, #16
 8004be6:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004be8:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004bea:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004bec:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf2:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bf6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bfa:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bfc:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c04:	f000 80b1 	beq.w	8004d6a <HAL_TIM_PWM_ConfigChannel+0x34e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c08:	4e4e      	ldr	r6, [pc, #312]	; (8004d44 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8004c0a:	42b3      	cmp	r3, r6
 8004c0c:	f000 80b4 	beq.w	8004d78 <HAL_TIM_PWM_ConfigChannel+0x35c>
 8004c10:	4e4d      	ldr	r6, [pc, #308]	; (8004d48 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8004c12:	42b3      	cmp	r3, r6
 8004c14:	f000 80b0 	beq.w	8004d78 <HAL_TIM_PWM_ConfigChannel+0x35c>
 8004c18:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004c1c:	42b3      	cmp	r3, r6
 8004c1e:	f000 80ab 	beq.w	8004d78 <HAL_TIM_PWM_ConfigChannel+0x35c>
  TIMx->CCR2 = OC_Config->Pulse;
 8004c22:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004c24:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004c26:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004c28:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004c2a:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c2c:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c2e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c30:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004c34:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c36:	6999      	ldr	r1, [r3, #24]
 8004c38:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004c3c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004c44:	619a      	str	r2, [r3, #24]
      break;
 8004c46:	e747      	b.n	8004ad8 <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c48:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c4a:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004c50:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c52:	4e3b      	ldr	r6, [pc, #236]	; (8004d40 <HAL_TIM_PWM_ConfigChannel+0x324>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c54:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8004c58:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004c5a:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004c5c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004c5e:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8004c64:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c68:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c6c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c6e:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004c72:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c76:	d069      	beq.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x330>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	4e32      	ldr	r6, [pc, #200]	; (8004d44 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8004c7a:	42b3      	cmp	r3, r6
 8004c7c:	d06d      	beq.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x33e>
 8004c7e:	4e32      	ldr	r6, [pc, #200]	; (8004d48 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8004c80:	42b3      	cmp	r3, r6
 8004c82:	d06a      	beq.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x33e>
 8004c84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004c88:	42b3      	cmp	r3, r6
 8004c8a:	d066      	beq.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x33e>
  TIMx->CCR3 = OC_Config->Pulse;
 8004c8c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004c8e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004c90:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004c92:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004c94:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c96:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c98:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c9a:	f044 0408 	orr.w	r4, r4, #8
 8004c9e:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ca0:	69d9      	ldr	r1, [r3, #28]
 8004ca2:	f021 0104 	bic.w	r1, r1, #4
 8004ca6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	432a      	orrs	r2, r5
 8004cac:	61da      	str	r2, [r3, #28]
      break;
 8004cae:	e713      	b.n	8004ad8 <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cb0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cb2:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cb6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004cb8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cba:	4e21      	ldr	r6, [pc, #132]	; (8004d40 <HAL_TIM_PWM_ConfigChannel+0x324>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cbc:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 8004cc0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004cc2:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004cc4:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004cc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8004ccc:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd4:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cd6:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8004cda:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cde:	d023      	beq.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x30c>
 8004ce0:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8004ce4:	42b3      	cmp	r3, r6
 8004ce6:	d01f      	beq.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x30c>
 8004ce8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004cec:	42b3      	cmp	r3, r6
 8004cee:	d01b      	beq.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x30c>
 8004cf0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004cf4:	42b3      	cmp	r3, r6
 8004cf6:	d017      	beq.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x30c>
  TIMx->CCR5 = OC_Config->Pulse;
 8004cf8:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004cfa:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004cfe:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8004d00:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d02:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d04:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d06:	f044 0408 	orr.w	r4, r4, #8
 8004d0a:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d0e:	f021 0104 	bic.w	r1, r1, #4
 8004d12:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d16:	432a      	orrs	r2, r5
 8004d18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d1a:	e6dd      	b.n	8004ad8 <HAL_TIM_PWM_ConfigChannel+0xbc>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d1c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d1e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d22:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8004d26:	e709      	b.n	8004b3c <HAL_TIM_PWM_ConfigChannel+0x120>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d28:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d2a:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d2e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8004d32:	e7e1      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x2dc>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d34:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d36:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d3a:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004d3e:	e6b9      	b.n	8004ab4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d4c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d4e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d52:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d56:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d5a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d5c:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d5e:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d62:	433e      	orrs	r6, r7
 8004d64:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8004d68:	e790      	b.n	8004c8c <HAL_TIM_PWM_ConfigChannel+0x270>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d6a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d6c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d70:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d74:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d78:	694e      	ldr	r6, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d7a:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d7c:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d80:	433e      	orrs	r6, r7
 8004d82:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8004d86:	e74c      	b.n	8004c22 <HAL_TIM_PWM_ConfigChannel+0x206>
    tmpccer |= OC_Config->OCNPolarity;
 8004d88:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d8a:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d8c:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004d90:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d92:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d94:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d98:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d9a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d9e:	4335      	orrs	r5, r6
 8004da0:	e707      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x196>
 8004da2:	bf00      	nop

08004da4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004da4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_TIM_SlaveConfigSynchro+0xc>
 8004dac:	2002      	movs	r0, #2
 8004dae:	4770      	bx	lr
{
 8004db0:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004db2:	2302      	movs	r3, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004db6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004dba:	68a3      	ldr	r3, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004dbc:	684d      	ldr	r5, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004dbe:	680e      	ldr	r6, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004dc4:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dca:	4602      	mov	r2, r0
 8004dcc:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004dd0:	4333      	orrs	r3, r6
  __HAL_LOCK(htim);
 8004dd2:	2001      	movs	r0, #1

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004dd4:	2d50      	cmp	r5, #80	; 0x50
  __HAL_LOCK(htim);
 8004dd6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8004dda:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004ddc:	d04c      	beq.n	8004e78 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8004dde:	d91f      	bls.n	8004e20 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004de0:	2d60      	cmp	r5, #96	; 0x60
 8004de2:	d036      	beq.n	8004e52 <HAL_TIM_SlaveConfigSynchro+0xae>
 8004de4:	2d70      	cmp	r5, #112	; 0x70
 8004de6:	d10a      	bne.n	8004dfe <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de8:	68cb      	ldr	r3, [r1, #12]
 8004dea:	688d      	ldr	r5, [r1, #8]
 8004dec:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8004dee:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df0:	432b      	orrs	r3, r5
 8004df2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dfa:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfc:	60a3      	str	r3, [r4, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004dfe:	68e3      	ldr	r3, [r4, #12]
 8004e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e04:	60e3      	str	r3, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e06:	68e3      	ldr	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004e08:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8004e0a:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e10:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8004e12:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	f882 503d 	strb.w	r5, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004e18:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8004e1c:	bcf0      	pop	{r4, r5, r6, r7}
 8004e1e:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004e20:	2d40      	cmp	r5, #64	; 0x40
 8004e22:	d1ec      	bne.n	8004dfe <HAL_TIM_SlaveConfigSynchro+0x5a>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e24:	2e05      	cmp	r6, #5
 8004e26:	d00d      	beq.n	8004e44 <HAL_TIM_SlaveConfigSynchro+0xa0>
      tmpccer = htim->Instance->CCER;
 8004e28:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e2a:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e2c:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e2e:	f020 0001 	bic.w	r0, r0, #1
 8004e32:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004e34:	69a3      	ldr	r3, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e3a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004e3e:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004e40:	6225      	str	r5, [r4, #32]
 8004e42:	e7dc      	b.n	8004dfe <HAL_TIM_SlaveConfigSynchro+0x5a>
    __HAL_UNLOCK(htim);
 8004e44:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8004e46:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004e4a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004e4e:	bcf0      	pop	{r4, r5, r6, r7}
 8004e50:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e52:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e54:	688d      	ldr	r5, [r1, #8]
 8004e56:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e58:	f020 0010 	bic.w	r0, r0, #16
 8004e5c:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5e:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004e60:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e62:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e6a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e6e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004e72:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e74:	6223      	str	r3, [r4, #32]
 8004e76:	e7c2      	b.n	8004dfe <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpccer = TIMx->CCER;
 8004e78:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7a:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7c:	6888      	ldr	r0, [r1, #8]
 8004e7e:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e80:	f026 0601 	bic.w	r6, r6, #1
 8004e84:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e86:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e88:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004e90:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e92:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004e96:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e98:	6221      	str	r1, [r4, #32]
 8004e9a:	e7b0      	b.n	8004dfe <HAL_TIM_SlaveConfigSynchro+0x5a>

08004e9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d020      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
{
 8004ea4:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea6:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ea8:	4c17      	ldr	r4, [pc, #92]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004eb0:	2501      	movs	r5, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eb2:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 8004eb4:	685a      	ldr	r2, [r3, #4]
  __HAL_LOCK(htim);
 8004eb6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004eba:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ebc:	d015      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ebe:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec4:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8004eca:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ecc:	d016      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004ece:	4a0f      	ldr	r2, [pc, #60]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0x60>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004ed4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004edc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004ee0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004ee2:	4618      	mov	r0, r3
}
 8004ee4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004ee6:	2002      	movs	r0, #2
 8004ee8:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eea:	e891 0050 	ldmia.w	r1, {r4, r6}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ef2:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef8:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 8004efa:	605a      	str	r2, [r3, #4]
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004efc:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efe:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f02:	4315      	orrs	r5, r2
    htim->Instance->SMCR = tmpsmcr;
 8004f04:	609d      	str	r5, [r3, #8]
 8004f06:	e7e5      	b.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40014000 	.word	0x40014000

08004f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d029      	beq.n	8004f6c <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
{
 8004f18:	b4f0      	push	{r4, r5, r6, r7}

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f1a:	e891 00e0 	ldmia.w	r1, {r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f1e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f20:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f26:	433b      	orrs	r3, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f2c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f32:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f3c:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f3e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f40:	4d12      	ldr	r5, [pc, #72]	; (8004f8c <HAL_TIMEx_ConfigBreakDeadTime+0x7c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f42:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f48:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f4e:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f50:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f52:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f56:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f5c:	d008      	beq.n	8004f70 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8004f5e:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004f60:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 8004f62:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004f64:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8004f66:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8004f6a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f70:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f72:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f74:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f7a:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f82:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f84:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	e7e8      	b.n	8004f5e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004f8c:	40012c00 	.word	0x40012c00

08004f90 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f92:	07da      	lsls	r2, r3, #31
{
 8004f94:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f96:	d506      	bpl.n	8004fa6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f98:	6801      	ldr	r1, [r0, #0]
 8004f9a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004f9c:	684a      	ldr	r2, [r1, #4]
 8004f9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004fa2:	4322      	orrs	r2, r4
 8004fa4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa6:	079c      	lsls	r4, r3, #30
 8004fa8:	d506      	bpl.n	8004fb8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004faa:	6801      	ldr	r1, [r0, #0]
 8004fac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004fae:	684a      	ldr	r2, [r1, #4]
 8004fb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fb4:	4322      	orrs	r2, r4
 8004fb6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fb8:	0759      	lsls	r1, r3, #29
 8004fba:	d506      	bpl.n	8004fca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fbc:	6801      	ldr	r1, [r0, #0]
 8004fbe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004fc0:	684a      	ldr	r2, [r1, #4]
 8004fc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fc6:	4322      	orrs	r2, r4
 8004fc8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fca:	071a      	lsls	r2, r3, #28
 8004fcc:	d506      	bpl.n	8004fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fce:	6801      	ldr	r1, [r0, #0]
 8004fd0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004fd2:	684a      	ldr	r2, [r1, #4]
 8004fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fd8:	4322      	orrs	r2, r4
 8004fda:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fdc:	06dc      	lsls	r4, r3, #27
 8004fde:	d506      	bpl.n	8004fee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fe0:	6801      	ldr	r1, [r0, #0]
 8004fe2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004fe4:	688a      	ldr	r2, [r1, #8]
 8004fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fea:	4322      	orrs	r2, r4
 8004fec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fee:	0699      	lsls	r1, r3, #26
 8004ff0:	d506      	bpl.n	8005000 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ff2:	6801      	ldr	r1, [r0, #0]
 8004ff4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004ff6:	688a      	ldr	r2, [r1, #8]
 8004ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffc:	4322      	orrs	r2, r4
 8004ffe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005000:	065a      	lsls	r2, r3, #25
 8005002:	d509      	bpl.n	8005018 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005004:	6801      	ldr	r1, [r0, #0]
 8005006:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005008:	684a      	ldr	r2, [r1, #4]
 800500a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800500e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005010:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005014:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005016:	d00b      	beq.n	8005030 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	d506      	bpl.n	800502a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800501c:	6802      	ldr	r2, [r0, #0]
 800501e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005020:	6853      	ldr	r3, [r2, #4]
 8005022:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005026:	430b      	orrs	r3, r1
 8005028:	6053      	str	r3, [r2, #4]
  }
}
 800502a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800502e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005030:	684a      	ldr	r2, [r1, #4]
 8005032:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005034:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005038:	4322      	orrs	r2, r4
 800503a:	604a      	str	r2, [r1, #4]
 800503c:	e7ec      	b.n	8005018 <UART_AdvFeatureConfig+0x88>
 800503e:	bf00      	nop

08005040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005040:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005042:	2300      	movs	r3, #0
{
 8005044:	4605      	mov	r5, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005046:	67c3      	str	r3, [r0, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005048:	f7fd fffe 	bl	8003048 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005050:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005052:	0710      	lsls	r0, r2, #28
 8005054:	d409      	bmi.n	800506a <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	0750      	lsls	r0, r2, #29
 800505a:	d42a      	bmi.n	80050b2 <UART_CheckIdleState+0x72>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800505c:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 800505e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005060:	676b      	str	r3, [r5, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8005062:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005066:	67ab      	str	r3, [r5, #120]	; 0x78

  return HAL_OK;
 8005068:	bd70      	pop	{r4, r5, r6, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506a:	69dc      	ldr	r4, [r3, #28]
 800506c:	f414 1400 	ands.w	r4, r4, #2097152	; 0x200000
 8005070:	d1f1      	bne.n	8005056 <UART_CheckIdleState+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fd ffe9 	bl	8003048 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005076:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005078:	1b80      	subs	r0, r0, r6
 800507a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800507e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005080:	d229      	bcs.n	80050d6 <UART_CheckIdleState+0x96>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005082:	0751      	lsls	r1, r2, #29
 8005084:	d5f1      	bpl.n	800506a <UART_CheckIdleState+0x2a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	0512      	lsls	r2, r2, #20
 800508a:	d5ee      	bpl.n	800506a <UART_CheckIdleState+0x2a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800508c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005090:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005098:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509a:	6899      	ldr	r1, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800509c:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509e:	f021 0101 	bic.w	r1, r1, #1
 80050a2:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 80050a4:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 80050a6:	676a      	str	r2, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a8:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 80050ac:	67aa      	str	r2, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ae:	67ea      	str	r2, [r5, #124]	; 0x7c
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b2:	69dc      	ldr	r4, [r3, #28]
 80050b4:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
 80050b8:	d1d0      	bne.n	800505c <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fd ffc5 	bl	8003048 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050be:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c0:	1b80      	subs	r0, r0, r6
 80050c2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c6:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c8:	d205      	bcs.n	80050d6 <UART_CheckIdleState+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050ca:	0751      	lsls	r1, r2, #29
 80050cc:	d5f1      	bpl.n	80050b2 <UART_CheckIdleState+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	0512      	lsls	r2, r2, #20
 80050d2:	d5ee      	bpl.n	80050b2 <UART_CheckIdleState+0x72>
 80050d4:	e7da      	b.n	800508c <UART_CheckIdleState+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80050de:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 80050e6:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80050e8:	6769      	str	r1, [r5, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80050ea:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80050ee:	67a9      	str	r1, [r5, #120]	; 0x78
 80050f0:	bd70      	pop	{r4, r5, r6, pc}
 80050f2:	bf00      	nop

080050f4 <HAL_UART_Init>:
  if (huart == NULL)
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f000 80b8 	beq.w	800526a <HAL_UART_Init+0x176>
{
 80050fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80050fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80050fe:	4604      	mov	r4, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d02f      	beq.n	8005164 <HAL_UART_Init+0x70>
  __HAL_UART_DISABLE(huart);
 8005104:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005106:	6927      	ldr	r7, [r4, #16]
 8005108:	6966      	ldr	r6, [r4, #20]
 800510a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800510c:	4976      	ldr	r1, [pc, #472]	; (80052e8 <HAL_UART_Init+0x1f4>)
  huart->gState = HAL_UART_STATE_BUSY;
 800510e:	2224      	movs	r2, #36	; 0x24
 8005110:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005112:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005114:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8005116:	f025 0501 	bic.w	r5, r5, #1
 800511a:	601d      	str	r5, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800511c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800511e:	433a      	orrs	r2, r7
 8005120:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005122:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005124:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	68e6      	ldr	r6, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800512e:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8005130:	6a27      	ldr	r7, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005132:	4d6e      	ldr	r5, [pc, #440]	; (80052ec <HAL_UART_Init+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005134:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005138:	4331      	orrs	r1, r6
 800513a:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800513c:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800513e:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005140:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005144:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005146:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005148:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800514a:	d03e      	beq.n	80051ca <HAL_UART_Init+0xd6>
 800514c:	4a68      	ldr	r2, [pc, #416]	; (80052f0 <HAL_UART_Init+0x1fc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00d      	beq.n	800516e <HAL_UART_Init+0x7a>
 8005152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005156:	4293      	cmp	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_UART_Init+0x7a>
  huart->RxISR = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800515e:	6663      	str	r3, [r4, #100]	; 0x64
}
 8005160:	2001      	movs	r0, #1
 8005162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8005164:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005168:	f7fd f852 	bl	8002210 <HAL_UART_MspInit>
 800516c:	e7ca      	b.n	8005104 <HAL_UART_Init+0x10>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005172:	d04b      	beq.n	800520c <HAL_UART_Init+0x118>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005174:	f7ff fa5c 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800517e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005182:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005184:	f1a0 0210 	sub.w	r2, r0, #16
 8005188:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800518c:	429a      	cmp	r2, r3
 800518e:	d8e4      	bhi.n	800515a <HAL_UART_Init+0x66>
      huart->Instance->BRR = usartdiv;
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	60d8      	str	r0, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005194:	6a61      	ldr	r1, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8005196:	2200      	movs	r2, #0
 8005198:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800519a:	6662      	str	r2, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800519c:	b981      	cbnz	r1, 80051c0 <HAL_UART_Init+0xcc>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80051b4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80051b6:	601a      	str	r2, [r3, #0]
}
 80051b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 80051bc:	f7ff bf40 	b.w	8005040 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7ff fee5 	bl	8004f90 <UART_AdvFeatureConfig>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	e7e9      	b.n	800519e <HAL_UART_Init+0xaa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ca:	4b4a      	ldr	r3, [pc, #296]	; (80052f4 <HAL_UART_Init+0x200>)
 80051cc:	4a4a      	ldr	r2, [pc, #296]	; (80052f8 <HAL_UART_Init+0x204>)
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80051d8:	5cd3      	ldrb	r3, [r2, r3]
 80051da:	d148      	bne.n	800526e <HAL_UART_Init+0x17a>
    switch (clocksource)
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d8bc      	bhi.n	800515a <HAL_UART_Init+0x66>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <HAL_UART_Init+0xf4>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	08005265 	.word	0x08005265
 80051f0:	08005251 	.word	0x08005251
 80051f4:	0800515b 	.word	0x0800515b
 80051f8:	0800524b 	.word	0x0800524b
 80051fc:	0800515b 	.word	0x0800515b
 8005200:	0800515b 	.word	0x0800515b
 8005204:	0800515b 	.word	0x0800515b
 8005208:	0800523b 	.word	0x0800523b
        pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7ff fa10 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005210:	6862      	ldr	r2, [r4, #4]
 8005212:	0853      	lsrs	r3, r2, #1
 8005214:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005218:	fbb3 f3f2 	udiv	r3, r3, r2
 800521c:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521e:	f1a3 0110 	sub.w	r1, r3, #16
 8005222:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005226:	4291      	cmp	r1, r2
 8005228:	d897      	bhi.n	800515a <HAL_UART_Init+0x66>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800522a:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800522e:	f3c3 0242 	ubfx	r2, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e7ac      	b.n	8005194 <HAL_UART_Init+0xa0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800523a:	6862      	ldr	r2, [r4, #4]
 800523c:	0853      	lsrs	r3, r2, #1
 800523e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005242:	fbb3 f3f2 	udiv	r3, r3, r2
 8005246:	b29b      	uxth	r3, r3
 8005248:	e7e9      	b.n	800521e <HAL_UART_Init+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 800524a:	f7ff f9b7 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800524e:	e7df      	b.n	8005210 <HAL_UART_Init+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005250:	6862      	ldr	r2, [r4, #4]
 8005252:	0853      	lsrs	r3, r2, #1
 8005254:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005258:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800525c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005260:	b29b      	uxth	r3, r3
 8005262:	e7dc      	b.n	800521e <HAL_UART_Init+0x12a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005264:	f7ff f9fc 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 8005268:	e7d2      	b.n	8005210 <HAL_UART_Init+0x11c>
}
 800526a:	2001      	movs	r0, #1
 800526c:	4770      	bx	lr
    switch (clocksource)
 800526e:	2b08      	cmp	r3, #8
 8005270:	f63f af73 	bhi.w	800515a <HAL_UART_Init+0x66>
 8005274:	a201      	add	r2, pc, #4	; (adr r2, 800527c <HAL_UART_Init+0x188>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	08005175 	.word	0x08005175
 8005280:	080052a1 	.word	0x080052a1
 8005284:	080052d5 	.word	0x080052d5
 8005288:	0800515b 	.word	0x0800515b
 800528c:	080052c3 	.word	0x080052c3
 8005290:	0800515b 	.word	0x0800515b
 8005294:	0800515b 	.word	0x0800515b
 8005298:	0800515b 	.word	0x0800515b
 800529c:	080052b3 	.word	0x080052b3
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7ff f9de 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052a4:	6863      	ldr	r3, [r4, #4]
 80052a6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80052aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80052ae:	b280      	uxth	r0, r0
 80052b0:	e768      	b.n	8005184 <HAL_UART_Init+0x90>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80052b2:	6863      	ldr	r3, [r4, #4]
 80052b4:	0858      	lsrs	r0, r3, #1
 80052b6:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80052ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80052be:	b280      	uxth	r0, r0
 80052c0:	e760      	b.n	8005184 <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7ff f97b 	bl	80045bc <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80052cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80052d0:	b280      	uxth	r0, r0
 80052d2:	e757      	b.n	8005184 <HAL_UART_Init+0x90>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80052d4:	6863      	ldr	r3, [r4, #4]
 80052d6:	0858      	lsrs	r0, r3, #1
 80052d8:	f500 00f4 	add.w	r0, r0, #7995392	; 0x7a0000
 80052dc:	f500 5090 	add.w	r0, r0, #4608	; 0x1200
 80052e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80052e4:	b280      	uxth	r0, r0
 80052e6:	e74d      	b.n	8005184 <HAL_UART_Init+0x90>
 80052e8:	efff69f3 	.word	0xefff69f3
 80052ec:	40013800 	.word	0x40013800
 80052f0:	40004400 	.word	0x40004400
 80052f4:	40021000 	.word	0x40021000
 80052f8:	08007d04 	.word	0x08007d04

080052fc <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80052fc:	88c0      	ldrh	r0, [r0, #6]
 80052fe:	4770      	bx	lr

08005300 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8005300:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8005302:	8840      	ldrh	r0, [r0, #2]
 8005304:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8005308:	0c00      	lsrs	r0, r0, #16
 800530a:	4770      	bx	lr

0800530c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800530c:	b410      	push	{r4}
 800530e:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005310:	8802      	ldrh	r2, [r0, #0]
 8005312:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8005314:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005318:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800531c:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005320:	4294      	cmp	r4, r2
{
 8005322:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005324:	d919      	bls.n	800535a <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8005326:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 800532a:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800532e:	b2e4      	uxtb	r4, r4
 8005330:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8005334:	8882      	ldrh	r2, [r0, #4]
 8005336:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800533a:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800533c:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005340:	bfbc      	itt	lt
 8005342:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8005346:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005348:	2b00      	cmp	r3, #0
 800534a:	bfbc      	itt	lt
 800534c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8005350:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005352:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005356:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 800535a:	b289      	uxth	r1, r1
 800535c:	2000      	movs	r0, #0
 800535e:	b29b      	uxth	r3, r3
 8005360:	f361 000f 	bfi	r0, r1, #0, #16
 8005364:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005368:	b005      	add	sp, #20
 800536a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800536e:	4770      	bx	lr

08005370 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8005370:	4401      	add	r1, r0
 8005372:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
 8005376:	4770      	bx	lr

08005378 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8005378:	4401      	add	r1, r0
}
 800537a:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 800537e:	4770      	bx	lr

08005380 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8005380:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8005384:	864a      	strh	r2, [r1, #50]	; 0x32
 8005386:	4770      	bx	lr

08005388 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8005388:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 800538c:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop

08005394 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8005398:	7503      	strb	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
 800539a:	7543      	strb	r3, [r0, #21]
  pHandle->TxFrame.FrameCRC = 0;
 800539c:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80053a0:	f880 3097 	strb.w	r3, [r0, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 80053a4:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 80053a8:	f880 3099 	strb.w	r3, [r0, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 80053ac:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 80053b0:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80053b4:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 80053b8:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop

080053c0 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 80053c0:	b118      	cbz	r0, 80053ca <FCP_SetClient+0xa>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 80053c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 80053c6:	9b00      	ldr	r3, [sp, #0]
 80053c8:	60c3      	str	r3, [r0, #12]
 80053ca:	4770      	bx	lr

080053cc <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 80053cc:	b1a8      	cbz	r0, 80053fa <FCP_CalcCRC+0x2e>
{
 80053ce:	b410      	push	{r4}
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 80053d0:	7844      	ldrb	r4, [r0, #1]
    nSum += pFrame->Code;
 80053d2:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 80053d4:	4423      	add	r3, r4

    for ( idx = 0; idx < pFrame->Size; idx++ )
 80053d6:	b154      	cbz	r4, 80053ee <FCP_CalcCRC+0x22>
 80053d8:	3c01      	subs	r4, #1
 80053da:	b2e4      	uxtb	r4, r4
 80053dc:	3402      	adds	r4, #2
 80053de:	4404      	add	r4, r0
 80053e0:	1c42      	adds	r2, r0, #1
    {
      nSum += pFrame->Buffer[idx];
 80053e2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80053e6:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80053e8:	4294      	cmp	r4, r2
      nSum += pFrame->Buffer[idx];
 80053ea:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80053ec:	d1f9      	bne.n	80053e2 <FCP_CalcCRC+0x16>
    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
  }

  return nCRC ;
}
 80053ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80053f2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 80053f6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
}
 80053fa:	4770      	bx	lr

080053fc <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80053fc:	b510      	push	{r4, lr}
 80053fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005402:	4604      	mov	r4, r0
 8005404:	2100      	movs	r1, #0
 8005406:	f002 fafb 	bl	8007a00 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 800540a:	2300      	movs	r3, #0
 800540c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005410:	bd10      	pop	{r4, pc}
 8005412:	bf00      	nop

08005414 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005414:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8005418:	1c53      	adds	r3, r2, #1
 800541a:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 800541c:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800541e:	bf88      	it	hi
 8005420:	2300      	movhi	r3, #0
{
 8005422:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005424:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8005428:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 800542c:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8005430:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8005434:	2200      	movs	r2, #0
 8005436:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005438:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800543c:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800543e:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005440:	d1fa      	bne.n	8005438 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8005442:	2a00      	cmp	r2, #0
 8005444:	bfb8      	it	lt
 8005446:	327f      	addlt	r2, #127	; 0x7f
 8005448:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800544a:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 800544e:	bc30      	pop	{r4, r5}
 8005450:	4608      	mov	r0, r1
 8005452:	4770      	bx	lr

08005454 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8005454:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop

0800545c <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800545c:	8a03      	ldrh	r3, [r0, #16]
 800545e:	8b42      	ldrh	r2, [r0, #26]
 8005460:	429a      	cmp	r2, r3
 8005462:	d201      	bcs.n	8005468 <NTC_SetFaultState+0xc>
  {
    hFault = MC_OVER_TEMP;
 8005464:	2008      	movs	r0, #8
 8005466:	4770      	bx	lr
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8005468:	8b82      	ldrh	r2, [r0, #28]
 800546a:	429a      	cmp	r2, r3
 800546c:	d801      	bhi.n	8005472 <NTC_SetFaultState+0x16>
  {
    hFault = MC_NO_ERROR;
  }
  else
  {
    hFault = pHandle->hFaultState;
 800546e:	8ac0      	ldrh	r0, [r0, #22]
 8005470:	4770      	bx	lr
    hFault = MC_NO_ERROR;
 8005472:	2000      	movs	r0, #0
  }
  return hFault;
}
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop

08005478 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8005478:	2300      	movs	r3, #0
 800547a:	8203      	strh	r3, [r0, #16]
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop

08005480 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005480:	7803      	ldrb	r3, [r0, #0]
 8005482:	b123      	cbz	r3, 800548e <NTC_Init+0xe>
    pHandle->hFaultState = MC_NO_ERROR;
 8005484:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005486:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 8005488:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800548a:	8203      	strh	r3, [r0, #16]
}
 800548c:	4770      	bx	lr
{
 800548e:	b510      	push	{r4, lr}
 8005490:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005492:	3004      	adds	r0, #4
 8005494:	f7fc fb46 	bl	8001b24 <RCM_RegisterRegConv>
 8005498:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 800549c:	4620      	mov	r0, r4
 800549e:	f7ff ffeb 	bl	8005478 <NTC_Clear>
 80054a2:	bd10      	pop	{r4, pc}

080054a4 <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80054a4:	7803      	ldrb	r3, [r0, #0]
 80054a6:	b11b      	cbz	r3, 80054b0 <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80054a8:	2300      	movs	r3, #0
 80054aa:	82c3      	strh	r3, [r0, #22]
 80054ac:	4618      	mov	r0, r3
 80054ae:	4770      	bx	lr
{
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80054b4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80054b8:	f7fc fc06 	bl	8001cc8 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80054bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054c0:	4298      	cmp	r0, r3
 80054c2:	d007      	beq.n	80054d4 <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80054c4:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80054c6:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80054c8:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 80054ca:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 80054ce:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 80054d2:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80054d4:	4620      	mov	r0, r4
 80054d6:	f7ff ffc1 	bl	800545c <NTC_SetFaultState>
 80054da:	82e0      	strh	r0, [r4, #22]
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	bf00      	nop

080054e0 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80054e0:	7803      	ldrb	r3, [r0, #0]
 80054e2:	b113      	cbz	r3, 80054ea <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 80054e4:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 80054e6:	b200      	sxth	r0, r0
 80054e8:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80054ea:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80054ec:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80054ee:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80054f2:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 80054f4:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 80054f6:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bfbc      	itt	lt
 80054fe:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005502:	33ff      	addlt	r3, #255	; 0xff
 8005504:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 8005508:	b200      	sxth	r0, r0
 800550a:	4770      	bx	lr

0800550c <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 800550c:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800550e:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005510:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005512:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005514:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8005516:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8005518:	6283      	str	r3, [r0, #40]	; 0x28
 800551a:	4770      	bx	lr

0800551c <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 800551c:	8081      	strh	r1, [r0, #4]
 800551e:	4770      	bx	lr

08005520 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8005520:	80c1      	strh	r1, [r0, #6]
 8005522:	4770      	bx	lr

08005524 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8005524:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop

0800552c <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 800552c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop

08005534 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8005534:	6081      	str	r1, [r0, #8]
 8005536:	4770      	bx	lr

08005538 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8005538:	8b00      	ldrh	r0, [r0, #24]
 800553a:	4770      	bx	lr

0800553c <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 800553c:	8b40      	ldrh	r0, [r0, #26]
 800553e:	4770      	bx	lr

08005540 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8005540:	8441      	strh	r1, [r0, #34]	; 0x22
 8005542:	4770      	bx	lr

08005544 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8005544:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop

0800554c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800554c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8005550:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8005554:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005556:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800555a:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800555e:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8005562:	b163      	cbz	r3, 800557e <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005564:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005566:	fb01 f103 	mul.w	r1, r1, r3

    if ( wIntegral_sum_temp < 0 )
 800556a:	198b      	adds	r3, r1, r6
 800556c:	d41d      	bmi.n	80055aa <PI_Controller+0x5e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800556e:	2e00      	cmp	r6, #0
 8005570:	db26      	blt.n	80055c0 <PI_Controller+0x74>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005572:	68c1      	ldr	r1, [r0, #12]
 8005574:	428b      	cmp	r3, r1
 8005576:	dc03      	bgt.n	8005580 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8005578:	6901      	ldr	r1, [r0, #16]
 800557a:	428b      	cmp	r3, r1
 800557c:	db00      	blt.n	8005580 <PI_Controller+0x34>
 800557e:	4619      	mov	r1, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8005580:	8b86      	ldrh	r6, [r0, #28]
 8005582:	8bc3      	ldrh	r3, [r0, #30]
 8005584:	4132      	asrs	r2, r6
 8005586:	fa41 f303 	asr.w	r3, r1, r3
 800558a:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800558c:	42a3      	cmp	r3, r4
 800558e:	dc09      	bgt.n	80055a4 <PI_Controller+0x58>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8005590:	42ab      	cmp	r3, r5
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8005592:	bfb6      	itet	lt
 8005594:	1aea      	sublt	r2, r5, r3
  int32_t wDischarge = 0;
 8005596:	2200      	movge	r2, #0
 8005598:	462b      	movlt	r3, r5
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800559a:	4411      	add	r1, r2
 800559c:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 800559e:	bc70      	pop	{r4, r5, r6}
  return ( ( int16_t )( wOutput_32 ) );
 80055a0:	b218      	sxth	r0, r3
}
 80055a2:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 80055a4:	1ae2      	subs	r2, r4, r3
 80055a6:	4623      	mov	r3, r4
 80055a8:	e7f7      	b.n	800559a <PI_Controller+0x4e>
      if ( pHandle->wIntegralTerm > 0 )
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	dde1      	ble.n	8005572 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 80055ae:	2900      	cmp	r1, #0
 80055b0:	dddf      	ble.n	8005572 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80055b2:	68c1      	ldr	r1, [r0, #12]
 80055b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80055b8:	4299      	cmp	r1, r3
 80055ba:	d1e1      	bne.n	8005580 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 80055bc:	460b      	mov	r3, r1
 80055be:	e7de      	b.n	800557e <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 80055c0:	4e02      	ldr	r6, [pc, #8]	; (80055cc <PI_Controller+0x80>)
 80055c2:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 80055c6:	bf28      	it	cs
 80055c8:	4633      	movcs	r3, r6
 80055ca:	e7d2      	b.n	8005572 <PI_Controller+0x26>
 80055cc:	80000001 	.word	0x80000001

080055d0 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 80055d0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80055d4:	8b11      	ldrh	r1, [r2, #24]
 80055d6:	89d3      	ldrh	r3, [r2, #14]
{
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	4606      	mov	r6, r0
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80055dc:	8995      	ldrh	r5, [r2, #12]
 80055de:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80055e0:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 80055e4:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80055e8:	fb13 f301 	smulbb	r3, r3, r1
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80055ec:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80055f0:	f7ff fe86 	bl	8005300 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 80055f4:	2d00      	cmp	r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80055f6:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 80055f8:	490f      	ldr	r1, [pc, #60]	; (8005638 <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80055fa:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 80055fe:	bfb8      	it	lt
 8005600:	f505 457f 	addlt.w	r5, r5, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005604:	fb83 2300 	smull	r2, r3, r3, r0
  wAux /= 65536;
 8005608:	bfb8      	it	lt
 800560a:	35ff      	addlt	r5, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800560c:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 800560e:	142d      	asrs	r5, r5, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005610:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 8005614:	fb03 f305 	mul.w	r3, r3, r5
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8005618:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800561c:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 800561e:	fb81 2103 	smull	r2, r1, r1, r3
 8005622:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005624:	4630      	mov	r0, r6
 8005626:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 800562a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800562e:	f7ff bef1 	b.w	8005414 <MPM_CalcElMotorPower>
 8005632:	bf00      	nop
 8005634:	1b4e81b5 	.word	0x1b4e81b5
 8005638:	66666667 	.word	0x66666667

0800563c <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800563c:	4b17      	ldr	r3, [pc, #92]	; (800569c <startTimers+0x60>)
 800563e:	69da      	ldr	r2, [r3, #28]
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8005640:	07d2      	lsls	r2, r2, #31
 8005642:	d514      	bpl.n	800566e <startTimers+0x32>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  }
  else
  {
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8005644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005648:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800564a:	6859      	ldr	r1, [r3, #4]
 800564c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005650:	f041 0120 	orr.w	r1, r1, #32
 8005654:	6059      	str	r1, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005656:	6959      	ldr	r1, [r3, #20]
 8005658:	f041 0101 	orr.w	r1, r1, #1
 800565c:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005664:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800566c:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR, Periphs);
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005676:	69da      	ldr	r2, [r3, #28]
{
 8005678:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800567a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800567e:	f002 0201 	and.w	r2, r2, #1
 8005682:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005684:	9a01      	ldr	r2, [sp, #4]
 8005686:	694a      	ldr	r2, [r1, #20]
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	61da      	str	r2, [r3, #28]
}
 8005696:	b002      	add	sp, #8
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000

080056a0 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, uint8_t *cnt )
{
 80056a0:	b470      	push	{r4, r5, r6}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 80056a2:	6804      	ldr	r4, [r0, #0]
 80056a4:	f004 0470 	and.w	r4, r4, #112	; 0x70
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( LL_TIM_GetCounterMode(TIMx) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80056a8:	2c60      	cmp	r4, #96	; 0x60
 80056aa:	d019      	beq.n	80056e0 <waitForPolarizationEnd+0x40>
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80056ac:	1c55      	adds	r5, r2, #1
 80056ae:	086d      	lsrs	r5, r5, #1
 80056b0:	016d      	lsls	r5, r5, #5
 80056b2:	b2ad      	uxth	r5, r5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80056b4:	f06f 0602 	mvn.w	r6, #2
 80056b8:	6106      	str	r6, [r0, #16]
 80056ba:	781a      	ldrb	r2, [r3, #0]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 80056bc:	2400      	movs	r4, #0
 80056be:	2a0f      	cmp	r2, #15
 80056c0:	d80c      	bhi.n	80056dc <waitForPolarizationEnd+0x3c>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80056c2:	6902      	ldr	r2, [r0, #16]
 80056c4:	0792      	lsls	r2, r2, #30
 80056c6:	d5fc      	bpl.n	80056c2 <waitForPolarizationEnd+0x22>
  while (*cnt < NB_CONVERSIONS)
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80056c8:	3401      	adds	r4, #1
 80056ca:	b2a4      	uxth	r4, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80056cc:	6106      	str	r6, [r0, #16]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80056ce:	42a5      	cmp	r5, r4
      {
        if (*cnt < NB_CONVERSIONS)
 80056d0:	781a      	ldrb	r2, [r3, #0]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80056d2:	d8f4      	bhi.n	80056be <waitForPolarizationEnd+0x1e>
        if (*cnt < NB_CONVERSIONS)
 80056d4:	2a0f      	cmp	r2, #15
 80056d6:	d8f2      	bhi.n	80056be <waitForPolarizationEnd+0x1e>
        {
          *SWerror = 1u;
 80056d8:	2301      	movs	r3, #1
 80056da:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 80056dc:	bc70      	pop	{r4, r5, r6}
 80056de:	4770      	bx	lr
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80056e0:	0152      	lsls	r2, r2, #5
 80056e2:	f102 0520 	add.w	r5, r2, #32
 80056e6:	e7e5      	b.n	80056b4 <waitForPolarizationEnd+0x14>

080056e8 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 80056e8:	6843      	ldr	r3, [r0, #4]
 80056ea:	4718      	bx	r3

080056ec <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 80056ec:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80056ee:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80056f2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80056f4:	140b      	asrs	r3, r1, #16
{
 80056f6:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80056f8:	fb05 f303 	mul.w	r3, r5, r3
{
 80056fc:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80056fe:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005702:	b209      	sxth	r1, r1
 8005704:	fb02 f101 	mul.w	r1, r2, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005708:	005b      	lsls	r3, r3, #1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 800570a:	1a5e      	subs	r6, r3, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 800570c:	4419      	add	r1, r3
 800570e:	eb01 74d1 	add.w	r4, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005712:	eb06 72d6 	add.w	r2, r6, r6, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8005716:	1064      	asrs	r4, r4, #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005718:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 800571c:	d44b      	bmi.n	80057b6 <PWMC_SetPhaseVoltage+0xca>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800571e:	2a00      	cmp	r2, #0
 8005720:	f2c0 8095 	blt.w	800584e <PWMC_SetPhaseVoltage+0x162>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005724:	1aa4      	subs	r4, r4, r2
 8005726:	bf44      	itt	mi
 8005728:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 800572c:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005730:	2e00      	cmp	r6, #0
 8005732:	bfbc      	itt	lt
 8005734:	f506 367f 	addlt.w	r6, r6, #261120	; 0x3fc00
 8005738:	f206 36ff 	addwlt	r6, r6, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800573c:	2900      	cmp	r1, #0
 800573e:	bfb8      	it	lt
 8005740:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005744:	ea4f 0595 	mov.w	r5, r5, lsr #2
 8005748:	eb05 44a4 	add.w	r4, r5, r4, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800574c:	bfb8      	it	lt
 800574e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005752:	eb04 46a6 	add.w	r6, r4, r6, asr #18
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
 8005756:	b2a2      	uxth	r2, r4
      wTimePhC = wTimePhA - wY / 131072;
 8005758:	eba4 44a1 	sub.w	r4, r4, r1, asr #18
      pHandle->Sector = SECTOR_2;
 800575c:	2301      	movs	r3, #1
      pHandle->lowDuty = wTimePhB;
 800575e:	b2b6      	uxth	r6, r6
      pHandle->highDuty = wTimePhC;
 8005760:	b2a1      	uxth	r1, r4
      pHandle->Sector = SECTOR_2;
 8005762:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 8005766:	8786      	strh	r6, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005768:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 800576a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40

  pHandle->CntPhA = ( uint16_t )wTimePhA;
  pHandle->CntPhB = ( uint16_t )wTimePhB;
  pHandle->CntPhC = ( uint16_t )wTimePhC;

  if ( pHandle->DTTest == 1u )
 800576e:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
  pHandle->CntPhA = ( uint16_t )wTimePhA;
 8005772:	8642      	strh	r2, [r0, #50]	; 0x32
  if ( pHandle->DTTest == 1u )
 8005774:	2b01      	cmp	r3, #1
  pHandle->CntPhB = ( uint16_t )wTimePhB;
 8005776:	8686      	strh	r6, [r0, #52]	; 0x34
  pHandle->CntPhC = ( uint16_t )wTimePhC;
 8005778:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 800577a:	d118      	bne.n	80057ae <PWMC_SetPhaseVoltage+0xc2>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800577c:	f9b0 3048 	ldrsh.w	r3, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8005780:	f9b0 404a 	ldrsh.w	r4, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8005784:	2b00      	cmp	r3, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8005786:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
 800578a:	bfcc      	ite	gt
 800578c:	18d2      	addgt	r2, r2, r3
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800578e:	1ad2      	suble	r2, r2, r3
 8005790:	b292      	uxth	r2, r2
 8005792:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8005794:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8005798:	2c00      	cmp	r4, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 800579a:	bfcc      	ite	gt
 800579c:	18f6      	addgt	r6, r6, r3
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800579e:	1af6      	suble	r6, r6, r3
    if ( pHandle->Ic > 0 )
 80057a0:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80057a2:	b2b6      	uxth	r6, r6
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 80057a4:	bfcc      	ite	gt
 80057a6:	18c9      	addgt	r1, r1, r3
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80057a8:	1ac9      	suble	r1, r1, r3
 80057aa:	8686      	strh	r6, [r0, #52]	; 0x34
 80057ac:	86c1      	strh	r1, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80057ae:	6983      	ldr	r3, [r0, #24]
}
 80057b0:	b003      	add	sp, #12
 80057b2:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80057b4:	4718      	bx	r3
    if ( wZ < 0 )
 80057b6:	2a00      	cmp	r2, #0
 80057b8:	db23      	blt.n	8005802 <PWMC_SetPhaseVoltage+0x116>
      if ( wX <= 0 )
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dd6b      	ble.n	8005896 <PWMC_SetPhaseVoltage+0x1aa>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80057be:	1ae4      	subs	r4, r4, r3
 80057c0:	bf48      	it	mi
 80057c2:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 80057c6:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80057ca:	bf48      	it	mi
 80057cc:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 80057d0:	2900      	cmp	r1, #0
 80057d2:	bfb8      	it	lt
 80057d4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 80057d8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80057dc:	ea4f 0295 	mov.w	r2, r5, lsr #2
 80057e0:	eb02 44a4 	add.w	r4, r2, r4, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 80057e4:	bfb8      	it	lt
 80057e6:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
 80057ea:	eba4 41a1 	sub.w	r1, r4, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80057ee:	eb01 4663 	add.w	r6, r1, r3, asr #17
        pHandle->lowDuty = wTimePhB;
 80057f2:	b2b6      	uxth	r6, r6
        pHandle->midDuty = wTimePhC;
 80057f4:	b289      	uxth	r1, r1
        pHandle->highDuty = wTimePhA;
 80057f6:	b2a2      	uxth	r2, r4
        pHandle->lowDuty = wTimePhB;
 80057f8:	8786      	strh	r6, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80057fa:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80057fc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005800:	e7b5      	b.n	800576e <PWMC_SetPhaseVoltage+0x82>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005802:	1aa4      	subs	r4, r4, r2
 8005804:	bf44      	itt	mi
 8005806:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 800580a:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800580e:	2900      	cmp	r1, #0
 8005810:	bfbc      	itt	lt
 8005812:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8005816:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800581a:	2e00      	cmp	r6, #0
 800581c:	bfb8      	it	lt
 800581e:	f506 367f 	addlt.w	r6, r6, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005822:	ea4f 0595 	mov.w	r5, r5, lsr #2
 8005826:	eb05 44a4 	add.w	r4, r5, r4, asr #18
      wTimePhB = wTimePhA + wZ / 131072;
 800582a:	bfb8      	it	lt
 800582c:	f206 36ff 	addwlt	r6, r6, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005830:	eba4 41a1 	sub.w	r1, r4, r1, asr #18
      wTimePhB = wTimePhA + wZ / 131072;
 8005834:	eb04 46a6 	add.w	r6, r4, r6, asr #18
      pHandle->Sector = SECTOR_5;
 8005838:	2304      	movs	r3, #4
      pHandle->lowDuty = wTimePhC;
 800583a:	b289      	uxth	r1, r1
      pHandle->midDuty = wTimePhA;
 800583c:	b2a2      	uxth	r2, r4
      pHandle->highDuty = wTimePhB;
 800583e:	b2b6      	uxth	r6, r6
      pHandle->Sector = SECTOR_5;
 8005840:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8005844:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005846:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8005848:	f8a0 6040 	strh.w	r6, [r0, #64]	; 0x40
 800584c:	e78f      	b.n	800576e <PWMC_SetPhaseVoltage+0x82>
      if ( wX <= 0 )
 800584e:	2b00      	cmp	r3, #0
 8005850:	dd46      	ble.n	80058e0 <PWMC_SetPhaseVoltage+0x1f4>
        pHandle->Sector = SECTOR_1;
 8005852:	2100      	movs	r1, #0
 8005854:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhB = wTimePhA + wZ / 131072;
 8005858:	1e31      	subs	r1, r6, #0
 800585a:	bfb8      	it	lt
 800585c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005860:	eba3 0402 	sub.w	r4, r3, r2
        wTimePhB = wTimePhA + wZ / 131072;
 8005864:	bfb8      	it	lt
 8005866:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800586a:	08aa      	lsrs	r2, r5, #2
        wTimePhC = wTimePhB - wX / 131072;
 800586c:	2b00      	cmp	r3, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800586e:	eb02 42a4 	add.w	r2, r2, r4, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005872:	bfb8      	it	lt
 8005874:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005878:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800587c:	bfb8      	it	lt
 800587e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
        pHandle->midDuty = wTimePhB;
 8005882:	b28e      	uxth	r6, r1
        wTimePhC = wTimePhB - wX / 131072;
 8005884:	eba1 4163 	sub.w	r1, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8005888:	b292      	uxth	r2, r2
        pHandle->highDuty = wTimePhC;
 800588a:	b289      	uxth	r1, r1
        pHandle->lowDuty = wTimePhA;
 800588c:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800588e:	87c6      	strh	r6, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8005890:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8005894:	e76b      	b.n	800576e <PWMC_SetPhaseVoltage+0x82>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005896:	1a9c      	subs	r4, r3, r2
 8005898:	bf44      	itt	mi
 800589a:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 800589e:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80058a2:	2e00      	cmp	r6, #0
 80058a4:	bfbc      	itt	lt
 80058a6:	f506 367f 	addlt.w	r6, r6, #261120	; 0x3fc00
 80058aa:	f206 36ff 	addwlt	r6, r6, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80058ae:	08aa      	lsrs	r2, r5, #2
        wTimePhC = wTimePhB - wX / 131072;
 80058b0:	2b00      	cmp	r3, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80058b2:	eb02 42a4 	add.w	r2, r2, r4, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80058b6:	bfb8      	it	lt
 80058b8:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80058bc:	eb02 46a6 	add.w	r6, r2, r6, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80058c0:	bfb8      	it	lt
 80058c2:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
        pHandle->Sector = SECTOR_4;
 80058c6:	2103      	movs	r1, #3
        wTimePhC = wTimePhB - wX / 131072;
 80058c8:	eba6 4363 	sub.w	r3, r6, r3, asr #17
        pHandle->Sector = SECTOR_4;
 80058cc:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        pHandle->midDuty = wTimePhB;
 80058d0:	b2b6      	uxth	r6, r6
        pHandle->lowDuty = wTimePhC;
 80058d2:	b299      	uxth	r1, r3
        pHandle->highDuty = wTimePhA;
 80058d4:	b292      	uxth	r2, r2
        pHandle->lowDuty = wTimePhC;
 80058d6:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 80058d8:	87c6      	strh	r6, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80058da:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80058de:	e746      	b.n	800576e <PWMC_SetPhaseVoltage+0x82>
        wTimePhC = wTimePhA - wY / 131072;
 80058e0:	2900      	cmp	r1, #0
 80058e2:	bfb8      	it	lt
 80058e4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80058e8:	ea4f 0295 	mov.w	r2, r5, lsr #2
        wTimePhC = wTimePhA - wY / 131072;
 80058ec:	bfb8      	it	lt
 80058ee:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80058f2:	1ae4      	subs	r4, r4, r3
        wTimePhB = wTimePhC + wX / 131072;
 80058f4:	2b00      	cmp	r3, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80058f6:	eb02 44a4 	add.w	r4, r2, r4, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80058fa:	bfb8      	it	lt
 80058fc:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8005900:	eba4 46a1 	sub.w	r6, r4, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005904:	bfb8      	it	lt
 8005906:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
        pHandle->midDuty = wTimePhC;
 800590a:	b2b1      	uxth	r1, r6
        wTimePhB = wTimePhC + wX / 131072;
 800590c:	eb06 4663 	add.w	r6, r6, r3, asr #17
        pHandle->Sector = SECTOR_6;
 8005910:	2505      	movs	r5, #5
        pHandle->lowDuty = wTimePhA;
 8005912:	b2a2      	uxth	r2, r4
        pHandle->highDuty = wTimePhB;
 8005914:	b2b6      	uxth	r6, r6
        pHandle->Sector = SECTOR_6;
 8005916:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
        pHandle->lowDuty = wTimePhA;
 800591a:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800591c:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800591e:	f8a0 6040 	strh.w	r6, [r0, #64]	; 0x40
 8005922:	e724      	b.n	800576e <PWMC_SetPhaseVoltage+0x82>

08005924 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8005924:	6883      	ldr	r3, [r0, #8]
 8005926:	4718      	bx	r3

08005928 <PWMC_SwitchOnPWM>:
  * @brief  Switches PWM generation on
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOnPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOnPwm( pHandle );
 8005928:	68c3      	ldr	r3, [r0, #12]
 800592a:	4718      	bx	r3

0800592c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800592c:	b510      	push	{r4, lr}
 800592e:	4604      	mov	r4, r0
 8005930:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8005932:	b199      	cbz	r1, 800595c <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8005934:	2901      	cmp	r1, #1
 8005936:	d002      	beq.n	800593e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8005938:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800593a:	b002      	add	sp, #8
 800593c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800593e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005942:	b1c3      	cbz	r3, 8005976 <PWMC_CurrentReadingCalibr+0x4a>
      pHandle->OffCalibrWaitTimeCounter--;
 8005944:	3b01      	subs	r3, #1
 8005946:	b29b      	uxth	r3, r3
 8005948:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f3      	bne.n	8005938 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8005950:	6903      	ldr	r3, [r0, #16]
 8005952:	9101      	str	r1, [sp, #4]
 8005954:	4798      	blx	r3
        retVal = true;
 8005956:	9901      	ldr	r1, [sp, #4]
 8005958:	4608      	mov	r0, r1
 800595a:	e7ee      	b.n	800593a <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 800595c:	f7ff ffe2 	bl	8005924 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8005960:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005964:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e5      	bne.n	8005938 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 800596c:	4620      	mov	r0, r4
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	4798      	blx	r3
      retVal = true;
 8005972:	2001      	movs	r0, #1
 8005974:	e7e1      	b.n	800593a <PWMC_CurrentReadingCalibr+0xe>
      retVal = true;
 8005976:	4608      	mov	r0, r1
}
 8005978:	b002      	add	sp, #8
 800597a:	bd10      	pop	{r4, pc}

0800597c <PWMC_TurnOnLowSides>:
  *
  * @param  pHandle: handle on the target instance of the PWMC component
  */
__weak void PWMC_TurnOnLowSides( PWMC_Handle_t * pHandle )
{
  pHandle->pFctTurnOnLowSides( pHandle );
 800597c:	6943      	ldr	r3, [r0, #20]
 800597e:	4718      	bx	r3

08005980 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005980:	69c3      	ldr	r3, [r0, #28]
 8005982:	4718      	bx	r3

08005984 <R3_1_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8005984:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005986:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8005988:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800598c:	685d      	ldr	r5, [r3, #4]
 800598e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005992:	2c05      	cmp	r4, #5
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8005994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8005996:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8005998:	6813      	ldr	r3, [r2, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800599a:	6836      	ldr	r6, [r6, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800599c:	686a      	ldr	r2, [r5, #4]
 800599e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80059a2:	606a      	str	r2, [r5, #4]
 80059a4:	d83c      	bhi.n	8005a20 <R3_1_GetPhaseCurrents+0x9c>
 80059a6:	2201      	movs	r2, #1
 80059a8:	fa02 f404 	lsl.w	r4, r2, r4
 80059ac:	f014 0f21 	tst.w	r4, #33	; 0x21
 80059b0:	d11b      	bne.n	80059ea <R3_1_GetPhaseCurrents+0x66>
 80059b2:	f014 0f06 	tst.w	r4, #6
 80059b6:	d043      	beq.n	8005a40 <R3_1_GetPhaseCurrents+0xbc>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80059b8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 80059ba:	4d53      	ldr	r5, [pc, #332]	; (8005b08 <R3_1_GetPhaseCurrents+0x184>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80059bc:	1ad4      	subs	r4, r2, r3
      if ( Aux < -INT16_MAX )
 80059be:	42ac      	cmp	r4, r5
 80059c0:	da75      	bge.n	8005aae <R3_1_GetPhaseCurrents+0x12a>
 80059c2:	462c      	mov	r4, r5
      {
        Iab->a = -INT16_MAX;
 80059c4:	800d      	strh	r5, [r1, #0]
 80059c6:	462f      	mov	r7, r5
 80059c8:	f248 0301 	movw	r3, #32769	; 0x8001
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80059cc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80059ce:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 80059d0:	1b12      	subs	r2, r2, r4

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 80059d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80059d6:	da74      	bge.n	8005ac2 <R3_1_GetPhaseCurrents+0x13e>
      {
        Iab->b = INT16_MAX;
      }
      else  if ( Aux < -INT16_MAX )
 80059d8:	4c4b      	ldr	r4, [pc, #300]	; (8005b08 <R3_1_GetPhaseCurrents+0x184>)
 80059da:	42a2      	cmp	r2, r4
 80059dc:	db7d      	blt.n	8005ada <R3_1_GetPhaseCurrents+0x156>
      {
        Iab->b = -INT16_MAX;
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 80059de:	fa0f fe82 	sxth.w	lr, r2
 80059e2:	f8a1 e002 	strh.w	lr, [r1, #2]
 80059e6:	b292      	uxth	r2, r2
 80059e8:	e021      	b.n	8005a2e <R3_1_GetPhaseCurrents+0xaa>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80059ea:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 80059ec:	4d46      	ldr	r5, [pc, #280]	; (8005b08 <R3_1_GetPhaseCurrents+0x184>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80059ee:	1ae4      	subs	r4, r4, r3
      if ( Aux < -INT16_MAX )
 80059f0:	42ac      	cmp	r4, r5
 80059f2:	db46      	blt.n	8005a82 <R3_1_GetPhaseCurrents+0xfe>
      else  if ( Aux > INT16_MAX )
 80059f4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80059f8:	db53      	blt.n	8005aa2 <R3_1_GetPhaseCurrents+0x11e>
        Iab->b = INT16_MAX;
 80059fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80059fe:	461a      	mov	r2, r3
 8005a00:	804b      	strh	r3, [r1, #2]
 8005a02:	461c      	mov	r4, r3
 8005a04:	469e      	mov	lr, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8005a06:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8005a08:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8005a0a:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8005a0c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005a10:	da3d      	bge.n	8005a8e <R3_1_GetPhaseCurrents+0x10a>
      else  if ( Aux < -INT16_MAX )
 8005a12:	4f3d      	ldr	r7, [pc, #244]	; (8005b08 <R3_1_GetPhaseCurrents+0x184>)
 8005a14:	42bc      	cmp	r4, r7
 8005a16:	da40      	bge.n	8005a9a <R3_1_GetPhaseCurrents+0x116>
        Iab->a = -INT16_MAX;
 8005a18:	800f      	strh	r7, [r1, #0]
 8005a1a:	f248 0301 	movw	r3, #32769	; 0x8001
 8005a1e:	e006      	b.n	8005a2e <R3_1_GetPhaseCurrents+0xaa>
 8005a20:	f9b1 7000 	ldrsh.w	r7, [r1]
 8005a24:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8005a28:	b2bb      	uxth	r3, r7
 8005a2a:	fa1f f28e 	uxth.w	r2, lr
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005a2e:	4413      	add	r3, r2
 8005a30:	425b      	negs	r3, r3
 8005a32:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.Ia = Iab->a;
 8005a36:	f8a0 7048 	strh.w	r7, [r0, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 8005a3a:	f8a0 e04a 	strh.w	lr, [r0, #74]	; 0x4a
 8005a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a40:	f014 0f18 	tst.w	r4, #24
 8005a44:	d0ec      	beq.n	8005a20 <R3_1_GetPhaseCurrents+0x9c>
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005a46:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8005a48:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005a4c:	1ae4      	subs	r4, r4, r3
      if ( Aux < -INT16_MAX )
 8005a4e:	4294      	cmp	r4, r2
 8005a50:	db41      	blt.n	8005ad6 <R3_1_GetPhaseCurrents+0x152>
      else  if ( Aux > INT16_MAX )
 8005a52:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
        Iab->a = INT16_MAX;
 8005a56:	bfa6      	itte	ge
 8005a58:	f647 73ff 	movwge	r3, #32767	; 0x7fff
 8005a5c:	800b      	strhge	r3, [r1, #0]
        Iab->a = ( int16_t )Aux;
 8005a5e:	800c      	strhlt	r4, [r1, #0]
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8005a60:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <R3_1_GetPhaseCurrents+0x184>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8005a64:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8005a66:	429a      	cmp	r2, r3
 8005a68:	db3c      	blt.n	8005ae4 <R3_1_GetPhaseCurrents+0x160>
      else  if ( Aux > INT16_MAX )
 8005a6a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005a6e:	db41      	blt.n	8005af4 <R3_1_GetPhaseCurrents+0x170>
 8005a70:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = INT16_MAX;
 8005a74:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005a78:	804b      	strh	r3, [r1, #2]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	469e      	mov	lr, r3
 8005a7e:	b2bb      	uxth	r3, r7
 8005a80:	e7d5      	b.n	8005a2e <R3_1_GetPhaseCurrents+0xaa>
 8005a82:	462c      	mov	r4, r5
        Iab->b = -INT16_MAX;
 8005a84:	804d      	strh	r5, [r1, #2]
 8005a86:	46ae      	mov	lr, r5
 8005a88:	f248 0201 	movw	r2, #32769	; 0x8001
 8005a8c:	e7bb      	b.n	8005a06 <R3_1_GetPhaseCurrents+0x82>
        Iab->a = INT16_MAX;
 8005a8e:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8005a92:	4623      	mov	r3, r4
 8005a94:	800c      	strh	r4, [r1, #0]
 8005a96:	4627      	mov	r7, r4
 8005a98:	e7c9      	b.n	8005a2e <R3_1_GetPhaseCurrents+0xaa>
        Iab->a = ( int16_t )Aux;
 8005a9a:	b227      	sxth	r7, r4
 8005a9c:	800f      	strh	r7, [r1, #0]
 8005a9e:	b2a3      	uxth	r3, r4
 8005aa0:	e7c5      	b.n	8005a2e <R3_1_GetPhaseCurrents+0xaa>
        Iab->b = ( int16_t )Aux;
 8005aa2:	fa0f fe84 	sxth.w	lr, r4
 8005aa6:	f8a1 e002 	strh.w	lr, [r1, #2]
 8005aaa:	b2a2      	uxth	r2, r4
 8005aac:	e7ab      	b.n	8005a06 <R3_1_GetPhaseCurrents+0x82>
      else  if ( Aux > INT16_MAX )
 8005aae:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005ab2:	db0c      	blt.n	8005ace <R3_1_GetPhaseCurrents+0x14a>
        Iab->a = INT16_MAX;
 8005ab4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005ab8:	4613      	mov	r3, r2
 8005aba:	800a      	strh	r2, [r1, #0]
 8005abc:	4614      	mov	r4, r2
 8005abe:	4617      	mov	r7, r2
 8005ac0:	e784      	b.n	80059cc <R3_1_GetPhaseCurrents+0x48>
        Iab->b = INT16_MAX;
 8005ac2:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	804c      	strh	r4, [r1, #2]
 8005aca:	46a6      	mov	lr, r4
 8005acc:	e7af      	b.n	8005a2e <R3_1_GetPhaseCurrents+0xaa>
        Iab->a = ( int16_t )Aux;
 8005ace:	b227      	sxth	r7, r4
 8005ad0:	800f      	strh	r7, [r1, #0]
 8005ad2:	b2a3      	uxth	r3, r4
 8005ad4:	e77a      	b.n	80059cc <R3_1_GetPhaseCurrents+0x48>
        Iab->a = -INT16_MAX;
 8005ad6:	800a      	strh	r2, [r1, #0]
 8005ad8:	e7c2      	b.n	8005a60 <R3_1_GetPhaseCurrents+0xdc>
        Iab->b = -INT16_MAX;
 8005ada:	804c      	strh	r4, [r1, #2]
 8005adc:	46a6      	mov	lr, r4
 8005ade:	f248 0201 	movw	r2, #32769	; 0x8001
 8005ae2:	e7a4      	b.n	8005a2e <R3_1_GetPhaseCurrents+0xaa>
 8005ae4:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = -INT16_MAX;
 8005ae8:	804b      	strh	r3, [r1, #2]
 8005aea:	469e      	mov	lr, r3
 8005aec:	f248 0201 	movw	r2, #32769	; 0x8001
 8005af0:	b2bb      	uxth	r3, r7
 8005af2:	e79c      	b.n	8005a2e <R3_1_GetPhaseCurrents+0xaa>
 8005af4:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = ( int16_t )Aux;
 8005af8:	fa0f fe82 	sxth.w	lr, r2
 8005afc:	b2bb      	uxth	r3, r7
 8005afe:	f8a1 e002 	strh.w	lr, [r1, #2]
 8005b02:	b292      	uxth	r2, r2
 8005b04:	e793      	b.n	8005a2e <R3_1_GetPhaseCurrents+0xaa>
 8005b06:	bf00      	nop
 8005b08:	ffff8001 	.word	0xffff8001

08005b0c <R3_1_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8005b0c:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b0e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8005b10:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8005b14:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8005b18:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b1c:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8005b1e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8005b20:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8005b22:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005b24:	635d      	str	r5, [r3, #52]	; 0x34
  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8005b26:	3a01      	subs	r2, #1
 8005b28:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005b2a:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005b2c:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f013 0f70 	tst.w	r3, #112	; 0x70
}
 8005b36:	bf14      	ite	ne
 8005b38:	2001      	movne	r0, #1
 8005b3a:	2000      	moveq	r0, #0
 8005b3c:	bc30      	pop	{r4, r5}
 8005b3e:	4770      	bx	lr

08005b40 <R3_1_SetADCSampPointSectX>:
{
 8005b40:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8005b42:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8005b46:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8005b48:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8005b4a:	1aca      	subs	r2, r1, r3
 8005b4c:	f8b4 6072 	ldrh.w	r6, [r4, #114]	; 0x72
 8005b50:	b292      	uxth	r2, r2
 8005b52:	42b2      	cmp	r2, r6
 8005b54:	d914      	bls.n	8005b80 <R3_1_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8005b56:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8005b58:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8005b5a:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 8005b5c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b60:	6862      	ldr	r2, [r4, #4]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8005b62:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8005b64:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8005b66:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005b68:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005b6a:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005b6c:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005b6e:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005b70:	6853      	ldr	r3, [r2, #4]
 8005b72:	f013 0f70 	tst.w	r3, #112	; 0x70
}
 8005b76:	bf14      	ite	ne
 8005b78:	2001      	movne	r0, #1
 8005b7a:	2000      	moveq	r0, #0
 8005b7c:	bc70      	pop	{r4, r5, r6}
 8005b7e:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8005b80:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 8005b82:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8005b84:	b2ad      	uxth	r5, r5
 8005b86:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8005b8a:	d904      	bls.n	8005b96 <R3_1_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8005b8c:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	e7e4      	b.n	8005b60 <R3_1_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8005b96:	4433      	add	r3, r6
 8005b98:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	d8e0      	bhi.n	8005b60 <R3_1_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8005ba4:	2280      	movs	r2, #128	; 0x80
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8005ba6:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8005ba8:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
 8005bac:	e7d8      	b.n	8005b60 <R3_1_SetADCSampPointSectX+0x20>
 8005bae:	bf00      	nop

08005bb0 <R3_1_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8005bb0:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005bb2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005bb4:	f890 406f 	ldrb.w	r4, [r0, #111]	; 0x6f
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8005bbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8005bc2:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005bc4:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005bc6:	6853      	ldr	r3, [r2, #4]
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bcc:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005bce:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8005bd2:	2b0f      	cmp	r3, #15
 8005bd4:	d808      	bhi.n	8005be8 <R3_1_HFCurrentsPolarizationAB+0x38>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 8005bd6:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8005bd8:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 8005bda:	3301      	adds	r3, #1
    pHandle-> PhaseAOffset += ADCDataReg1;
 8005bdc:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 8005bde:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8005be0:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
    pHandle-> PhaseAOffset += ADCDataReg1;
 8005be4:	65c4      	str	r4, [r0, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8005be6:	6602      	str	r2, [r0, #96]	; 0x60
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	600b      	str	r3, [r1, #0]
  Iab->b = 0;
}
 8005bec:	bc70      	pop	{r4, r5, r6}
 8005bee:	4770      	bx	lr

08005bf0 <R3_1_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005bf0:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8005bf2:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005bf4:	f890 406f 	ldrb.w	r4, [r0, #111]	; 0x6f
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005bf8:	685a      	ldr	r2, [r3, #4]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005bfa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	681c      	ldr	r4, [r3, #0]
 8005c02:	6853      	ldr	r3, [r2, #4]
 8005c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c08:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005c0a:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8005c0e:	2b0f      	cmp	r3, #15
 8005c10:	d805      	bhi.n	8005c1e <R3_1_HFCurrentsPolarizationC+0x2e>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8005c12:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8005c14:	3301      	adds	r3, #1
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8005c16:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8005c18:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8005c1c:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	600b      	str	r3, [r1, #0]
  Iab->b = 0;
}
 8005c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <R3_1_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005c28:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8005c2a:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005c2c:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005c2e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005c32:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005c34:	f06f 0001 	mvn.w	r0, #1
 8005c38:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005c3a:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005c3c:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005c3e:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005c40:	6913      	ldr	r3, [r2, #16]
 8005c42:	07db      	lsls	r3, r3, #31
 8005c44:	d5fc      	bpl.n	8005c40 <R3_1_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005c46:	6c53      	ldr	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005c48:	f891 007a 	ldrb.w	r0, [r1, #122]	; 0x7a
 8005c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c50:	2802      	cmp	r0, #2
 8005c52:	6453      	str	r3, [r2, #68]	; 0x44
 8005c54:	d10d      	bne.n	8005c72 <R3_1_TurnOnLowSides+0x4a>
{
 8005c56:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005c58:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005c5a:	698d      	ldr	r5, [r1, #24]
 8005c5c:	f8b1 606c 	ldrh.w	r6, [r1, #108]	; 0x6c
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005c60:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005c64:	6a0b      	ldr	r3, [r1, #32]
 8005c66:	f8b1 2070 	ldrh.w	r2, [r1, #112]	; 0x70
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005c6a:	61ae      	str	r6, [r5, #24]
 8005c6c:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8005c6e:	bc70      	pop	{r4, r5, r6}
 8005c70:	619a      	str	r2, [r3, #24]
 8005c72:	4770      	bx	lr

08005c74 <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005c74:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8005c76:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005c7a:	684b      	ldr	r3, [r1, #4]
{
 8005c7c:	b470      	push	{r4, r5, r6}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005c7e:	2400      	movs	r4, #0
 8005c80:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8005c84:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005c86:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8005c8a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005c8c:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005c8e:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005c90:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005c92:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005c94:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	07d2      	lsls	r2, r2, #31
 8005c9a:	d5fc      	bpl.n	8005c96 <R3_1_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005c9c:	f06f 0201 	mvn.w	r2, #1
 8005ca0:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005ca4:	f891 007a 	ldrb.w	r0, [r1, #122]	; 0x7a
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cac:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005cae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005cb0:	2802      	cmp	r0, #2
 8005cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cb6:	645a      	str	r2, [r3, #68]	; 0x44
 8005cb8:	d008      	beq.n	8005ccc <R3_1_SwitchOnPWM+0x58>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005cba:	f06f 0201 	mvn.w	r2, #1
 8005cbe:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8005cc8:	bc70      	pop	{r4, r5, r6}
 8005cca:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005ccc:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005cce:	698d      	ldr	r5, [r1, #24]
 8005cd0:	f8b1 606c 	ldrh.w	r6, [r1, #108]	; 0x6c
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005cd4:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005cd8:	f240 5255 	movw	r2, #1365	; 0x555
 8005cdc:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005cde:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005ce0:	6a0a      	ldr	r2, [r1, #32]
 8005ce2:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005ce6:	d103      	bne.n	8005cf0 <R3_1_SwitchOnPWM+0x7c>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8005ce8:	62ae      	str	r6, [r5, #40]	; 0x28
 8005cea:	6284      	str	r4, [r0, #40]	; 0x28
 8005cec:	6291      	str	r1, [r2, #40]	; 0x28
 8005cee:	e7e4      	b.n	8005cba <R3_1_SwitchOnPWM+0x46>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005cf0:	61ae      	str	r6, [r5, #24]
 8005cf2:	6184      	str	r4, [r0, #24]
 8005cf4:	6191      	str	r1, [r2, #24]
 8005cf6:	e7e0      	b.n	8005cba <R3_1_SwitchOnPWM+0x46>

08005cf8 <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005cf8:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8005cfa:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005cfc:	68d3      	ldr	r3, [r2, #12]
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
{
 8005d02:	b470      	push	{r4, r5, r6}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8005d04:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 8005d08:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005d0a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005d0c:	2500      	movs	r5, #0
 8005d0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d12:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8005d16:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 8005d18:	b91c      	cbnz	r4, 8005d22 <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005d1a:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d00a      	beq.n	8005d38 <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005d22:	f06f 0301 	mvn.w	r3, #1
 8005d26:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005d28:	6913      	ldr	r3, [r2, #16]
 8005d2a:	07db      	lsls	r3, r3, #31
 8005d2c:	d5fc      	bpl.n	8005d28 <R3_1_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005d2e:	f06f 0301 	mvn.w	r3, #1
 8005d32:	6113      	str	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

}
 8005d34:	bc70      	pop	{r4, r5, r6}
 8005d36:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005d38:	698d      	ldr	r5, [r1, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005d3a:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005d3c:	6a0b      	ldr	r3, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005d3e:	f8b1 606c 	ldrh.w	r6, [r1, #108]	; 0x6c
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005d42:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005d46:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
  WRITE_REG(GPIOx->BRR, PinMask);
 8005d4a:	62ae      	str	r6, [r5, #40]	; 0x28
 8005d4c:	6284      	str	r4, [r0, #40]	; 0x28
 8005d4e:	6299      	str	r1, [r3, #40]	; 0x28
 8005d50:	e7e7      	b.n	8005d22 <R3_1_SwitchOffPWM+0x2a>
 8005d52:	bf00      	nop

08005d54 <R3_1_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005d54:	6f42      	ldr	r2, [r0, #116]	; 0x74
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 8005d56:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 8005d58:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005d5a:	6855      	ldr	r5, [r2, #4]

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8005d5c:	4e10      	ldr	r6, [pc, #64]	; (8005da0 <R3_1_RLGetPhaseCurrents+0x4c>)
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005d5e:	686c      	ldr	r4, [r5, #4]
 8005d60:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8005d64:	606c      	str	r4, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 8005d66:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
 8005d6a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005d6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	1a9b      	subs	r3, r3, r2
  if ( wAux > -INT16_MAX )
 8005d74:	42b3      	cmp	r3, r6
 8005d76:	db0e      	blt.n	8005d96 <R3_1_RLGetPhaseCurrents+0x42>
  {
    if ( wAux < INT16_MAX )
 8005d78:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	dd05      	ble.n	8005d8c <R3_1_RLGetPhaseCurrents+0x38>
 8005d80:	f647 73ff 	movw	r3, #32767	; 0x7fff
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8005d84:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 8005d86:	804b      	strh	r3, [r1, #2]
}
 8005d88:	bc70      	pop	{r4, r5, r6}
 8005d8a:	4770      	bx	lr
 8005d8c:	b21b      	sxth	r3, r3
  pStator_Currents->a = (int16_t)wAux;
 8005d8e:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 8005d90:	804b      	strh	r3, [r1, #2]
}
 8005d92:	bc70      	pop	{r4, r5, r6}
 8005d94:	4770      	bx	lr
 8005d96:	4b03      	ldr	r3, [pc, #12]	; (8005da4 <R3_1_RLGetPhaseCurrents+0x50>)
  pStator_Currents->a = (int16_t)wAux;
 8005d98:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 8005d9a:	804b      	strh	r3, [r1, #2]
}
 8005d9c:	bc70      	pop	{r4, r5, r6}
 8005d9e:	4770      	bx	lr
 8005da0:	ffff8002 	.word	0xffff8002
 8005da4:	ffff8001 	.word	0xffff8001

08005da8 <R3_1_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005da8:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8005daa:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005dac:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005dae:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005db2:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005db4:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005db6:	6913      	ldr	r3, [r2, #16]
 8005db8:	07db      	lsls	r3, r3, #31
 8005dba:	d5fc      	bpl.n	8005db6 <R3_1_RLTurnOnLowSides+0xe>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005dbc:	f06f 0301 	mvn.w	r3, #1
 8005dc0:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005dc2:	6c53      	ldr	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005dc4:	f891 007a 	ldrb.w	r0, [r1, #122]	; 0x7a
 8005dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dcc:	2802      	cmp	r0, #2
 8005dce:	6453      	str	r3, [r2, #68]	; 0x44
 8005dd0:	d10d      	bne.n	8005dee <R3_1_RLTurnOnLowSides+0x46>
{
 8005dd2:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005dd4:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005dd6:	698d      	ldr	r5, [r1, #24]
 8005dd8:	f8b1 606c 	ldrh.w	r6, [r1, #108]	; 0x6c
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005ddc:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005de0:	6a0b      	ldr	r3, [r1, #32]
 8005de2:	f8b1 2070 	ldrh.w	r2, [r1, #112]	; 0x70
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005de6:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005de8:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 8005dea:	bc70      	pop	{r4, r5, r6}
 8005dec:	629a      	str	r2, [r3, #40]	; 0x28
 8005dee:	4770      	bx	lr

08005df0 <R3_1_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005df0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005df2:	2200      	movs	r2, #0
{
 8005df4:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005df6:	684b      	ldr	r3, [r1, #4]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005df8:	680c      	ldr	r4, [r1, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005dfa:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	06d6      	lsls	r6, r2, #27
 8005e02:	d4fc      	bmi.n	8005dfe <R3_1_RLSwitchOnPWM+0xe>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	06d5      	lsls	r5, r2, #27
 8005e08:	d5fc      	bpl.n	8005e04 <R3_1_RLSwitchOnPWM+0x14>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8005e0a:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005e0e:	2601      	movs	r6, #1
 8005e10:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005e12:	f06f 0501 	mvn.w	r5, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005e16:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005e1a:	611d      	str	r5, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	07d2      	lsls	r2, r2, #31
 8005e20:	d5fc      	bpl.n	8005e1c <R3_1_RLSwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005e22:	f06f 0201 	mvn.w	r2, #1
 8005e26:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005e2a:	f891 507a 	ldrb.w	r5, [r1, #122]	; 0x7a
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005e2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e32:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005e36:	2d02      	cmp	r5, #2
 8005e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
 8005e3e:	d010      	beq.n	8005e62 <R3_1_RLSwitchOnPWM+0x72>
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8005e40:	2203      	movs	r2, #3
 8005e42:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 8005e46:	68a2      	ldr	r2, [r4, #8]
 8005e48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e4c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005e50:	f042 0208 	orr.w	r2, r2, #8
 8005e54:	60a2      	str	r2, [r4, #8]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	60da      	str	r2, [r3, #12]
  LL_TIM_EnableIT_UPDATE( TIMx );



  return;
}
 8005e5e:	bcf0      	pop	{r4, r5, r6, r7}
 8005e60:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005e62:	6a1d      	ldr	r5, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005e64:	698e      	ldr	r6, [r1, #24]
 8005e66:	f8b1 706c 	ldrh.w	r7, [r1, #108]	; 0x6c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005e6a:	f240 5255 	movw	r2, #1365	; 0x555
 8005e6e:	4215      	tst	r5, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005e70:	69cd      	ldr	r5, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005e72:	6a0a      	ldr	r2, [r1, #32]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8005e74:	d107      	bne.n	8005e86 <R3_1_RLSwitchOnPWM+0x96>
 8005e76:	62b7      	str	r7, [r6, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005e78:	f8b1 606e 	ldrh.w	r6, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005e7c:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 8005e80:	62ae      	str	r6, [r5, #40]	; 0x28
 8005e82:	6291      	str	r1, [r2, #40]	; 0x28
 8005e84:	e7dc      	b.n	8005e40 <R3_1_RLSwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005e86:	61b7      	str	r7, [r6, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005e88:	f8b1 606e 	ldrh.w	r6, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005e8c:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 8005e90:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005e92:	6291      	str	r1, [r2, #40]	; 0x28
 8005e94:	e7d4      	b.n	8005e40 <R3_1_RLSwitchOnPWM+0x50>
 8005e96:	bf00      	nop

08005e98 <R3_1_Init>:
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8005e98:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005e9a:	680b      	ldr	r3, [r1, #0]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005e9c:	684a      	ldr	r2, [r1, #4]
{
 8005e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8005ea2:	685c      	ldr	r4, [r3, #4]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8005ea4:	688e      	ldr	r6, [r1, #8]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8005ea6:	f8d1 e00c 	ldr.w	lr, [r1, #12]
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 8005eaa:	690f      	ldr	r7, [r1, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8005eac:	694d      	ldr	r5, [r1, #20]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8005eae:	f04f 0c04 	mov.w	ip, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8005eb2:	f024 0404 	bic.w	r4, r4, #4
 8005eb6:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8005eb8:	f8c3 c000 	str.w	ip, [r3]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8005ebc:	685c      	ldr	r4, [r3, #4]
    if ( TIMx == TIM1 )
 8005ebe:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 8006184 <R3_1_Init+0x2ec>
 8005ec2:	f024 0420 	bic.w	r4, r4, #32
 8005ec6:	605c      	str	r4, [r3, #4]
 8005ec8:	4562      	cmp	r2, ip
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8005eca:	f04f 0420 	mov.w	r4, #32
{
 8005ece:	b082      	sub	sp, #8
 8005ed0:	601c      	str	r4, [r3, #0]
    if ( TIMx == TIM1 )
 8005ed2:	d079      	beq.n	8005fc8 <R3_1_Init+0x130>
    if ( COMP_OCPAx != NULL )
 8005ed4:	b18e      	cbz	r6, 8005efa <R3_1_Init+0x62>
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 8005ed6:	f891 407d 	ldrb.w	r4, [r1, #125]	; 0x7d
 8005eda:	2c01      	cmp	r4, #1
 8005edc:	d005      	beq.n	8005eea <R3_1_Init+0x52>
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 8005ede:	6834      	ldr	r4, [r6, #0]
 8005ee0:	f004 0470 	and.w	r4, r4, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8005ee4:	2c40      	cmp	r4, #64	; 0x40
 8005ee6:	f000 80fe 	beq.w	80060e6 <R3_1_Init+0x24e>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8005eea:	6834      	ldr	r4, [r6, #0]
 8005eec:	f044 0401 	orr.w	r4, r4, #1
 8005ef0:	6034      	str	r4, [r6, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8005ef2:	6834      	ldr	r4, [r6, #0]
 8005ef4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005ef8:	6034      	str	r4, [r6, #0]
    if ( COMP_OCPBx != NULL )
 8005efa:	f1be 0f00 	cmp.w	lr, #0
 8005efe:	d00b      	beq.n	8005f18 <R3_1_Init+0x80>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8005f00:	f8de 4000 	ldr.w	r4, [lr]
 8005f04:	f044 0401 	orr.w	r4, r4, #1
 8005f08:	f8ce 4000 	str.w	r4, [lr]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8005f0c:	f8de 4000 	ldr.w	r4, [lr]
 8005f10:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005f14:	f8ce 4000 	str.w	r4, [lr]
    if ( COMP_OCPCx != NULL )
 8005f18:	b13f      	cbz	r7, 8005f2a <R3_1_Init+0x92>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8005f1a:	683c      	ldr	r4, [r7, #0]
 8005f1c:	f044 0401 	orr.w	r4, r4, #1
 8005f20:	603c      	str	r4, [r7, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8005f22:	683c      	ldr	r4, [r7, #0]
 8005f24:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005f28:	603c      	str	r4, [r7, #0]
    if ( COMP_OVPx != NULL )
 8005f2a:	b18d      	cbz	r5, 8005f50 <R3_1_Init+0xb8>
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 8005f2c:	f891 4080 	ldrb.w	r4, [r1, #128]	; 0x80
 8005f30:	2c01      	cmp	r4, #1
 8005f32:	d005      	beq.n	8005f40 <R3_1_Init+0xa8>
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 8005f34:	682c      	ldr	r4, [r5, #0]
 8005f36:	f004 0470 	and.w	r4, r4, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8005f3a:	2c40      	cmp	r4, #64	; 0x40
 8005f3c:	f000 80ae 	beq.w	800609c <R3_1_Init+0x204>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8005f40:	682c      	ldr	r4, [r5, #0]
 8005f42:	f044 0401 	orr.w	r4, r4, #1
 8005f46:	602c      	str	r4, [r5, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8005f48:	682c      	ldr	r4, [r5, #0]
 8005f4a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005f4e:	602c      	str	r4, [r5, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8005f50:	689c      	ldr	r4, [r3, #8]
    if (LL_ADC_IsEnabled (ADCx) == 0)
 8005f52:	07e6      	lsls	r6, r4, #31
 8005f54:	d554      	bpl.n	8006000 <R3_1_Init+0x168>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005f56:	6813      	ldr	r3, [r2, #0]
 8005f58:	f023 0301 	bic.w	r3, r3, #1
 8005f5c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005f5e:	6853      	ldr	r3, [r2, #4]
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	6053      	str	r3, [r2, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005f66:	6993      	ldr	r3, [r2, #24]
 8005f68:	f043 0308 	orr.w	r3, r3, #8
 8005f6c:	6193      	str	r3, [r2, #24]
 8005f6e:	6993      	ldr	r3, [r2, #24]
 8005f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f74:	6193      	str	r3, [r2, #24]
 8005f76:	69d3      	ldr	r3, [r2, #28]
 8005f78:	f043 0308 	orr.w	r3, r3, #8
 8005f7c:	61d3      	str	r3, [r2, #28]
 8005f7e:	69d3      	ldr	r3, [r2, #28]
 8005f80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f84:	61d3      	str	r3, [r2, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005f86:	6953      	ldr	r3, [r2, #20]
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6153      	str	r3, [r2, #20]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8005f8e:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d021      	beq.n	8005fda <R3_1_Init+0x142>
    if ( pHandle->_Super.Motor == M1 )
 8005f96:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8005f9a:	b933      	cbnz	r3, 8005faa <R3_1_Init+0x112>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8005f9c:	f891 307b 	ldrb.w	r3, [r1, #123]	; 0x7b
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d028      	beq.n	8005ff6 <R3_1_Init+0x15e>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	f000 80ca 	beq.w	800613e <R3_1_Init+0x2a6>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005faa:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8005fae:	6113      	str	r3, [r2, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8005fb0:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 80ca 	bne.w	800614e <R3_1_Init+0x2b6>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8005fba:	68d3      	ldr	r3, [r2, #12]
 8005fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc0:	60d3      	str	r3, [r2, #12]
}
 8005fc2:	b002      	add	sp, #8
 8005fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8005fc8:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8006188 <R3_1_Init+0x2f0>
 8005fcc:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8005fd0:	f044 0401 	orr.w	r4, r4, #1
 8005fd4:	f8cc 400c 	str.w	r4, [ip, #12]
 8005fd8:	e77c      	b.n	8005ed4 <R3_1_Init+0x3c>
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8005fda:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d109      	bne.n	8005ff6 <R3_1_Init+0x15e>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8005fe2:	f891 407b 	ldrb.w	r4, [r1, #123]	; 0x7b
 8005fe6:	2c03      	cmp	r4, #3
 8005fe8:	d105      	bne.n	8005ff6 <R3_1_Init+0x15e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005fea:	6313      	str	r3, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005fec:	6953      	ldr	r3, [r2, #20]
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	6153      	str	r3, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005ff4:	6314      	str	r4, [r2, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8005ff6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8005ffa:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8005ffc:	6253      	str	r3, [r2, #36]	; 0x24
 8005ffe:	e7d4      	b.n	8005faa <R3_1_Init+0x112>
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 8006000:	689c      	ldr	r4, [r3, #8]
 8006002:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 8006006:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800600a:	d01b      	beq.n	8006044 <R3_1_Init+0x1ac>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800600c:	689d      	ldr	r5, [r3, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800600e:	4c59      	ldr	r4, [pc, #356]	; (8006174 <R3_1_Init+0x2dc>)
 8006010:	4e59      	ldr	r6, [pc, #356]	; (8006178 <R3_1_Init+0x2e0>)
 8006012:	6824      	ldr	r4, [r4, #0]
 8006014:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8006018:	609d      	str	r5, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800601a:	689d      	ldr	r5, [r3, #8]
 800601c:	09a4      	lsrs	r4, r4, #6
 800601e:	f025 4510 	bic.w	r5, r5, #2415919104	; 0x90000000
 8006022:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006026:	fba6 6404 	umull	r6, r4, r6, r4
 800602a:	09a4      	lsrs	r4, r4, #6
 800602c:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8006030:	609d      	str	r5, [r3, #8]
 8006032:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 8006034:	9c01      	ldr	r4, [sp, #4]
 8006036:	b12c      	cbz	r4, 8006044 <R3_1_Init+0x1ac>
      wait_loop_index--;
 8006038:	9c01      	ldr	r4, [sp, #4]
 800603a:	3c01      	subs	r4, #1
 800603c:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 800603e:	9c01      	ldr	r4, [sp, #4]
 8006040:	2c00      	cmp	r4, #0
 8006042:	d1f9      	bne.n	8006038 <R3_1_Init+0x1a0>
  MODIFY_REG(ADCx->CR,
 8006044:	689c      	ldr	r4, [r3, #8]
 8006046:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
 800604a:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800604e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006052:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8006054:	689c      	ldr	r4, [r3, #8]
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 8006056:	2c00      	cmp	r4, #0
 8006058:	dbfc      	blt.n	8006054 <R3_1_Init+0x1bc>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800605a:	681c      	ldr	r4, [r3, #0]
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800605c:	07e5      	lsls	r5, r4, #31
 800605e:	d408      	bmi.n	8006072 <R3_1_Init+0x1da>
  MODIFY_REG(ADCx->CR,
 8006060:	4d46      	ldr	r5, [pc, #280]	; (800617c <R3_1_Init+0x2e4>)
 8006062:	689c      	ldr	r4, [r3, #8]
 8006064:	402c      	ands	r4, r5
 8006066:	f044 0401 	orr.w	r4, r4, #1
 800606a:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800606c:	681c      	ldr	r4, [r3, #0]
 800606e:	07e4      	lsls	r4, r4, #31
 8006070:	d5f7      	bpl.n	8006062 <R3_1_Init+0x1ca>
  MODIFY_REG(ADCx->CR,
 8006072:	689d      	ldr	r5, [r3, #8]
 8006074:	4e41      	ldr	r6, [pc, #260]	; (800617c <R3_1_Init+0x2e4>)
 8006076:	4035      	ands	r5, r6
 8006078:	f045 0508 	orr.w	r5, r5, #8
 800607c:	609d      	str	r5, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800607e:	689c      	ldr	r4, [r3, #8]
 8006080:	4034      	ands	r4, r6
 8006082:	f044 0420 	orr.w	r4, r4, #32
 8006086:	609c      	str	r4, [r3, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 8006088:	68dc      	ldr	r4, [r3, #12]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800608a:	2540      	movs	r5, #64	; 0x40
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 800608c:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8006090:	60dc      	str	r4, [r3, #12]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8006092:	601d      	str	r5, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8006094:	685c      	ldr	r4, [r3, #4]
 8006096:	432c      	orrs	r4, r5
 8006098:	605c      	str	r4, [r3, #4]
 800609a:	e75c      	b.n	8005f56 <R3_1_Init+0xbe>
 800609c:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 80060a0:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 80060a4:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 80060a8:	fab4 f484 	clz	r4, r4
 80060ac:	40e7      	lsrs	r7, r4
 80060ae:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800618c <R3_1_Init+0x2f4>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 80060b2:	f8b1 e078 	ldrh.w	lr, [r1, #120]	; 0x78
  MODIFY_REG(*preg,
 80060b6:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 80060ba:	4e31      	ldr	r6, [pc, #196]	; (8006180 <R3_1_Init+0x2e8>)
  MODIFY_REG(*preg,
 80060bc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80060c0:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80060c4:	ea4e 0404 	orr.w	r4, lr, r4
 80060c8:	f84c 4027 	str.w	r4, [ip, r7, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 80060cc:	6874      	ldr	r4, [r6, #4]
 80060ce:	f044 0401 	orr.w	r4, r4, #1
 80060d2:	6074      	str	r4, [r6, #4]
  return (READ_BIT(DACx->CR,
 80060d4:	6834      	ldr	r4, [r6, #0]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 80060d6:	07e7      	lsls	r7, r4, #31
 80060d8:	f53f af32 	bmi.w	8005f40 <R3_1_Init+0xa8>
  SET_BIT(DACx->CR,
 80060dc:	6834      	ldr	r4, [r6, #0]
 80060de:	f044 0401 	orr.w	r4, r4, #1
 80060e2:	6034      	str	r4, [r6, #0]
 80060e4:	e72c      	b.n	8005f40 <R3_1_Init+0xa8>
 80060e6:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 80060ea:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 80060ee:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 80060f2:	fab4 f484 	clz	r4, r4
 80060f6:	fa28 f804 	lsr.w	r8, r8, r4
 80060fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800618c <R3_1_Init+0x2f4>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 80060fe:	f8b1 a076 	ldrh.w	sl, [r1, #118]	; 0x76
  MODIFY_REG(*preg,
 8006102:	f859 4028 	ldr.w	r4, [r9, r8, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8006106:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006180 <R3_1_Init+0x2e8>
  MODIFY_REG(*preg,
 800610a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800610e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8006112:	ea4a 0404 	orr.w	r4, sl, r4
 8006116:	f849 4028 	str.w	r4, [r9, r8, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 800611a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800611e:	f044 0401 	orr.w	r4, r4, #1
 8006122:	f8cc 4004 	str.w	r4, [ip, #4]
  return (READ_BIT(DACx->CR,
 8006126:	f8dc 4000 	ldr.w	r4, [ip]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 800612a:	07e4      	lsls	r4, r4, #31
 800612c:	f53f aedd 	bmi.w	8005eea <R3_1_Init+0x52>
  SET_BIT(DACx->CR,
 8006130:	f8dc 4000 	ldr.w	r4, [ip]
 8006134:	f044 0401 	orr.w	r4, r4, #1
 8006138:	f8cc 4000 	str.w	r4, [ip]
 800613c:	e6d5      	b.n	8005eea <R3_1_Init+0x52>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800613e:	2001      	movs	r0, #1
 8006140:	6310      	str	r0, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006142:	6950      	ldr	r0, [r2, #20]
 8006144:	f040 0001 	orr.w	r0, r0, #1
 8006148:	6150      	str	r0, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800614a:	6313      	str	r3, [r2, #48]	; 0x30
 800614c:	e72d      	b.n	8005faa <R3_1_Init+0x112>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800614e:	6913      	ldr	r3, [r2, #16]
 8006150:	05d8      	lsls	r0, r3, #23
 8006152:	f57f af32 	bpl.w	8005fba <R3_1_Init+0x122>
 8006156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800615a:	f46f 7080 	mvn.w	r0, #256	; 0x100
 800615e:	e002      	b.n	8006166 <R3_1_Init+0x2ce>
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8006160:	3b01      	subs	r3, #1
 8006162:	f43f af2a 	beq.w	8005fba <R3_1_Init+0x122>
 8006166:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8006168:	6911      	ldr	r1, [r2, #16]
 800616a:	05c9      	lsls	r1, r1, #23
 800616c:	f57f af25 	bpl.w	8005fba <R3_1_Init+0x122>
 8006170:	e7f6      	b.n	8006160 <R3_1_Init+0x2c8>
 8006172:	bf00      	nop
 8006174:	200006fc 	.word	0x200006fc
 8006178:	053e2d63 	.word	0x053e2d63
 800617c:	7fffffc0 	.word	0x7fffffc0
 8006180:	40007400 	.word	0x40007400
 8006184:	40012c00 	.word	0x40012c00
 8006188:	e0042000 	.word	0xe0042000
 800618c:	40007408 	.word	0x40007408

08006190 <R3_1_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006190:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 8006192:	4944      	ldr	r1, [pc, #272]	; (80062a4 <R3_1_CurrentReadingPolarization+0x114>)
{
 8006194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pHandle->PhaseAOffset = 0u;
 8006198:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800619a:	685c      	ldr	r4, [r3, #4]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800619c:	681e      	ldr	r6, [r3, #0]
  pHandle->PolarizationCounter = 0u;
 800619e:	f880 206e 	strb.w	r2, [r0, #110]	; 0x6e
  CLEAR_BIT(TIMx->CCER, Channels);
 80061a2:	6a23      	ldr	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 80061a4:	4f40      	ldr	r7, [pc, #256]	; (80062a8 <R3_1_CurrentReadingPolarization+0x118>)
  pHandle->PhaseAOffset = 0u;
 80061a6:	65c2      	str	r2, [r0, #92]	; 0x5c
 80061a8:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80061ac:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 80061b0:	6602      	str	r2, [r0, #96]	; 0x60
  pHandle->PhaseCOffset = 0u;
 80061b2:	6642      	str	r2, [r0, #100]	; 0x64
 80061b4:	6223      	str	r3, [r4, #32]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80061b6:	2240      	movs	r2, #64	; 0x40
  pHandle->PolarizationSector=SECTOR_5;
 80061b8:	2304      	movs	r3, #4
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 80061ba:	6047      	str	r7, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 80061bc:	6181      	str	r1, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80061be:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_5;
 80061c2:	f880 306f 	strb.w	r3, [r0, #111]	; 0x6f
  pHandle->_Super.Sector = SECTOR_5;   
 80061c6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 80061ca:	4605      	mov	r5, r0
  R3_1_SwitchOnPWM( &pHandle->_Super );
 80061cc:	f7ff fd52 	bl	8005c74 <R3_1_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061d6:	2b70      	cmp	r3, #112	; 0x70
 80061d8:	d1fa      	bne.n	80061d0 <R3_1_CurrentReadingPolarization+0x40>
  MODIFY_REG(ADCx->CR,
 80061da:	68b3      	ldr	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 80061dc:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80061de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061e6:	f043 0308 	orr.w	r3, r3, #8
 80061ea:	60b3      	str	r3, [r6, #8]
 80061ec:	f105 0738 	add.w	r7, r5, #56	; 0x38
 80061f0:	f105 086e 	add.w	r8, r5, #110	; 0x6e
 80061f4:	4639      	mov	r1, r7
 80061f6:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
 80061fa:	4643      	mov	r3, r8
 80061fc:	4620      	mov	r0, r4
 80061fe:	f7ff fa4f 	bl	80056a0 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8006202:	4628      	mov	r0, r5
 8006204:	f7ff fd78 	bl	8005cf8 <R3_1_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8006208:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 800620a:	4b28      	ldr	r3, [pc, #160]	; (80062ac <R3_1_CurrentReadingPolarization+0x11c>)
 800620c:	606b      	str	r3, [r5, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800620e:	4628      	mov	r0, r5
  pHandle->PolarizationCounter = 0u;
 8006210:	f885 606e 	strb.w	r6, [r5, #110]	; 0x6e
  pHandle->PolarizationSector=SECTOR_1;
 8006214:	f885 606f 	strb.w	r6, [r5, #111]	; 0x6f
  pHandle->_Super.Sector = SECTOR_1; 
 8006218:	f885 603a 	strb.w	r6, [r5, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800621c:	f7ff fd2a 	bl	8005c74 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8006220:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8006222:	4639      	mov	r1, r7
 8006224:	4643      	mov	r3, r8
 8006226:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800622a:	4f21      	ldr	r7, [pc, #132]	; (80062b0 <R3_1_CurrentReadingPolarization+0x120>)
  waitForPolarizationEnd( TIMx,
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff fa37 	bl	80056a0 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8006232:	4628      	mov	r0, r5
 8006234:	f7ff fd60 	bl	8005cf8 <R3_1_SwitchOffPWM>
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8006238:	f105 015c 	add.w	r1, r5, #92	; 0x5c
 800623c:	c90e      	ldmia	r1, {r1, r2, r3}
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800623e:	0912      	lsrs	r2, r2, #4
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8006240:	091b      	lsrs	r3, r3, #4
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8006242:	0909      	lsrs	r1, r1, #4
 8006244:	65e9      	str	r1, [r5, #92]	; 0x5c
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8006246:	662a      	str	r2, [r5, #96]	; 0x60
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8006248:	666b      	str	r3, [r5, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800624a:	69a3      	ldr	r3, [r4, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800624c:	4819      	ldr	r0, [pc, #100]	; (80062b4 <R3_1_CurrentReadingPolarization+0x124>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800624e:	606f      	str	r7, [r5, #4]
 8006250:	f023 0308 	bic.w	r3, r3, #8
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 8006254:	61a8      	str	r0, [r5, #24]
 8006256:	61a3      	str	r3, [r4, #24]
 8006258:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800625a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 800625e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006262:	61a2      	str	r2, [r4, #24]
 8006264:	69e2      	ldr	r2, [r4, #28]
 8006266:	f022 0208 	bic.w	r2, r2, #8
 800626a:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800626c:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800626e:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006270:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006272:	69a3      	ldr	r3, [r4, #24]
 8006274:	f043 0308 	orr.w	r3, r3, #8
 8006278:	61a3      	str	r3, [r4, #24]
 800627a:	69a3      	ldr	r3, [r4, #24]
 800627c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006280:	61a3      	str	r3, [r4, #24]
 8006282:	69e3      	ldr	r3, [r4, #28]
 8006284:	f043 0308 	orr.w	r3, r3, #8
 8006288:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800628a:	6a23      	ldr	r3, [r4, #32]
 800628c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8006290:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 8006294:	2204      	movs	r2, #4
 8006296:	6223      	str	r3, [r4, #32]
 8006298:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
  pHandle->BrakeActionLock = false;
 800629c:	f885 6072 	strb.w	r6, [r5, #114]	; 0x72
  pHandle->_Super.Sector=SECTOR_5;
 80062a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a4:	08005b0d 	.word	0x08005b0d
 80062a8:	08005bb1 	.word	0x08005bb1
 80062ac:	08005bf1 	.word	0x08005bf1
 80062b0:	08005985 	.word	0x08005985
 80062b4:	08005b41 	.word	0x08005b41

080062b8 <R3_1_TIMx_UP_IRQHandler>:
{
 80062b8:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80062ba:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 80062bc:	4603      	mov	r3, r0
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80062be:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80062c2:	6854      	ldr	r4, [r2, #4]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80062c4:	6816      	ldr	r6, [r2, #0]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80062c6:	f8b3 106c 	ldrh.w	r1, [r3, #108]	; 0x6c
 80062ca:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80062ce:	2540      	movs	r5, #64	; 0x40
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80062d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80062d2:	430a      	orrs	r2, r1
 80062d4:	64f2      	str	r2, [r6, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80062d6:	6862      	ldr	r2, [r4, #4]
 80062d8:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80062dc:	6062      	str	r2, [r4, #4]
}
 80062de:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80062e2:	f8a3 506c 	strh.w	r5, [r3, #108]	; 0x6c
}
 80062e6:	bc70      	pop	{r4, r5, r6}
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop

080062ec <R3_1_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80062ec:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80062f0:	b923      	cbnz	r3, 80062fc <R3_1_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80062f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80062f4:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 80062f8:	2a02      	cmp	r2, #2
 80062fa:	d004      	beq.n	8006306 <R3_1_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
}
 8006302:	3046      	adds	r0, #70	; 0x46
 8006304:	4770      	bx	lr
{
 8006306:	b470      	push	{r4, r5, r6}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006308:	69d9      	ldr	r1, [r3, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800630a:	699d      	ldr	r5, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800630c:	6a1a      	ldr	r2, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800630e:	f8b3 606c 	ldrh.w	r6, [r3, #108]	; 0x6c
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006312:	f8b3 406e 	ldrh.w	r4, [r3, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006316:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800631a:	62ae      	str	r6, [r5, #40]	; 0x28
 800631c:	628c      	str	r4, [r1, #40]	; 0x28
 800631e:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8006320:	2301      	movs	r3, #1
 8006322:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
}
 8006326:	bc70      	pop	{r4, r5, r6}
 8006328:	3046      	adds	r0, #70	; 0x46
 800632a:	4770      	bx	lr

0800632c <R3_1_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800632c:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800632e:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006330:	6850      	ldr	r0, [r2, #4]
 8006332:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8006334:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800633a:	6442      	str	r2, [r0, #68]	; 0x44
}
 800633c:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 8006340:	f883 1071 	strb.w	r1, [r3, #113]	; 0x71
  pHandle->BrakeActionLock = true;
 8006344:	f883 1072 	strb.w	r1, [r3, #114]	; 0x72
}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop

0800634c <R3_1_IsOverCurrentOccurred>:
{
 800634c:	4602      	mov	r2, r0
  if ( pHandle->OverVoltageFlag == true )
 800634e:	f890 0071 	ldrb.w	r0, [r0, #113]	; 0x71
 8006352:	b160      	cbz	r0, 800636e <R3_1_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8006354:	2300      	movs	r3, #0
 8006356:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 800635a:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 800635c:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 800635e:	f892 3070 	ldrb.w	r3, [r2, #112]	; 0x70
 8006362:	b11b      	cbz	r3, 800636c <R3_1_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8006364:	2300      	movs	r3, #0
    retVal |= MC_BREAK_IN;
 8006366:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8006368:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
}
 800636c:	4770      	bx	lr
 800636e:	2140      	movs	r1, #64	; 0x40
 8006370:	e7f5      	b.n	800635e <R3_1_IsOverCurrentOccurred+0x12>
 8006372:	bf00      	nop

08006374 <R3_1_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8006374:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8006378:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 800637a:	bb51      	cbnz	r1, 80063d2 <R3_1_RLDetectionModeEnable+0x5e>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800637c:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800637e:	6853      	ldr	r3, [r2, #4]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8006380:	f892 507a 	ldrb.w	r5, [r2, #122]	; 0x7a
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800638a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800638e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006392:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800639c:	6a1a      	ldr	r2, [r3, #32]
 800639e:	2d01      	cmp	r5, #1
 80063a0:	f022 0204 	bic.w	r2, r2, #4
 80063a4:	621a      	str	r2, [r3, #32]
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80063a6:	f103 0418 	add.w	r4, r3, #24
  WRITE_REG(TIMx->CCR1, CompareValue);
 80063aa:	6359      	str	r1, [r3, #52]	; 0x34
 80063ac:	d01e      	beq.n	80063ec <R3_1_RLDetectionModeEnable+0x78>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80063ae:	2d02      	cmp	r5, #2
 80063b0:	d02d      	beq.n	800640e <R3_1_RLDetectionModeEnable+0x9a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80063b2:	6862      	ldr	r2, [r4, #4]
 80063b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80063b8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80063bc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80063c0:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063c8:	621a      	str	r2, [r3, #32]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d0:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80063d2:	4b17      	ldr	r3, [pc, #92]	; (8006430 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80063d4:	4c17      	ldr	r4, [pc, #92]	; (8006434 <R3_1_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 80063d6:	4918      	ldr	r1, [pc, #96]	; (8006438 <R3_1_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80063d8:	4a18      	ldr	r2, [pc, #96]	; (800643c <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80063da:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 80063dc:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80063de:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 80063e0:	60c1      	str	r1, [r0, #12]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80063e2:	6082      	str	r2, [r0, #8]
  pHandle->_Super.RLDetectionMode = true;
 80063e4:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80063e8:	bc30      	pop	{r4, r5}
 80063ea:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80063f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80063f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063fa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80063fc:	6a1a      	ldr	r2, [r3, #32]
 80063fe:	f022 0210 	bic.w	r2, r2, #16
 8006402:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006404:	6a1a      	ldr	r2, [r3, #32]
 8006406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800640a:	621a      	str	r2, [r3, #32]
 800640c:	e7d1      	b.n	80063b2 <R3_1_RLDetectionModeEnable+0x3e>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006414:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800641c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800641e:	6a1a      	ldr	r2, [r3, #32]
 8006420:	f042 0210 	orr.w	r2, r2, #16
 8006424:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006426:	6a1a      	ldr	r2, [r3, #32]
 8006428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800642c:	621a      	str	r2, [r3, #32]
 800642e:	e7c0      	b.n	80063b2 <R3_1_RLDetectionModeEnable+0x3e>
 8006430:	08005d55 	.word	0x08005d55
 8006434:	08005da9 	.word	0x08005da9
 8006438:	08005df1 	.word	0x08005df1
 800643c:	08005cf9 	.word	0x08005cf9

08006440 <R3_1_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8006440:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8006444:	2b00      	cmp	r3, #0
 8006446:	d044      	beq.n	80064d2 <R3_1_RLDetectionModeDisable+0x92>
{
 8006448:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800644a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800644c:	6863      	ldr	r3, [r4, #4]
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	06d1      	lsls	r1, r2, #27
 8006452:	d5fc      	bpl.n	800644e <R3_1_RLDetectionModeDisable+0xe>
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	06d2      	lsls	r2, r2, #27
 8006458:	d4fc      	bmi.n	8006454 <R3_1_RLDetectionModeDisable+0x14>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	4d44      	ldr	r5, [pc, #272]	; (8006570 <R3_1_RLDetectionModeDisable+0x130>)
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800645e:	f894 107a 	ldrb.w	r1, [r4, #122]	; 0x7a
 8006462:	402a      	ands	r2, r5
 8006464:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006468:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	2901      	cmp	r1, #1
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	621a      	str	r2, [r3, #32]
 8006474:	d02e      	beq.n	80064d4 <R3_1_RLDetectionModeDisable+0x94>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006476:	2902      	cmp	r1, #2
 8006478:	d053      	beq.n	8006522 <R3_1_RLDetectionModeDisable+0xe2>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800647a:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 800647e:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006480:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006482:	6999      	ldr	r1, [r3, #24]
 8006484:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006488:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800648c:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8006490:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006492:	6a19      	ldr	r1, [r3, #32]
 8006494:	f041 0110 	orr.w	r1, r1, #16
 8006498:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800649c:	69d9      	ldr	r1, [r3, #28]
 800649e:	4029      	ands	r1, r5
 80064a0:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 80064a4:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80064a6:	6a19      	ldr	r1, [r3, #32]
 80064a8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80064ac:	6219      	str	r1, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 80064ae:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80064b0:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 80064b2:	68cb      	ldr	r3, [r1, #12]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80064b4:	4f2f      	ldr	r7, [pc, #188]	; (8006574 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80064b6:	4e30      	ldr	r6, [pc, #192]	; (8006578 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 80064b8:	4d30      	ldr	r5, [pc, #192]	; (800657c <R3_1_RLDetectionModeDisable+0x13c>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80064ba:	4c31      	ldr	r4, [pc, #196]	; (8006580 <R3_1_RLDetectionModeDisable+0x140>)
 80064bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80064c0:	60cb      	str	r3, [r1, #12]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80064c2:	6047      	str	r7, [r0, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80064c4:	6146      	str	r6, [r0, #20]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 80064c6:	60c5      	str	r5, [r0, #12]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80064c8:	6084      	str	r4, [r0, #8]
}
 80064ca:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->_Super.RLDetectionMode = false;
 80064cc:	2200      	movs	r2, #0
 80064ce:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
}
 80064d2:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80064d4:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 80064d6:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 80064da:	f041 0104 	orr.w	r1, r1, #4
 80064de:	0852      	lsrs	r2, r2, #1
 80064e0:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80064e2:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80064e4:	6999      	ldr	r1, [r3, #24]
 80064e6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80064ea:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80064ee:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80064f2:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80064f4:	6a19      	ldr	r1, [r3, #32]
 80064f6:	f041 0110 	orr.w	r1, r1, #16
 80064fa:	6219      	str	r1, [r3, #32]
 80064fc:	6a19      	ldr	r1, [r3, #32]
 80064fe:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006502:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006506:	69d9      	ldr	r1, [r3, #28]
 8006508:	4029      	ands	r1, r5
 800650a:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 800650e:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006510:	6a19      	ldr	r1, [r3, #32]
 8006512:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006516:	6219      	str	r1, [r3, #32]
 8006518:	6a19      	ldr	r1, [r3, #32]
 800651a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800651e:	6219      	str	r1, [r3, #32]
 8006520:	e7c5      	b.n	80064ae <R3_1_RLDetectionModeDisable+0x6e>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006522:	6a19      	ldr	r1, [r3, #32]
 8006524:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8006528:	f021 0104 	bic.w	r1, r1, #4
 800652c:	0852      	lsrs	r2, r2, #1
 800652e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006530:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006532:	6999      	ldr	r1, [r3, #24]
 8006534:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006538:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800653c:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8006540:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006542:	6a19      	ldr	r1, [r3, #32]
 8006544:	f041 0110 	orr.w	r1, r1, #16
 8006548:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800654a:	6a19      	ldr	r1, [r3, #32]
 800654c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006550:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006554:	69d9      	ldr	r1, [r3, #28]
 8006556:	4029      	ands	r1, r5
 8006558:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 800655c:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800655e:	6a19      	ldr	r1, [r3, #32]
 8006560:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006564:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006566:	6a19      	ldr	r1, [r3, #32]
 8006568:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800656c:	6219      	str	r1, [r3, #32]
 800656e:	e79e      	b.n	80064ae <R3_1_RLDetectionModeDisable+0x6e>
 8006570:	fffeff8c 	.word	0xfffeff8c
 8006574:	08005985 	.word	0x08005985
 8006578:	08005c29 	.word	0x08005c29
 800657c:	08005c75 	.word	0x08005c75
 8006580:	08005cf9 	.word	0x08005cf9

08006584 <R3_1_RLDetectionModeSetDuty>:
{
 8006584:	4602      	mov	r2, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006586:	6f40      	ldr	r0, [r0, #116]	; 0x74
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006588:	f8b2 3068 	ldrh.w	r3, [r2, #104]	; 0x68
{
 800658c:	b430      	push	{r4, r5}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800658e:	fb01 f103 	mul.w	r1, r1, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006592:	6844      	ldr	r4, [r0, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8006594:	8f10      	ldrh	r0, [r2, #56]	; 0x38
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006596:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8006598:	2503      	movs	r5, #3
 800659a:	f882 503a 	strb.w	r5, [r2, #58]	; 0x3a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800659e:	8651      	strh	r1, [r2, #50]	; 0x32
  if ( pHandle->_Super.SWerror == 1u )
 80065a0:	2801      	cmp	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065a2:	6361      	str	r1, [r4, #52]	; 0x34
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80065a4:	6863      	ldr	r3, [r4, #4]
  if ( pHandle->_Super.SWerror == 1u )
 80065a6:	d006      	beq.n	80065b6 <R3_1_RLDetectionModeSetDuty+0x32>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80065a8:	f013 0f70 	tst.w	r3, #112	; 0x70
    hAux = MC_FOC_DURATION;
 80065ac:	bf14      	ite	ne
 80065ae:	2001      	movne	r0, #1
 80065b0:	2000      	moveq	r0, #0
}
 80065b2:	bc30      	pop	{r4, r5}
 80065b4:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 80065b6:	2300      	movs	r3, #0
 80065b8:	8713      	strh	r3, [r2, #56]	; 0x38
}
 80065ba:	bc30      	pop	{r4, r5}
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop

080065c0 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80065c0:	8b41      	ldrh	r1, [r0, #26]
 80065c2:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80065c4:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80065c6:	4411      	add	r1, r2
{
 80065c8:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80065ca:	f3c1 014f 	ubfx	r1, r1, #1, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80065ce:	b143      	cbz	r3, 80065e2 <RVBS_Clear+0x22>
 80065d0:	6a04      	ldr	r4, [r0, #32]
 80065d2:	2300      	movs	r3, #0
  {
    pHandle->aBuffer[index] = aux;
 80065d4:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80065d8:	3301      	adds	r3, #1
 80065da:	8b02      	ldrh	r2, [r0, #24]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	429a      	cmp	r2, r3
 80065e0:	d8f8      	bhi.n	80065d4 <RVBS_Clear+0x14>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80065e2:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 80065e4:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 80065e6:	80c1      	strh	r1, [r0, #6]
  pHandle->index = 0;
 80065e8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 80065ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop

080065f4 <RVBS_Init>:
{
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80065f8:	300c      	adds	r0, #12
 80065fa:	f7fb fa93 	bl	8001b24 <RCM_RegisterRegConv>
 80065fe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8006602:	4620      	mov	r0, r4
 8006604:	f7ff ffdc 	bl	80065c0 <RVBS_Clear>
 8006608:	bd10      	pop	{r4, pc}
 800660a:	bf00      	nop

0800660c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800660c:	88c3      	ldrh	r3, [r0, #6]
 800660e:	8b42      	ldrh	r2, [r0, #26]
 8006610:	429a      	cmp	r2, r3
 8006612:	d201      	bcs.n	8006618 <RVBS_CheckFaultState+0xc>
  {
    fault = MC_OVER_VOLT;
 8006614:	2002      	movs	r0, #2
  else
  {
    fault = MC_NO_ERROR;
  }
  return fault;
}
 8006616:	4770      	bx	lr
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8006618:	8b80      	ldrh	r0, [r0, #28]
    fault = MC_NO_ERROR;
 800661a:	4298      	cmp	r0, r3
 800661c:	bf8c      	ite	hi
 800661e:	2004      	movhi	r0, #4
 8006620:	2000      	movls	r0, #0
 8006622:	4770      	bx	lr

08006624 <RVBS_CalcAvVbusFilt>:
{
 8006624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tot = 0u;
 8006628:	2600      	movs	r6, #0
{
 800662a:	4607      	mov	r7, r0
  uint16_t max = 0, min = 0;
 800662c:	4635      	mov	r5, r6
 800662e:	46b0      	mov	r8, r6
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 8006630:	4634      	mov	r4, r6
 8006632:	46b2      	mov	sl, r6
    if ( hAux != 0xFFFFu )
 8006634:	f64f 79ff 	movw	r9, #65535	; 0xffff
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 8006638:	8b3b      	ldrh	r3, [r7, #24]
 800663a:	459a      	cmp	sl, r3
 800663c:	d218      	bcs.n	8006670 <RVBS_CalcAvVbusFilt+0x4c>
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800663e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8006642:	f7fb fb41 	bl	8001cc8 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8006646:	4548      	cmp	r0, r9
 8006648:	d0f6      	beq.n	8006638 <RVBS_CalcAvVbusFilt+0x14>
 800664a:	4285      	cmp	r5, r0
 800664c:	bf28      	it	cs
 800664e:	4605      	movcs	r5, r0
 8006650:	4580      	cmp	r8, r0
 8006652:	bf38      	it	cc
 8006654:	4680      	movcc	r8, r0
      if ( vindex == 0 )
 8006656:	2c00      	cmp	r4, #0
 8006658:	d037      	beq.n	80066ca <RVBS_CalcAvVbusFilt+0xa6>
 800665a:	b2ad      	uxth	r5, r5
 800665c:	fa1f f888 	uxth.w	r8, r8
      vindex++;
 8006660:	3401      	adds	r4, #1
 8006662:	b2e4      	uxtb	r4, r4
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 8006664:	8b3b      	ldrh	r3, [r7, #24]
 8006666:	fa1f fa84 	uxth.w	sl, r4
 800666a:	459a      	cmp	sl, r3
      tot += hAux;
 800666c:	4406      	add	r6, r0
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800666e:	d3e6      	bcc.n	800663e <RVBS_CalcAvVbusFilt+0x1a>
  tot -= max;
 8006670:	eba6 0608 	sub.w	r6, r6, r8
  tot -= min;
 8006674:	1b75      	subs	r5, r6, r5
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 8006676:	3b02      	subs	r3, #2
  if ( hAux != 0xFFFF )
 8006678:	f64f 72ff 	movw	r2, #65535	; 0xffff
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 800667c:	fbb5 f5f3 	udiv	r5, r5, r3
 8006680:	b2ad      	uxth	r5, r5
  if ( hAux != 0xFFFF )
 8006682:	4295      	cmp	r5, r2
 8006684:	d01b      	beq.n	80066be <RVBS_CalcAvVbusFilt+0x9a>
    pHandle->aBuffer[pHandle->index] = hAux;
 8006686:	6a3c      	ldr	r4, [r7, #32]
 8006688:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800668c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006690:	8b38      	ldrh	r0, [r7, #24]
 8006692:	b330      	cbz	r0, 80066e2 <RVBS_CalcAvVbusFilt+0xbe>
 8006694:	2300      	movs	r3, #0
 8006696:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8006698:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800669c:	3301      	adds	r3, #1
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	4283      	cmp	r3, r0
      wtemp += pHandle->aBuffer[i];
 80066a2:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80066a4:	d3f8      	bcc.n	8006698 <RVBS_CalcAvVbusFilt+0x74>
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80066a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    wtemp /= pHandle->LowPassFilterBW;
 80066aa:	fbb2 f2f0 	udiv	r2, r2, r0
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80066ae:	3801      	subs	r0, #1
 80066b0:	4283      	cmp	r3, r0
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80066b2:	80fa      	strh	r2, [r7, #6]
    pHandle->_Super.LatestConv = hAux;
 80066b4:	80bd      	strh	r5, [r7, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80066b6:	db0b      	blt.n	80066d0 <RVBS_CalcAvVbusFilt+0xac>
      pHandle->index = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80066be:	4638      	mov	r0, r7
 80066c0:	f7ff ffa4 	bl	800660c <RVBS_CheckFaultState>
 80066c4:	8138      	strh	r0, [r7, #8]
  return ( pHandle->_Super.FaultState );
 80066c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ( vindex == 0 )
 80066ca:	4605      	mov	r5, r0
 80066cc:	4680      	mov	r8, r0
 80066ce:	e7c7      	b.n	8006660 <RVBS_CalcAvVbusFilt+0x3c>
      pHandle->index++;
 80066d0:	3301      	adds	r3, #1
 80066d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80066d6:	4638      	mov	r0, r7
 80066d8:	f7ff ff98 	bl	800660c <RVBS_CheckFaultState>
 80066dc:	8138      	strh	r0, [r7, #8]
  return ( pHandle->_Super.FaultState );
 80066de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80066e2:	80f8      	strh	r0, [r7, #6]
    pHandle->_Super.LatestConv = hAux;
 80066e4:	80bd      	strh	r5, [r7, #4]
 80066e6:	e7e7      	b.n	80066b8 <RVBS_CalcAvVbusFilt+0x94>

080066e8 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 80066e8:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 80066ea:	2201      	movs	r2, #1
 80066ec:	6142      	str	r2, [r0, #20]
  pHandle->Ext = 0;
 80066ee:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 80066f0:	6043      	str	r3, [r0, #4]
  pHandle->RampRemainingStep = 0u;
 80066f2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80066f4:	6103      	str	r3, [r0, #16]
 80066f6:	4770      	bx	lr

080066f8 <REMNG_Calc>:
  int32_t current_ref;

  current_ref = pHandle->Ext;

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80066f8:	68c2      	ldr	r2, [r0, #12]
  current_ref = pHandle->Ext;
 80066fa:	6883      	ldr	r3, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 80066fc:	2a01      	cmp	r2, #1
 80066fe:	d90b      	bls.n	8006718 <REMNG_Calc+0x20>
{
 8006700:	b410      	push	{r4}
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 8006702:	6904      	ldr	r4, [r0, #16]
 8006704:	6941      	ldr	r1, [r0, #20]
 8006706:	4423      	add	r3, r4

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8006708:	3a01      	subs	r2, #1
 800670a:	60c2      	str	r2, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 800670c:	6083      	str	r3, [r0, #8]
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 800670e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006712:	fb93 f0f1 	sdiv	r0, r3, r1
 8006716:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006718:	6941      	ldr	r1, [r0, #20]
  else if ( pHandle->RampRemainingStep == 1u )
 800671a:	d104      	bne.n	8006726 <REMNG_Calc+0x2e>
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800671c:	6843      	ldr	r3, [r0, #4]
    pHandle->RampRemainingStep = 0u;
 800671e:	2200      	movs	r2, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006720:	fb03 f301 	mul.w	r3, r3, r1
    pHandle->RampRemainingStep = 0u;
 8006724:	60c2      	str	r2, [r0, #12]
  pHandle->Ext = current_ref;
 8006726:	6083      	str	r3, [r0, #8]
}
 8006728:	fb93 f0f1 	sdiv	r0, r3, r1
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop

08006730 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8006730:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8006732:	fab0 f080 	clz	r0, r0
 8006736:	0940      	lsrs	r0, r0, #5
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop

0800673c <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor( int32_t Target )
{
 800673c:	2301      	movs	r3, #1
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 800673e:	2800      	cmp	r0, #0
 8006740:	bfb8      	it	lt
 8006742:	4240      	neglt	r0, r0
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006744:	4619      	mov	r1, r3
 8006746:	e002      	b.n	800674e <getScalingFactor+0x12>
 8006748:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 800674a:	2b20      	cmp	r3, #32
 800674c:	d009      	beq.n	8006762 <getScalingFactor+0x26>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 800674e:	f1c3 021f 	rsb	r2, r3, #31
 8006752:	fa01 f202 	lsl.w	r2, r1, r2
    if ( TargetAbs >= limit )
 8006756:	4290      	cmp	r0, r2
 8006758:	d3f6      	bcc.n	8006748 <getScalingFactor+0xc>
 800675a:	3b01      	subs	r3, #1
 800675c:	fa01 f003 	lsl.w	r0, r1, r3
 8006760:	4770      	bx	lr
 8006762:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 8006766:	4770      	bx	lr

08006768 <REMNG_ExecRamp>:
{
 8006768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	4604      	mov	r4, r0
 800676e:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 8006770:	4690      	mov	r8, r2
 8006772:	b372      	cbz	r2, 80067d2 <REMNG_ExecRamp+0x6a>
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8006774:	6943      	ldr	r3, [r0, #20]
 8006776:	6886      	ldr	r6, [r0, #8]
 8006778:	fb96 f6f3 	sdiv	r6, r6, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 800677c:	1b8f      	subs	r7, r1, r6
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff ffdc 	bl	800673c <getScalingFactor>
 8006784:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8006786:	4630      	mov	r0, r6
 8006788:	f7ff ffd8 	bl	800673c <getScalingFactor>
 800678c:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800678e:	4628      	mov	r0, r5
 8006790:	f7ff ffd4 	bl	800673c <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8006794:	45ca      	cmp	sl, r9
 8006796:	d318      	bcc.n	80067ca <REMNG_ExecRamp+0x62>
 8006798:	4548      	cmp	r0, r9
 800679a:	bf28      	it	cs
 800679c:	4648      	movcs	r0, r9
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800679e:	6823      	ldr	r3, [r4, #0]
    aux /= 1000u;
 80067a0:	4a13      	ldr	r2, [pc, #76]	; (80067f0 <REMNG_ExecRamp+0x88>)
    pHandle->ScalingFactor = wScalingFactorMin;
 80067a2:	6160      	str	r0, [r4, #20]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 80067a4:	fb03 f308 	mul.w	r3, r3, r8
    aux /= 1000u;
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 80067ae:	fb00 f606 	mul.w	r6, r0, r6
    pHandle->RampRemainingStep++;
 80067b2:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 80067b4:	fb00 f007 	mul.w	r0, r0, r7
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 80067b8:	60a6      	str	r6, [r4, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 80067ba:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->TargetFinal = TargetFinal;
 80067be:	6065      	str	r5, [r4, #4]
    pHandle->IncDecAmount = aux1;
 80067c0:	6120      	str	r0, [r4, #16]
    pHandle->RampRemainingStep++;
 80067c2:	60e3      	str	r3, [r4, #12]
}
 80067c4:	2001      	movs	r0, #1
 80067c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ca:	4550      	cmp	r0, sl
 80067cc:	bf28      	it	cs
 80067ce:	4650      	movcs	r0, sl
 80067d0:	e7e5      	b.n	800679e <REMNG_ExecRamp+0x36>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 80067d2:	4608      	mov	r0, r1
 80067d4:	f7ff ffb2 	bl	800673c <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80067d8:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 80067dc:	6160      	str	r0, [r4, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80067de:	60a5      	str	r5, [r4, #8]
    pHandle->RampRemainingStep = 0u;
 80067e0:	f8c4 800c 	str.w	r8, [r4, #12]
    pHandle->IncDecAmount = 0;
 80067e4:	f8c4 8010 	str.w	r8, [r4, #16]
}
 80067e8:	2001      	movs	r0, #1
 80067ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ee:	bf00      	nop
 80067f0:	10624dd3 	.word	0x10624dd3

080067f4 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 80067f4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 80067fc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop

08006804 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006804:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800680c:	f9b1 3000 	ldrsh.w	r3, [r1]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006810:	8ac1      	ldrh	r1, [r0, #22]
{
 8006812:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8006814:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8006816:	bfb8      	it	lt
 8006818:	425b      	neglt	r3, r3
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800681a:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800681c:	4299      	cmp	r1, r3
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800681e:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006820:	7802      	ldrb	r2, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006822:	8a85      	ldrh	r5, [r0, #20]
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006824:	d816      	bhi.n	8006854 <SPD_IsMecSpeedReliable+0x48>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006826:	42ab      	cmp	r3, r5
 8006828:	bf94      	ite	ls
 800682a:	2300      	movls	r3, #0
 800682c:	2301      	movhi	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800682e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006832:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8006834:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8006836:	bfb8      	it	lt
 8006838:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800683a:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800683c:	428d      	cmp	r5, r1
 800683e:	d30b      	bcc.n	8006858 <SPD_IsMecSpeedReliable+0x4c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006840:	b953      	cbnz	r3, 8006858 <SPD_IsMecSpeedReliable+0x4c>
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
    {
      bSpeedErrorNumber = 0u;
 8006842:	4294      	cmp	r4, r2
 8006844:	bf88      	it	hi
 8006846:	2200      	movhi	r2, #0
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006848:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 800684a:	1b10      	subs	r0, r2, r4
 800684c:	bf18      	it	ne
 800684e:	2001      	movne	r0, #1
 8006850:	bc30      	pop	{r4, r5}
 8006852:	4770      	bx	lr
    SpeedError = true;
 8006854:	2301      	movs	r3, #1
 8006856:	e7ea      	b.n	800682e <SPD_IsMecSpeedReliable+0x22>
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006858:	4294      	cmp	r4, r2
 800685a:	d9f5      	bls.n	8006848 <SPD_IsMecSpeedReliable+0x3c>
      bSpeedErrorNumber++;
 800685c:	3201      	adds	r2, #1
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	e7f2      	b.n	8006848 <SPD_IsMecSpeedReliable+0x3c>
 8006862:	bf00      	nop

08006864 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8006864:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006868:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 800686c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006870:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8006874:	b200      	sxth	r0, r0
 8006876:	4770      	bx	lr

08006878 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8006878:	b470      	push	{r4, r5, r6}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800687a:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800687e:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->Mode = pHandle->ModeDefault;
 8006882:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
 8006886:	7006      	strb	r6, [r0, #0]
  pHandle->TargetFinal = 0;
 8006888:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800688a:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800688c:	0424      	lsls	r4, r4, #16
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800688e:	6045      	str	r5, [r0, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006890:	6084      	str	r4, [r0, #8]
  pHandle->PISpeed = pPI;
 8006892:	6101      	str	r1, [r0, #16]
  pHandle->SPD = SPD_Handle;
 8006894:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 8006896:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8006898:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800689a:	6183      	str	r3, [r0, #24]
}
 800689c:	bc70      	pop	{r4, r5, r6}
 800689e:	4770      	bx	lr

080068a0 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 80068a0:	6141      	str	r1, [r0, #20]
 80068a2:	4770      	bx	lr

080068a4 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80068a4:	6940      	ldr	r0, [r0, #20]
 80068a6:	4770      	bx	lr

080068a8 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80068a8:	7803      	ldrb	r3, [r0, #0]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d000      	beq.n	80068b0 <STC_Clear+0x8>
 80068ae:	4770      	bx	lr
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80068b0:	6900      	ldr	r0, [r0, #16]
 80068b2:	2100      	movs	r1, #0
 80068b4:	f7fe be3e 	b.w	8005534 <PID_SetIntegralTerm>

080068b8 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80068b8:	6840      	ldr	r0, [r0, #4]
 80068ba:	2800      	cmp	r0, #0
 80068bc:	bfbc      	itt	lt
 80068be:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80068c2:	30ff      	addlt	r0, #255	; 0xff
}
 80068c4:	1400      	asrs	r0, r0, #16
 80068c6:	4770      	bx	lr

080068c8 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 80068c8:	6880      	ldr	r0, [r0, #8]
 80068ca:	2800      	cmp	r0, #0
 80068cc:	bfbc      	itt	lt
 80068ce:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80068d2:	30ff      	addlt	r0, #255	; 0xff
}
 80068d4:	1400      	asrs	r0, r0, #16
 80068d6:	4770      	bx	lr

080068d8 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80068d8:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 80068da:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80068dc:	60c3      	str	r3, [r0, #12]
 80068de:	4770      	bx	lr

080068e0 <STC_ExecRamp>:
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80068e0:	7803      	ldrb	r3, [r0, #0]
{
 80068e2:	b570      	push	{r4, r5, r6, lr}
 80068e4:	4604      	mov	r4, r0
 80068e6:	460d      	mov	r5, r1
 80068e8:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80068ea:	b323      	cbz	r3, 8006936 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80068ec:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80068ee:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80068f0:	2800      	cmp	r0, #0
 80068f2:	bfbc      	itt	lt
 80068f4:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80068f8:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80068fa:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80068fc:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006900:	dd01      	ble.n	8006906 <STC_ExecRamp+0x26>
{
 8006902:	2000      	movs	r0, #0
 8006904:	bd70      	pop	{r4, r5, r6, pc}
    {
      AllowedRange = false;
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8006906:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800690a:	428b      	cmp	r3, r1
 800690c:	dcf9      	bgt.n	8006902 <STC_ExecRamp+0x22>
    {
      AllowedRange = false;
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800690e:	8c23      	ldrh	r3, [r4, #32]
 8006910:	4299      	cmp	r1, r3
 8006912:	da03      	bge.n	800691c <STC_ExecRamp+0x3c>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006914:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006918:	428b      	cmp	r3, r1
 800691a:	dbf2      	blt.n	8006902 <STC_ExecRamp+0x22>
  }

  if ( AllowedRange == true )
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800691c:	b9b6      	cbnz	r6, 800694c <STC_ExecRamp+0x6c>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800691e:	7823      	ldrb	r3, [r4, #0]
      {
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006920:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006922:	2b01      	cmp	r3, #1
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
      }
      pHandle->RampRemainingStep = 0u;
 8006924:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006928:	bf0c      	ite	eq
 800692a:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800692c:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800692e:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8006930:	61a3      	str	r3, [r4, #24]
 8006932:	2001      	movs	r0, #1
 8006934:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8006936:	f7ff ffc7 	bl	80068c8 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800693a:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800693e:	42ab      	cmp	r3, r5
 8006940:	dcdf      	bgt.n	8006902 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006942:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
  if ( AllowedRange == true )
 8006944:	429d      	cmp	r5, r3
 8006946:	dcdc      	bgt.n	8006902 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8006948:	2e00      	cmp	r6, #0
 800694a:	d0e8      	beq.n	800691e <STC_ExecRamp+0x3e>
      /* Store the hTargetFinal to be applied in the last step */
      pHandle->TargetFinal = hTargetFinal;

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800694c:	8ba1      	ldrh	r1, [r4, #28]
      wAux /= 1000u;
 800694e:	4b08      	ldr	r3, [pc, #32]	; (8006970 <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 8006950:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006952:	fb06 f101 	mul.w	r1, r6, r1
      wAux /= 1000u;
 8006956:	fba3 3101 	umull	r3, r1, r3, r1
 800695a:	0989      	lsrs	r1, r1, #6
      pHandle->RampRemainingStep = wAux;
      pHandle->RampRemainingStep++;
 800695c:	3101      	adds	r1, #1

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800695e:	1a2d      	subs	r5, r5, r0
 8006960:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8006962:	60e1      	str	r1, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006964:	fb95 f5f1 	sdiv	r5, r5, r1
      pHandle->IncDecAmount = wAux1;
 8006968:	2001      	movs	r0, #1
 800696a:	61a5      	str	r5, [r4, #24]
    }
  }

  return AllowedRange;
}
 800696c:	bd70      	pop	{r4, r5, r6, pc}
 800696e:	bf00      	nop
 8006970:	10624dd3 	.word	0x10624dd3

08006974 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8006974:	2300      	movs	r3, #0
 8006976:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006978:	6183      	str	r3, [r0, #24]
 800697a:	4770      	bx	lr

0800697c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800697c:	b538      	push	{r3, r4, r5, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 800697e:	7802      	ldrb	r2, [r0, #0]
  {
    wCurrentReference = pHandle->TorqueRef;
  }
  else
  {
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8006980:	6845      	ldr	r5, [r0, #4]
    wCurrentReference = pHandle->TorqueRef;
 8006982:	6881      	ldr	r1, [r0, #8]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006984:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8006986:	2a00      	cmp	r2, #0
 8006988:	bf08      	it	eq
 800698a:	460d      	moveq	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 800698c:	2b01      	cmp	r3, #1
 800698e:	d90d      	bls.n	80069ac <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006990:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006992:	3b01      	subs	r3, #1
 8006994:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 8006996:	440d      	add	r5, r1
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8006998:	2a01      	cmp	r2, #1
 800699a:	d00e      	beq.n	80069ba <STC_CalcTorqueReference+0x3e>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800699c:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800699e:	2d00      	cmp	r5, #0
 80069a0:	bfbc      	itt	lt
 80069a2:	f505 457f 	addlt.w	r5, r5, #65280	; 0xff00
 80069a6:	35ff      	addlt	r5, #255	; 0xff
 80069a8:	1428      	asrs	r0, r5, #16
  }

  return hTorqueReference;
}
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80069ac:	d1f4      	bne.n	8006998 <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80069ae:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 80069b2:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80069b4:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 80069b6:	60c3      	str	r3, [r0, #12]
 80069b8:	e7ee      	b.n	8006998 <STC_CalcTorqueReference+0x1c>
 80069ba:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80069bc:	6940      	ldr	r0, [r0, #20]
 80069be:	f7ff ff1d 	bl	80067fc <SPD_GetAvrgMecSpeedUnit>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	4629      	mov	r1, r5
 80069c6:	bfbc      	itt	lt
 80069c8:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 80069cc:	31ff      	addlt	r1, #255	; 0xff
    hError = hTargetSpeed - hMeasuredSpeed;
 80069ce:	ebc0 4121 	rsb	r1, r0, r1, asr #16
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 80069d2:	b209      	sxth	r1, r1
 80069d4:	6920      	ldr	r0, [r4, #16]
 80069d6:	f7fe fdb9 	bl	800554c <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80069da:	0403      	lsls	r3, r0, #16
    pHandle->SpeedRefUnitExt = wCurrentReference;
 80069dc:	6065      	str	r5, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80069de:	60a3      	str	r3, [r4, #8]
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
 80069e2:	bf00      	nop

080069e4 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 80069e4:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop

080069ec <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 80069ec:	8bc0      	ldrh	r0, [r0, #30]
 80069ee:	4770      	bx	lr

080069f0 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 80069f0:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop

080069f8 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 80069f8:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 80069fc:	2000      	movs	r0, #0
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	f362 000f 	bfi	r0, r2, #0, #16
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	f363 401f 	bfi	r0, r3, #16, #16
{
 8006a0a:	b082      	sub	sp, #8
}
 8006a0c:	b002      	add	sp, #8
 8006a0e:	4770      	bx	lr

08006a10 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006a10:	b510      	push	{r4, lr}
 8006a12:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006a14:	6940      	ldr	r0, [r0, #20]
 8006a16:	f7ff fef1 	bl	80067fc <SPD_GetAvrgMecSpeedUnit>
 8006a1a:	0400      	lsls	r0, r0, #16
 8006a1c:	6060      	str	r0, [r4, #4]
 8006a1e:	bd10      	pop	{r4, pc}

08006a20 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006a24:	f8c0 3002 	str.w	r3, [r0, #2]
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop

08006a2c <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006a2c:	8843      	ldrh	r3, [r0, #2]
{
 8006a2e:	b430      	push	{r4, r5}
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006a30:	430b      	orrs	r3, r1
  pHandle->hFaultOccurred |= hSetErrors;
 8006a32:	8885      	ldrh	r5, [r0, #4]
{
 8006a34:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 8006a36:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006a38:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8006a3c:	4329      	orrs	r1, r5
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006a3e:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8006a40:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 8006a42:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006a44:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 8006a46:	d004      	beq.n	8006a52 <STM_FaultProcessing+0x26>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8006a48:	b10a      	cbz	r2, 8006a4e <STM_FaultProcessing+0x22>
    {
      pHandle->bState = FAULT_NOW;
 8006a4a:	200a      	movs	r0, #10
 8006a4c:	7020      	strb	r0, [r4, #0]
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8006a4e:	bc30      	pop	{r4, r5}
 8006a50:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8006a52:	2a00      	cmp	r2, #0
 8006a54:	d1fb      	bne.n	8006a4e <STM_FaultProcessing+0x22>
      pHandle->bState = FAULT_OVER;
 8006a56:	200b      	movs	r0, #11
 8006a58:	7020      	strb	r0, [r4, #0]
}
 8006a5a:	bc30      	pop	{r4, r5}
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop

08006a60 <STM_NextState>:
{
 8006a60:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8006a62:	7803      	ldrb	r3, [r0, #0]
 8006a64:	2b14      	cmp	r3, #20
 8006a66:	d81a      	bhi.n	8006a9e <STM_NextState+0x3e>
 8006a68:	e8df f003 	tbb	[pc, r3]
 8006a6c:	5c0b524b 	.word	0x5c0b524b
 8006a70:	170b6c69 	.word	0x170b6c69
 8006a74:	19192421 	.word	0x19192421
 8006a78:	3e312a28 	.word	0x3e312a28
 8006a7c:	44413734 	.word	0x44413734
 8006a80:	59          	.byte	0x59
 8006a81:	00          	.byte	0x00
      if ( bState == ANY_STOP )
 8006a82:	2907      	cmp	r1, #7
 8006a84:	d020      	beq.n	8006ac8 <STM_NextState+0x68>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006a86:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8006a8a:	2901      	cmp	r1, #1
 8006a8c:	d00d      	beq.n	8006aaa <STM_NextState+0x4a>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2180      	movs	r1, #128	; 0x80
 8006a92:	f7ff ffcb 	bl	8006a2c <STM_FaultProcessing>
 8006a96:	2000      	movs	r0, #0
 8006a98:	bd08      	pop	{r3, pc}
      if ( bState == STOP )
 8006a9a:	2908      	cmp	r1, #8
 8006a9c:	d014      	beq.n	8006ac8 <STM_NextState+0x68>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006a9e:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d001      	beq.n	8006aaa <STM_NextState+0x4a>
 8006aa6:	2907      	cmp	r1, #7
 8006aa8:	d1f1      	bne.n	8006a8e <STM_NextState+0x2e>
 8006aaa:	2000      	movs	r0, #0
}
 8006aac:	bd08      	pop	{r3, pc}
      if ( bState == STOP_IDLE )
 8006aae:	2909      	cmp	r1, #9
 8006ab0:	d1f5      	bne.n	8006a9e <STM_NextState+0x3e>
 8006ab2:	e009      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006ab4:	b141      	cbz	r1, 8006ac8 <STM_NextState+0x68>
 8006ab6:	290c      	cmp	r1, #12
 8006ab8:	d1f1      	bne.n	8006a9e <STM_NextState+0x3e>
 8006aba:	e005      	b.n	8006ac8 <STM_NextState+0x68>
      if ( bState == IDLE )
 8006abc:	b121      	cbz	r1, 8006ac8 <STM_NextState+0x68>
 8006abe:	e7ee      	b.n	8006a9e <STM_NextState+0x3e>
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006ac0:	290e      	cmp	r1, #14
 8006ac2:	d001      	beq.n	8006ac8 <STM_NextState+0x68>
 8006ac4:	2907      	cmp	r1, #7
 8006ac6:	d1de      	bne.n	8006a86 <STM_NextState+0x26>
    pHandle->bState = bNewState;
 8006ac8:	7001      	strb	r1, [r0, #0]
 8006aca:	2001      	movs	r0, #1
 8006acc:	bd08      	pop	{r3, pc}
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8006ace:	290f      	cmp	r1, #15
 8006ad0:	d1f8      	bne.n	8006ac4 <STM_NextState+0x64>
 8006ad2:	e7f9      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006ad4:	2911      	cmp	r1, #17
 8006ad6:	d1f5      	bne.n	8006ac4 <STM_NextState+0x64>
 8006ad8:	e7f6      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8006ada:	2912      	cmp	r1, #18
 8006adc:	d0f4      	beq.n	8006ac8 <STM_NextState+0x68>
 8006ade:	2907      	cmp	r1, #7
 8006ae0:	d0f2      	beq.n	8006ac8 <STM_NextState+0x68>
 8006ae2:	2914      	cmp	r1, #20
 8006ae4:	d1cf      	bne.n	8006a86 <STM_NextState+0x26>
 8006ae6:	e7ef      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8006ae8:	2902      	cmp	r1, #2
 8006aea:	d1eb      	bne.n	8006ac4 <STM_NextState+0x64>
 8006aec:	e7ec      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8006aee:	2904      	cmp	r1, #4
 8006af0:	d1e8      	bne.n	8006ac4 <STM_NextState+0x64>
 8006af2:	e7e9      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006af4:	2904      	cmp	r1, #4
 8006af6:	d0e7      	beq.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006af8:	2907      	cmp	r1, #7
 8006afa:	d0e5      	beq.n	8006ac8 <STM_NextState+0x68>
 8006afc:	2905      	cmp	r1, #5
 8006afe:	d0e3      	beq.n	8006ac8 <STM_NextState+0x68>
 8006b00:	e7cd      	b.n	8006a9e <STM_NextState+0x3e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006b02:	2903      	cmp	r1, #3
 8006b04:	d0e0      	beq.n	8006ac8 <STM_NextState+0x68>
 8006b06:	2901      	cmp	r1, #1
 8006b08:	d0de      	beq.n	8006ac8 <STM_NextState+0x68>
           || ( bState == ICLWAIT ) )
 8006b0a:	290c      	cmp	r1, #12
 8006b0c:	d1cb      	bne.n	8006aa6 <STM_NextState+0x46>
 8006b0e:	e7db      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8006b10:	2907      	cmp	r1, #7
 8006b12:	d0d9      	beq.n	8006ac8 <STM_NextState+0x68>
 8006b14:	290d      	cmp	r1, #13
 8006b16:	d0d7      	beq.n	8006ac8 <STM_NextState+0x68>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 8006b18:	290e      	cmp	r1, #14
 8006b1a:	d1b4      	bne.n	8006a86 <STM_NextState+0x26>
 8006b1c:	e7d4      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8006b1e:	2912      	cmp	r1, #18
 8006b20:	d1d0      	bne.n	8006ac4 <STM_NextState+0x64>
 8006b22:	e7d1      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 8006b24:	2907      	cmp	r1, #7
 8006b26:	d0cf      	beq.n	8006ac8 <STM_NextState+0x68>
 8006b28:	2910      	cmp	r1, #16
 8006b2a:	d0cd      	beq.n	8006ac8 <STM_NextState+0x68>
 8006b2c:	2904      	cmp	r1, #4
 8006b2e:	d0cb      	beq.n	8006ac8 <STM_NextState+0x68>
           ( bState == START ) ||
 8006b30:	2911      	cmp	r1, #17
 8006b32:	d0c9      	beq.n	8006ac8 <STM_NextState+0x68>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8006b34:	2901      	cmp	r1, #1
 8006b36:	d0c7      	beq.n	8006ac8 <STM_NextState+0x68>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006b38:	2903      	cmp	r1, #3
 8006b3a:	d1a8      	bne.n	8006a8e <STM_NextState+0x2e>
 8006b3c:	e7b5      	b.n	8006aaa <STM_NextState+0x4a>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006b3e:	2913      	cmp	r1, #19
 8006b40:	d1da      	bne.n	8006af8 <STM_NextState+0x98>
 8006b42:	e7c1      	b.n	8006ac8 <STM_NextState+0x68>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8006b44:	1f8b      	subs	r3, r1, #6
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d8a9      	bhi.n	8006a9e <STM_NextState+0x3e>
 8006b4a:	e7bd      	b.n	8006ac8 <STM_NextState+0x68>

08006b4c <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8006b4c:	7800      	ldrb	r0, [r0, #0]
 8006b4e:	4770      	bx	lr

08006b50 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8006b50:	7803      	ldrb	r3, [r0, #0]
 8006b52:	2b0b      	cmp	r3, #11
 8006b54:	d001      	beq.n	8006b5a <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8006b56:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8006b58:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8006b5a:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006b5c:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8006b5e:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006b60:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8006b62:	2001      	movs	r0, #1
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop

08006b68 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8006b68:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8006b6a:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8006b6c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop

08006b74 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8006b74:	f7fe bc0e 	b.w	8005394 <FCP_Init>

08006b78 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8006b78:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8006b7c:	b16a      	cbz	r2, 8006b9a <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8006b7e:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 8006b82:	4603      	mov	r3, r0
 8006b84:	b152      	cbz	r2, 8006b9c <UFCP_TX_IRQ_Handler+0x24>
 8006b86:	2a01      	cmp	r2, #1
 8006b88:	d10a      	bne.n	8006ba0 <UFCP_TX_IRQ_Handler+0x28>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8006b8a:	7d40      	ldrb	r0, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006b8c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8006b90:	3201      	adds	r2, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8006b92:	8508      	strh	r0, [r1, #40]	; 0x28
 8006b94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8006b98:	4770      	bx	lr
 8006b9a:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8006b9c:	7d00      	ldrb	r0, [r0, #20]
        break;
 8006b9e:	e7f5      	b.n	8006b8c <UFCP_TX_IRQ_Handler+0x14>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006ba0:	7d41      	ldrb	r1, [r0, #21]
 8006ba2:	3101      	adds	r1, #1
 8006ba4:	428a      	cmp	r2, r1
 8006ba6:	dc08      	bgt.n	8006bba <UFCP_TX_IRQ_Handler+0x42>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8006ba8:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006baa:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8006bae:	7d09      	ldrb	r1, [r1, #20]
 8006bb0:	8501      	strh	r1, [r0, #40]	; 0x28
      pBaseHandle->TxFrameLevel++;
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8006bb8:	4770      	bx	lr
{
 8006bba:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006bbc:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 8006bc0:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 8006bc4:	8511      	strh	r1, [r2, #40]	; 0x28
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006bc6:	c811      	ldmia	r0, {r0, r4}
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006bc8:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8006bca:	2500      	movs	r5, #0
 8006bcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bd0:	6011      	str	r1, [r2, #0]
 8006bd2:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006bd6:	4623      	mov	r3, r4
}
 8006bd8:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006bda:	4718      	bx	r3

08006bdc <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8006bdc:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006be0:	b963      	cbnz	r3, 8006bfc <UFCP_Receive+0x20>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8006be2:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 8006be6:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006bea:	6813      	ldr	r3, [r2, #0]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8006bec:	2101      	movs	r1, #1
 8006bee:	f043 0320 	orr.w	r3, r3, #32
 8006bf2:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8006bf6:	2002      	movs	r0, #2
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006bfc:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006bfe:	4770      	bx	lr

08006c00 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8006c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c04:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8006c06:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d175      	bne.n	8006cfa <UFCP_Send+0xfa>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8006c0e:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8006c10:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8006c12:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8006c14:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8006c16:	f104 0016 	add.w	r0, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d058      	beq.n	8006cd0 <UFCP_Send+0xd0>
 8006c1e:	1d15      	adds	r5, r2, #4
 8006c20:	f104 061a 	add.w	r6, r4, #26
 8006c24:	4296      	cmp	r6, r2
 8006c26:	bf88      	it	hi
 8006c28:	4285      	cmphi	r5, r0
 8006c2a:	d869      	bhi.n	8006d00 <UFCP_Send+0x100>
 8006c2c:	2b0b      	cmp	r3, #11
 8006c2e:	d967      	bls.n	8006d00 <UFCP_Send+0x100>
 8006c30:	f1c2 0c00 	rsb	ip, r2, #0
 8006c34:	f01c 0c03 	ands.w	ip, ip, #3
 8006c38:	d06c      	beq.n	8006d14 <UFCP_Send+0x114>
 8006c3a:	7810      	ldrb	r0, [r2, #0]
 8006c3c:	75a0      	strb	r0, [r4, #22]
 8006c3e:	1e9d      	subs	r5, r3, #2
 8006c40:	f1bc 0f01 	cmp.w	ip, #1
 8006c44:	b2ed      	uxtb	r5, r5
 8006c46:	f104 0017 	add.w	r0, r4, #23
 8006c4a:	f102 0601 	add.w	r6, r2, #1
 8006c4e:	d011      	beq.n	8006c74 <UFCP_Send+0x74>
 8006c50:	7850      	ldrb	r0, [r2, #1]
 8006c52:	75e0      	strb	r0, [r4, #23]
 8006c54:	1edd      	subs	r5, r3, #3
 8006c56:	f1bc 0f03 	cmp.w	ip, #3
 8006c5a:	b2ed      	uxtb	r5, r5
 8006c5c:	f104 0018 	add.w	r0, r4, #24
 8006c60:	f102 0602 	add.w	r6, r2, #2
 8006c64:	d106      	bne.n	8006c74 <UFCP_Send+0x74>
 8006c66:	7890      	ldrb	r0, [r2, #2]
 8006c68:	7620      	strb	r0, [r4, #24]
 8006c6a:	1f1d      	subs	r5, r3, #4
 8006c6c:	b2ed      	uxtb	r5, r5
 8006c6e:	f104 0019 	add.w	r0, r4, #25
 8006c72:	1cd6      	adds	r6, r2, #3
 8006c74:	eba3 030c 	sub.w	r3, r3, ip
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f1a3 0804 	sub.w	r8, r3, #4
 8006c7e:	f3c8 0885 	ubfx	r8, r8, #2, #6
 8006c82:	eba1 010c 	sub.w	r1, r1, ip
 8006c86:	f108 0801 	add.w	r8, r8, #1
 8006c8a:	b2c9      	uxtb	r1, r1
 8006c8c:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8006c90:	2902      	cmp	r1, #2
 8006c92:	b2ff      	uxtb	r7, r7
 8006c94:	d913      	bls.n	8006cbe <UFCP_Send+0xbe>
 8006c96:	f10c 0e16 	add.w	lr, ip, #22
 8006c9a:	4462      	add	r2, ip
 8006c9c:	44a6      	add	lr, r4
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	3101      	adds	r1, #1
 8006ca2:	fa5f fc81 	uxtb.w	ip, r1
 8006ca6:	f852 9b04 	ldr.w	r9, [r2], #4
 8006caa:	f84e 9b04 	str.w	r9, [lr], #4
 8006cae:	45e0      	cmp	r8, ip
 8006cb0:	d8f6      	bhi.n	8006ca0 <UFCP_Send+0xa0>
 8006cb2:	1bed      	subs	r5, r5, r7
 8006cb4:	42bb      	cmp	r3, r7
 8006cb6:	b2ed      	uxtb	r5, r5
 8006cb8:	4438      	add	r0, r7
 8006cba:	443e      	add	r6, r7
 8006cbc:	d008      	beq.n	8006cd0 <UFCP_Send+0xd0>
 8006cbe:	7833      	ldrb	r3, [r6, #0]
 8006cc0:	7003      	strb	r3, [r0, #0]
 8006cc2:	b12d      	cbz	r5, 8006cd0 <UFCP_Send+0xd0>
 8006cc4:	7873      	ldrb	r3, [r6, #1]
 8006cc6:	7043      	strb	r3, [r0, #1]
 8006cc8:	2d01      	cmp	r5, #1
 8006cca:	d001      	beq.n	8006cd0 <UFCP_Send+0xd0>
 8006ccc:	78b3      	ldrb	r3, [r6, #2]
 8006cce:	7083      	strb	r3, [r0, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006cd0:	f104 0014 	add.w	r0, r4, #20
 8006cd4:	f7fe fb7a 	bl	80053cc <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8006cd8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006cdc:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006ce6:	6813      	ldr	r3, [r2, #0]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006ce8:	2101      	movs	r1, #1
 8006cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cee:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 8006cf2:	2002      	movs	r0, #2
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006cfa:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d00:	1843      	adds	r3, r0, r1
 8006d02:	f104 0115 	add.w	r1, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8006d06:	f812 0b01 	ldrb.w	r0, [r2], #1
 8006d0a:	f801 0f01 	strb.w	r0, [r1, #1]!
 8006d0e:	4299      	cmp	r1, r3
 8006d10:	d1f9      	bne.n	8006d06 <UFCP_Send+0x106>
 8006d12:	e7dd      	b.n	8006cd0 <UFCP_Send+0xd0>
 8006d14:	460d      	mov	r5, r1
 8006d16:	4616      	mov	r6, r2
 8006d18:	e7ac      	b.n	8006c74 <UFCP_Send+0x74>
 8006d1a:	bf00      	nop

08006d1c <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8006d1c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006d20:	b1eb      	cbz	r3, 8006d5e <UFCP_RX_IRQ_Handler+0x42>
{
 8006d22:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8006d24:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 8006d28:	4604      	mov	r4, r0
{
 8006d2a:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 8006d2c:	b2c8      	uxtb	r0, r1
    switch ( pBaseHandle->RxFrameLevel )
 8006d2e:	b163      	cbz	r3, 8006d4a <UFCP_RX_IRQ_Handler+0x2e>
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d116      	bne.n	8006d62 <UFCP_RX_IRQ_Handler+0x46>
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8006d34:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8006d36:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 8006d3a:	bf54      	ite	pl
 8006d3c:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8006d3e:	2300      	movmi	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006d40:	4824      	ldr	r0, [pc, #144]	; (8006dd4 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrameLevel =0 ;
 8006d42:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006d46:	b003      	add	sp, #12
 8006d48:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006d4a:	8a21      	ldrh	r1, [r4, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8006d4c:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8006d50:	4821      	ldr	r0, [pc, #132]	; (8006dd8 <UFCP_RX_IRQ_Handler+0xbc>)
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006d52:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8006d54:	2301      	movs	r3, #1
 8006d56:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006d5a:	b003      	add	sp, #12
 8006d5c:	bd30      	pop	{r4, r5, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006d5e:	481d      	ldr	r0, [pc, #116]	; (8006dd4 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8006d60:	4770      	bx	lr
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8006d62:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
 8006d66:	3101      	adds	r1, #1
 8006d68:	428b      	cmp	r3, r1
 8006d6a:	dc08      	bgt.n	8006d7e <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006d6c:	18e1      	adds	r1, r4, r3
          pBaseHandle->RxFrameLevel++;
 8006d6e:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006d70:	f881 0099 	strb.w	r0, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006d74:	4817      	ldr	r0, [pc, #92]	; (8006dd4 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrameLevel++;
 8006d76:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006d7a:	b003      	add	sp, #12
 8006d7c:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8006d7e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8006d82:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006d86:	680b      	ldr	r3, [r1, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f023 0320 	bic.w	r3, r3, #32
 8006d8e:	8262      	strh	r2, [r4, #18]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006d90:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8006d94:	600b      	str	r3, [r1, #0]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006d96:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006d9a:	f7fe fb17 	bl	80053cc <FCP_CalcCRC>
 8006d9e:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8006da2:	4283      	cmp	r3, r0
 8006da4:	d00a      	beq.n	8006dbc <UFCP_RX_IRQ_Handler+0xa0>
            error_code = FCP_MSG_RX_BAD_CRC;
 8006da6:	aa02      	add	r2, sp, #8
 8006da8:	230a      	movs	r3, #10
 8006daa:	f802 3d01 	strb.w	r3, [r2, #-1]!
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006dae:	4620      	mov	r0, r4
 8006db0:	2301      	movs	r3, #1
 8006db2:	21ff      	movs	r1, #255	; 0xff
 8006db4:	f7ff ff24 	bl	8006c00 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006db8:	4808      	ldr	r0, [pc, #32]	; (8006ddc <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8006dba:	e7c4      	b.n	8006d46 <UFCP_RX_IRQ_Handler+0x2a>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	68a5      	ldr	r5, [r4, #8]
 8006dc0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8006dc4:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8006dc8:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8006dcc:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006dce:	4803      	ldr	r0, [pc, #12]	; (8006ddc <UFCP_RX_IRQ_Handler+0xc0>)
 8006dd0:	e7b9      	b.n	8006d46 <UFCP_RX_IRQ_Handler+0x2a>
 8006dd2:	bf00      	nop
 8006dd4:	08007d08 	.word	0x08007d08
 8006dd8:	08007d0a 	.word	0x08007d0a
 8006ddc:	08007d0c 	.word	0x08007d0c

08006de0 <UFCP_OVR_IRQ_Handler>:
{
 8006de0:	b500      	push	{lr}
 8006de2:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8006de4:	aa02      	add	r2, sp, #8
 8006de6:	2308      	movs	r3, #8
 8006de8:	f802 3d01 	strb.w	r3, [r2, #-1]!
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006dec:	21ff      	movs	r1, #255	; 0xff
 8006dee:	2301      	movs	r3, #1
 8006df0:	f7ff ff06 	bl	8006c00 <UFCP_Send>
}
 8006df4:	b003      	add	sp, #12
 8006df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dfa:	bf00      	nop

08006dfc <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
 8006e02:	4770      	bx	lr

08006e04 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8006e04:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8006e06:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8006e08:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8006e0a:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8006e0c:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8006e0e:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8006e10:	8243      	strh	r3, [r0, #18]
  pHandle->wElAccDppP32 = 0;
 8006e12:	6203      	str	r3, [r0, #32]
  pHandle->wElSpeedDpp32 = 0;
 8006e14:	6243      	str	r3, [r0, #36]	; 0x24
  pHandle->hRemainingStep = 0u;
 8006e16:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 8006e18:	8603      	strh	r3, [r0, #48]	; 0x30
  pHandle->bTransitionStarted = false;
 8006e1a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 8006e1e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->bTransitionLocked = false;
 8006e22:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

  pHandle->bCopyObserver = false;
 8006e26:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8006e2a:	4770      	bx	lr

08006e2c <VSS_Init>:
{
 8006e2c:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8006e2e:	f7ff ffe9 	bl	8006e04 <VSS_Clear>
 8006e32:	bd08      	pop	{r3, pc}

08006e34 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8006e34:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
{
 8006e38:	4603      	mov	r3, r0
  if ( pHandle->bCopyObserver == true )
 8006e3a:	bb7a      	cbnz	r2, 8006e9c <VSS_CalcElAngle+0x68>
{
 8006e3c:	b4f0      	push	{r4, r5, r6, r7}
  {
    hRetAngle = *( int16_t * )pInputVars_str;
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006e3e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8006e40:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006e44:	88c7      	ldrh	r7, [r0, #6]
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
#endif

    if ( pHandle->bTransitionStarted == true )
 8006e46:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 8006e4a:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006e4c:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006e50:	442a      	add	r2, r5
 8006e52:	b292      	uxth	r2, r2
 8006e54:	b210      	sxth	r0, r2
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006e56:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006e58:	8618      	strh	r0, [r3, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006e5a:	80dc      	strh	r4, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 8006e5c:	b1de      	cbz	r6, 8006e96 <VSS_CalcElAngle+0x62>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8006e5e:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 8006e62:	b324      	cbz	r4, 8006eae <VSS_CalcElAngle+0x7a>
        pHandle->bTransitionEnded = true;
        pHandle->_Super.bSpeedErrorNumber = 0u;
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 8006e64:	3c01      	subs	r4, #1
 8006e66:	b224      	sxth	r4, r4
 8006e68:	85dc      	strh	r4, [r3, #46]	; 0x2e

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8006e6a:	2d00      	cmp	r5, #0
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8006e6c:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8006e6e:	db19      	blt.n	8006ea4 <VSS_CalcElAngle+0x70>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8006e70:	1a8a      	subs	r2, r1, r2
 8006e72:	b212      	sxth	r2, r2
 8006e74:	2601      	movs	r6, #1
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
          hSignCorr = -1;
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8006e76:	fb02 f404 	mul.w	r4, r2, r4
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8006e7a:	f9b3 5036 	ldrsh.w	r5, [r3, #54]	; 0x36
 8006e7e:	fb94 f4f5 	sdiv	r4, r4, r5
#endif

        hAngleCorr *= hSignCorr;

        if ( hAngleDiff >= 0 )
 8006e82:	2a00      	cmp	r2, #0
        hAngleCorr *= hSignCorr;
 8006e84:	fb14 f406 	smulbb	r4, r4, r6
 8006e88:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 8006e8a:	db19      	blt.n	8006ec0 <VSS_CalcElAngle+0x8c>
        {
          pHandle->bTransitionLocked = true;
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8006e8c:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 8006e8e:	2201      	movs	r2, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8006e90:	b220      	sxth	r0, r4
          pHandle->bTransitionLocked = true;
 8006e92:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8006e96:	8098      	strh	r0, [r3, #4]
  return hRetAngle;
}
 8006e98:	bcf0      	pop	{r4, r5, r6, r7}
 8006e9a:	4770      	bx	lr
    hRetAngle = *( int16_t * )pInputVars_str;
 8006e9c:	f9b1 0000 	ldrsh.w	r0, [r1]
  pHandle->_Super.hElAngle = hRetAngle;
 8006ea0:	8098      	strh	r0, [r3, #4]
}
 8006ea2:	4770      	bx	lr
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8006ea4:	1a52      	subs	r2, r2, r1
 8006ea6:	b212      	sxth	r2, r2
 8006ea8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8006eac:	e7e3      	b.n	8006e76 <VSS_CalcElAngle+0x42>
        hRetAngle = *( int16_t * )pInputVars_str;
 8006eae:	f9b1 0000 	ldrsh.w	r0, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8006eb2:	701c      	strb	r4, [r3, #0]
        pHandle->bTransitionEnded = true;
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 8006eba:	8098      	strh	r0, [r3, #4]
}
 8006ebc:	bcf0      	pop	{r4, r5, r6, r7}
 8006ebe:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 8006ec0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	d0e6      	beq.n	8006e96 <VSS_CalcElAngle+0x62>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8006ec8:	440c      	add	r4, r1
 8006eca:	b220      	sxth	r0, r4
 8006ecc:	e7e3      	b.n	8006e96 <VSS_CalcElAngle+0x62>
 8006ece:	bf00      	nop

08006ed0 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8006ed0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8006ed2:	2b01      	cmp	r3, #1
{
 8006ed4:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 8006ed6:	d928      	bls.n	8006f2a <VSS_CalcAvrgMecSpeedUnit+0x5a>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006ed8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006eda:	6a02      	ldr	r2, [r0, #32]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006edc:	7846      	ldrb	r6, [r0, #1]
 8006ede:	69c5      	ldr	r5, [r0, #28]
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006ee0:	4413      	add	r3, r2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006ee2:	1e1c      	subs	r4, r3, #0
 8006ee4:	bfb8      	it	lt
 8006ee6:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006eea:	8b42      	ldrh	r2, [r0, #26]
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006eec:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006eee:	bfb8      	it	lt
 8006ef0:	34ff      	addlt	r4, #255	; 0xff
 8006ef2:	1424      	asrs	r4, r4, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8006ef4:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006ef8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006efc:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006efe:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006f02:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8006f06:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006f08:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8006f0a:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8006f0c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8006f0e:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8006f10:	1e53      	subs	r3, r2, #1
 8006f12:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8006f14:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006f18:	b923      	cbnz	r3, 8006f24 <VSS_CalcAvrgMecSpeedUnit+0x54>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006f1a:	78c2      	ldrb	r2, [r0, #3]
 8006f1c:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8006f1e:	bc70      	pop	{r4, r5, r6}
 8006f20:	4618      	mov	r0, r3
 8006f22:	4770      	bx	lr
 8006f24:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8006f26:	f7ff bc71 	b.w	800680c <SPD_IsMecSpeedReliable>
  else if ( pHandle->hRemainingStep == 1u )
 8006f2a:	d003      	beq.n	8006f34 <VSS_CalcAvrgMecSpeedUnit+0x64>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8006f2c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8006f30:	800b      	strh	r3, [r1, #0]
 8006f32:	e7ef      	b.n	8006f14 <VSS_CalcAvrgMecSpeedUnit+0x44>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8006f34:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 8006f38:	800a      	strh	r2, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006f3a:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8006f3c:	8182      	strh	r2, [r0, #12]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8006f3e:	f9b1 5000 	ldrsh.w	r5, [r1]
 8006f42:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006f44:	7844      	ldrb	r4, [r0, #1]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006f46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8006f4a:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006f4e:	005b      	lsls	r3, r3, #1
    pHandle->hRemainingStep = 0u;
 8006f50:	2500      	movs	r5, #0
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8006f52:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006f56:	fb14 f303 	smulbb	r3, r4, r3
 8006f5a:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 8006f5c:	8505      	strh	r5, [r0, #40]	; 0x28
 8006f5e:	e7d9      	b.n	8006f14 <VSS_CalcAvrgMecSpeedUnit+0x44>

08006f60 <VSS_SetMecAngle>:
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
 8006f60:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
  pHandle->_Super.hElAngle = hMecAngle;
 8006f62:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8006f64:	7843      	ldrb	r3, [r0, #1]
 8006f66:	fb91 f1f3 	sdiv	r1, r1, r3
 8006f6a:	80c1      	strh	r1, [r0, #6]
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop

08006f70 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8006f70:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d137      	bne.n	8006fe8 <VSS_SetMecAcceleration+0x78>
{
 8006f78:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    if ( hDurationms == 0u )
 8006f7a:	b322      	cbz	r2, 8006fc6 <VSS_SetMecAcceleration+0x56>
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
    }
    else
    {
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8006f7c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8006f7e:	4e1b      	ldr	r6, [pc, #108]	; (8006fec <VSS_SetMecAcceleration+0x7c>)

      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
                            ( int16_t )pHandle->_Super.bElToMecRatio;

      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006f80:	8b45      	ldrh	r5, [r0, #26]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8006f82:	69c4      	ldr	r4, [r0, #28]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8006f84:	f9b0 700e 	ldrsh.w	r7, [r0, #14]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;

      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006f88:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8006f8e:	fba6 2303 	umull	r2, r3, r6, r3
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8006f92:	f3c3 138f 	ubfx	r3, r3, #6, #16
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8006f96:	7846      	ldrb	r6, [r0, #1]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8006f98:	fb97 fef6 	sdiv	lr, r7, r6
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006f9c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
      hNbrStep++;
 8006fa0:	3301      	adds	r3, #1
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006fa2:	006d      	lsls	r5, r5, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8006fa4:	fb04 f201 	mul.w	r2, r4, r1
 8006fa8:	fb92 f2f5 	sdiv	r2, r2, r5
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006fac:	eba2 020e 	sub.w	r2, r2, lr
      hNbrStep++;
 8006fb0:	b29b      	uxth	r3, r3
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006fb2:	0412      	lsls	r2, r2, #16

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8006fb4:	043f      	lsls	r7, r7, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006fb6:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8006fba:	fb06 f202 	mul.w	r2, r6, r2
      pHandle->hRemainingStep = hNbrStep;
 8006fbe:	8503      	strh	r3, [r0, #40]	; 0x28
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8006fc0:	6202      	str	r2, [r0, #32]
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8006fc2:	6247      	str	r7, [r0, #36]	; 0x24
 8006fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006fc6:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8006fc8:	69c4      	ldr	r4, [r0, #28]
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006fca:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8006fcc:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006fce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006fd2:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8006fd4:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8006fd8:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006fdc:	fb15 f303 	smulbb	r3, r5, r3
      pHandle->hRemainingStep = 0u;
 8006fe0:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006fe2:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006fe4:	81c3      	strh	r3, [r0, #14]
 8006fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	10624dd3 	.word	0x10624dd3

08006ff0 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8006ff0:	b151      	cbz	r1, 8007008 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8006ff2:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8006ffc:	b923      	cbnz	r3, 8007008 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8006ffe:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8007002:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8007004:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8007006:	4770      	bx	lr
  bool bAux = true;
 8007008:	2001      	movs	r0, #1
 800700a:	4770      	bx	lr

0800700c <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 800700c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop

08007014 <VSS_SetCopyObserver>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @retval none
  */
__weak void VSS_SetCopyObserver( VirtualSpeedSensor_Handle_t * pHandle )
{
  pHandle->bCopyObserver = true;
 8007014:	2301      	movs	r3, #1
 8007016:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 800701a:	4770      	bx	lr

0800701c <RUC_Init>:
 800701c:	b430      	push	{r4, r5}
 800701e:	6681      	str	r1, [r0, #104]	; 0x68
 8007020:	2100      	movs	r1, #0
 8007022:	9c02      	ldr	r4, [sp, #8]
 8007024:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8007028:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800702c:	f110 010c 	adds.w	r1, r0, #12
 8007030:	66c2      	str	r2, [r0, #108]	; 0x6c
 8007032:	6703      	str	r3, [r0, #112]	; 0x70
 8007034:	6744      	str	r4, [r0, #116]	; 0x74
 8007036:	d023      	beq.n	8007080 <RUC_Init+0x64>
 8007038:	6943      	ldr	r3, [r0, #20]
 800703a:	b323      	cbz	r3, 8007086 <RUC_Init+0x6a>
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	b323      	cbz	r3, 800708a <RUC_Init+0x6e>
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	b323      	cbz	r3, 800708e <RUC_Init+0x72>
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	b1c3      	cbz	r3, 800707a <RUC_Init+0x5e>
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2105      	movs	r1, #5
 800704c:	b1b3      	cbz	r3, 800707c <RUC_Init+0x60>
 800704e:	2204      	movs	r2, #4
 8007050:	2105      	movs	r1, #5
 8007052:	8805      	ldrh	r5, [r0, #0]
 8007054:	4c0f      	ldr	r4, [pc, #60]	; (8007094 <RUC_Init+0x78>)
 8007056:	2364      	movs	r3, #100	; 0x64
 8007058:	fb03 f305 	mul.w	r3, r3, r5
 800705c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007060:	fba4 4303 	umull	r4, r3, r4, r3
 8007064:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007068:	2400      	movs	r4, #0
 800706a:	099b      	lsrs	r3, r3, #6
 800706c:	6154      	str	r4, [r2, #20]
 800706e:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 8007072:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8007076:	bc30      	pop	{r4, r5}
 8007078:	4770      	bx	lr
 800707a:	2104      	movs	r1, #4
 800707c:	1e4a      	subs	r2, r1, #1
 800707e:	e7e8      	b.n	8007052 <RUC_Init+0x36>
 8007080:	f04f 32ff 	mov.w	r2, #4294967295
 8007084:	e7e5      	b.n	8007052 <RUC_Init+0x36>
 8007086:	2101      	movs	r1, #1
 8007088:	e7f8      	b.n	800707c <RUC_Init+0x60>
 800708a:	2102      	movs	r1, #2
 800708c:	e7f6      	b.n	800707c <RUC_Init+0x60>
 800708e:	2103      	movs	r1, #3
 8007090:	e7f4      	b.n	800707c <RUC_Init+0x60>
 8007092:	bf00      	nop
 8007094:	10624dd3 	.word	0x10624dd3

08007098 <RUC_Clear>:
 8007098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800709c:	4604      	mov	r4, r0
 800709e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 80070a0:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 80070a4:	80e1      	strh	r1, [r4, #6]
 80070a6:	2500      	movs	r5, #0
 80070a8:	4638      	mov	r0, r7
 80070aa:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 80070ae:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80070b2:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 80070b6:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 80070ba:	460e      	mov	r6, r1
 80070bc:	f7ff fea2 	bl	8006e04 <VSS_Clear>
 80070c0:	4629      	mov	r1, r5
 80070c2:	4640      	mov	r0, r8
 80070c4:	f7ff fc08 	bl	80068d8 <STC_SetControlMode>
 80070c8:	8861      	ldrh	r1, [r4, #2]
 80070ca:	b2b6      	uxth	r6, r6
 80070cc:	fb11 f106 	smulbb	r1, r1, r6
 80070d0:	b209      	sxth	r1, r1
 80070d2:	4638      	mov	r0, r7
 80070d4:	f7ff ff44 	bl	8006f60 <VSS_SetMecAngle>
 80070d8:	462a      	mov	r2, r5
 80070da:	4629      	mov	r1, r5
 80070dc:	4640      	mov	r0, r8
 80070de:	f7ff fbff 	bl	80068e0 <STC_ExecRamp>
 80070e2:	8a21      	ldrh	r1, [r4, #16]
 80070e4:	89a2      	ldrh	r2, [r4, #12]
 80070e6:	fb11 f106 	smulbb	r1, r1, r6
 80070ea:	b209      	sxth	r1, r1
 80070ec:	4640      	mov	r0, r8
 80070ee:	f7ff fbf7 	bl	80068e0 <STC_ExecRamp>
 80070f2:	89e1      	ldrh	r1, [r4, #14]
 80070f4:	89a2      	ldrh	r2, [r4, #12]
 80070f6:	fb11 f106 	smulbb	r1, r1, r6
 80070fa:	4638      	mov	r0, r7
 80070fc:	b209      	sxth	r1, r1
 80070fe:	f7ff ff37 	bl	8006f70 <VSS_SetMecAcceleration>
 8007102:	89a0      	ldrh	r0, [r4, #12]
 8007104:	8823      	ldrh	r3, [r4, #0]
 8007106:	4907      	ldr	r1, [pc, #28]	; (8007124 <RUC_Clear+0x8c>)
 8007108:	6962      	ldr	r2, [r4, #20]
 800710a:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800710e:	fb03 f300 	mul.w	r3, r3, r0
 8007112:	fba1 1303 	umull	r1, r3, r1, r3
 8007116:	099b      	lsrs	r3, r3, #6
 8007118:	3301      	adds	r3, #1
 800711a:	80a3      	strh	r3, [r4, #4]
 800711c:	60a2      	str	r2, [r4, #8]
 800711e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007122:	bf00      	nop
 8007124:	10624dd3 	.word	0x10624dd3

08007128 <RUC_OTF_Exec>:
 8007128:	8883      	ldrh	r3, [r0, #4]
 800712a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712e:	4604      	mov	r4, r0
 8007130:	b153      	cbz	r3, 8007148 <RUC_OTF_Exec+0x20>
 8007132:	3b01      	subs	r3, #1
 8007134:	f890 5058 	ldrb.w	r5, [r0, #88]	; 0x58
 8007138:	b29b      	uxth	r3, r3
 800713a:	8083      	strh	r3, [r0, #4]
 800713c:	2d00      	cmp	r5, #0
 800713e:	d037      	beq.n	80071b0 <RUC_OTF_Exec+0x88>
 8007140:	b113      	cbz	r3, 8007148 <RUC_OTF_Exec+0x20>
 8007142:	2001      	movs	r0, #1
 8007144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007148:	68a3      	ldr	r3, [r4, #8]
 800714a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80c0 	beq.w	80072d4 <RUC_OTF_Exec+0x1ac>
 8007154:	2d00      	cmp	r5, #0
 8007156:	f000 80ad 	beq.w	80072b4 <RUC_OTF_Exec+0x18c>
 800715a:	2d01      	cmp	r5, #1
 800715c:	f000 80d3 	beq.w	8007306 <RUC_OTF_Exec+0x1de>
 8007160:	88e5      	ldrh	r5, [r4, #6]
 8007162:	8899      	ldrh	r1, [r3, #4]
 8007164:	881a      	ldrh	r2, [r3, #0]
 8007166:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007168:	fb11 f105 	smulbb	r1, r1, r5
 800716c:	b209      	sxth	r1, r1
 800716e:	f7ff fbb7 	bl	80068e0 <STC_ExecRamp>
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	88e5      	ldrh	r5, [r4, #6]
 8007176:	8859      	ldrh	r1, [r3, #2]
 8007178:	881a      	ldrh	r2, [r3, #0]
 800717a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800717c:	fb11 f105 	smulbb	r1, r1, r5
 8007180:	b209      	sxth	r1, r1
 8007182:	f7ff fef5 	bl	8006f70 <VSS_SetMecAcceleration>
 8007186:	68a1      	ldr	r1, [r4, #8]
 8007188:	8823      	ldrh	r3, [r4, #0]
 800718a:	880d      	ldrh	r5, [r1, #0]
 800718c:	487a      	ldr	r0, [pc, #488]	; (8007378 <RUC_OTF_Exec+0x250>)
 800718e:	6889      	ldr	r1, [r1, #8]
 8007190:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8007194:	60a1      	str	r1, [r4, #8]
 8007196:	fb03 f305 	mul.w	r3, r3, r5
 800719a:	fba0 1303 	umull	r1, r3, r0, r3
 800719e:	3201      	adds	r2, #1
 80071a0:	099b      	lsrs	r3, r3, #6
 80071a2:	3301      	adds	r3, #1
 80071a4:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80071a8:	80a3      	strh	r3, [r4, #4]
 80071aa:	2001      	movs	r0, #1
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 80071b4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 8099 	bne.w	80072ee <RUC_OTF_Exec+0x1c6>
 80071bc:	68c2      	ldr	r2, [r0, #12]
 80071be:	b152      	cbz	r2, 80071d6 <RUC_OTF_Exec+0xae>
 80071c0:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 80071c4:	f894 1056 	ldrb.w	r1, [r4, #86]	; 0x56
 80071c8:	3301      	adds	r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4299      	cmp	r1, r3
 80071ce:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 80071d2:	f0c0 80ae 	bcc.w	8007332 <RUC_OTF_Exec+0x20a>
 80071d6:	6903      	ldr	r3, [r0, #16]
 80071d8:	4798      	blx	r3
 80071da:	2800      	cmp	r0, #0
 80071dc:	f000 808b 	beq.w	80072f6 <RUC_OTF_Exec+0x1ce>
 80071e0:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
 80071e4:	2d7e      	cmp	r5, #126	; 0x7e
 80071e6:	f240 8096 	bls.w	8007316 <RUC_OTF_Exec+0x1ee>
 80071ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	f000 80a9 	beq.w	8007346 <RUC_OTF_Exec+0x21e>
 80071f4:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 80071f8:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
 80071fc:	d179      	bne.n	80072f2 <RUC_OTF_Exec+0x1ca>
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	f7ff fafc 	bl	80067fc <SPD_GetAvrgMecSpeedUnit>
 8007204:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8007208:	2b00      	cmp	r3, #0
 800720a:	4680      	mov	r8, r0
 800720c:	f340 8088 	ble.w	8007320 <RUC_OTF_Exec+0x1f8>
 8007210:	f1b8 0f00 	cmp.w	r8, #0
 8007214:	f340 8088 	ble.w	8007328 <RUC_OTF_Exec+0x200>
 8007218:	ea88 77e8 	eor.w	r7, r8, r8, asr #31
 800721c:	eba7 77e8 	sub.w	r7, r7, r8, asr #31
 8007220:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8007224:	b2bb      	uxth	r3, r7
 8007226:	429a      	cmp	r2, r3
 8007228:	f0c0 8091 	bcc.w	800734e <RUC_OTF_Exec+0x226>
 800722c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8007230:	429a      	cmp	r2, r3
 8007232:	d25e      	bcs.n	80072f2 <RUC_OTF_Exec+0x1ca>
 8007234:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007236:	f7ff feed 	bl	8007014 <VSS_SetCopyObserver>
 800723a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800723c:	6883      	ldr	r3, [r0, #8]
 800723e:	4798      	blx	r3
 8007240:	68a3      	ldr	r3, [r4, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d043      	beq.n	80072ce <RUC_OTF_Exec+0x1a6>
 8007246:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 800724a:	b23f      	sxth	r7, r7
 800724c:	4577      	cmp	r7, lr
 800724e:	f340 808d 	ble.w	800736c <RUC_OTF_Exec+0x244>
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8007258:	b932      	cbnz	r2, 8007268 <RUC_OTF_Exec+0x140>
 800725a:	e081      	b.n	8007360 <RUC_OTF_Exec+0x238>
 800725c:	6890      	ldr	r0, [r2, #8]
 800725e:	46b6      	mov	lr, r6
 8007260:	4613      	mov	r3, r2
 8007262:	2800      	cmp	r0, #0
 8007264:	d07b      	beq.n	800735e <RUC_OTF_Exec+0x236>
 8007266:	4602      	mov	r2, r0
 8007268:	3501      	adds	r5, #1
 800726a:	b2ed      	uxtb	r5, r5
 800726c:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 8007270:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8007274:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8007278:	42b7      	cmp	r7, r6
 800727a:	dcef      	bgt.n	800725c <RUC_OTF_Exec+0x134>
 800727c:	60a2      	str	r2, [r4, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007284:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007286:	eba1 010c 	sub.w	r1, r1, ip
 800728a:	eba6 060e 	sub.w	r6, r6, lr
 800728e:	fb08 f101 	mul.w	r1, r8, r1
 8007292:	fb91 f1f6 	sdiv	r1, r1, r6
 8007296:	4461      	add	r1, ip
 8007298:	b209      	sxth	r1, r1
 800729a:	2200      	movs	r2, #0
 800729c:	f7ff fb20 	bl	80068e0 <STC_ExecRamp>
 80072a0:	2306      	movs	r3, #6
 80072a2:	2001      	movs	r0, #1
 80072a4:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80072a8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80072ac:	80a0      	strh	r0, [r4, #4]
 80072ae:	60a2      	str	r2, [r4, #8]
 80072b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80072b6:	f7fe fb35 	bl	8005924 <PWMC_SwitchOffPWM>
 80072ba:	2301      	movs	r3, #1
 80072bc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80072c0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80072c2:	f7fe fb5b 	bl	800597c <PWMC_TurnOnLowSides>
 80072c6:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 80072ca:	68a3      	ldr	r3, [r4, #8]
 80072cc:	e748      	b.n	8007160 <RUC_OTF_Exec+0x38>
 80072ce:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 80072d2:	80a3      	strh	r3, [r4, #4]
 80072d4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80072d8:	3b01      	subs	r3, #1
 80072da:	429d      	cmp	r5, r3
 80072dc:	d030      	beq.n	8007340 <RUC_OTF_Exec+0x218>
 80072de:	2d07      	cmp	r5, #7
 80072e0:	f47f af2f 	bne.w	8007142 <RUC_OTF_Exec+0x1a>
 80072e4:	2300      	movs	r3, #0
 80072e6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80072ea:	80a3      	strh	r3, [r4, #4]
 80072ec:	e729      	b.n	8007142 <RUC_OTF_Exec+0x1a>
 80072ee:	6843      	ldr	r3, [r0, #4]
 80072f0:	4798      	blx	r3
 80072f2:	88a3      	ldrh	r3, [r4, #4]
 80072f4:	e724      	b.n	8007140 <RUC_OTF_Exec+0x18>
 80072f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80072f8:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	2a00      	cmp	r2, #0
 8007300:	f47f af78 	bne.w	80071f4 <RUC_OTF_Exec+0xcc>
 8007304:	e7f5      	b.n	80072f2 <RUC_OTF_Exec+0x1ca>
 8007306:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007308:	f7fe fb0e 	bl	8005928 <PWMC_SwitchOnPWM>
 800730c:	2200      	movs	r2, #0
 800730e:	68a3      	ldr	r3, [r4, #8]
 8007310:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8007314:	e724      	b.n	8007160 <RUC_OTF_Exec+0x38>
 8007316:	3501      	adds	r5, #1
 8007318:	b2ed      	uxtb	r5, r5
 800731a:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800731e:	e764      	b.n	80071ea <RUC_OTF_Exec+0xc2>
 8007320:	f1b8 0f00 	cmp.w	r8, #0
 8007324:	f6ff af78 	blt.w	8007218 <RUC_OTF_Exec+0xf0>
 8007328:	2300      	movs	r3, #0
 800732a:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 800732e:	88a3      	ldrh	r3, [r4, #4]
 8007330:	e706      	b.n	8007140 <RUC_OTF_Exec+0x18>
 8007332:	4790      	blx	r2
 8007334:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007336:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800733a:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800733e:	e74a      	b.n	80071d6 <RUC_OTF_Exec+0xae>
 8007340:	2000      	movs	r0, #0
 8007342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007346:	2d7f      	cmp	r5, #127	; 0x7f
 8007348:	f43f af59 	beq.w	80071fe <RUC_OTF_Exec+0xd6>
 800734c:	e7d1      	b.n	80072f2 <RUC_OTF_Exec+0x1ca>
 800734e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007350:	6843      	ldr	r3, [r0, #4]
 8007352:	4798      	blx	r3
 8007354:	2301      	movs	r3, #1
 8007356:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800735a:	88a3      	ldrh	r3, [r4, #4]
 800735c:	e6f0      	b.n	8007140 <RUC_OTF_Exec+0x18>
 800735e:	60a2      	str	r2, [r4, #8]
 8007360:	2200      	movs	r2, #0
 8007362:	80a2      	strh	r2, [r4, #4]
 8007364:	2d00      	cmp	r5, #0
 8007366:	f47f aef8 	bne.w	800715a <RUC_OTF_Exec+0x32>
 800736a:	e7a3      	b.n	80072b4 <RUC_OTF_Exec+0x18c>
 800736c:	4676      	mov	r6, lr
 800736e:	f04f 0e00 	mov.w	lr, #0
 8007372:	46f4      	mov	ip, lr
 8007374:	e784      	b.n	8007280 <RUC_OTF_Exec+0x158>
 8007376:	bf00      	nop
 8007378:	10624dd3 	.word	0x10624dd3

0800737c <RUC_FirstAccelerationStageReached>:
 800737c:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007380:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8007384:	4282      	cmp	r2, r0
 8007386:	bf34      	ite	cc
 8007388:	2000      	movcc	r0, #0
 800738a:	2001      	movcs	r0, #1
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop

08007390 <RUC_SetPhaseDurationms>:
 8007390:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007394:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007398:	818a      	strh	r2, [r1, #12]
 800739a:	4770      	bx	lr

0800739c <RUC_SetPhaseFinalMecSpeedUnit>:
 800739c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80073a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073a4:	81ca      	strh	r2, [r1, #14]
 80073a6:	4770      	bx	lr

080073a8 <RUC_SetPhaseFinalTorque>:
 80073a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80073ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073b0:	820a      	strh	r2, [r1, #16]
 80073b2:	4770      	bx	lr

080073b4 <RUC_GetPhaseDurationms>:
 80073b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80073b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073bc:	8988      	ldrh	r0, [r1, #12]
 80073be:	4770      	bx	lr

080073c0 <RUC_GetPhaseFinalMecSpeedUnit>:
 80073c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80073c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073c8:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop

080073d0 <RUC_GetPhaseFinalTorque>:
 80073d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80073d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073d8:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop

080073e0 <RUC_GetNumberOfPhases>:
 80073e0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop

080073e8 <RUC_Get_SCLowsideOTF_Status>:
 80073e8:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop

080073f0 <STO_PLL_CalcElAngle>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 80073f8:	f8d0 c068 	ldr.w	ip, [r0, #104]	; 0x68
 80073fc:	4604      	mov	r4, r0
 80073fe:	03d8      	lsls	r0, r3, #15
 8007400:	1ac2      	subs	r2, r0, r3
 8007402:	4594      	cmp	ip, r2
 8007404:	b087      	sub	sp, #28
 8007406:	f340 80c4 	ble.w	8007592 <STO_PLL_CalcElAngle+0x1a2>
 800740a:	66a2      	str	r2, [r4, #104]	; 0x68
 800740c:	4694      	mov	ip, r2
 800740e:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 8007412:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 8007416:	fa4c f605 	asr.w	r6, ip, r5
 800741a:	9602      	str	r6, [sp, #8]
 800741c:	4572      	cmp	r2, lr
 800741e:	b236      	sxth	r6, r6
 8007420:	9600      	str	r6, [sp, #0]
 8007422:	f280 80c8 	bge.w	80075b6 <STO_PLL_CalcElAngle+0x1c6>
 8007426:	66e2      	str	r2, [r4, #108]	; 0x6c
 8007428:	4696      	mov	lr, r2
 800742a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800742e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007430:	03de      	lsls	r6, r3, #15
 8007432:	fa4e f205 	asr.w	r2, lr, r5
 8007436:	1af5      	subs	r5, r6, r3
 8007438:	9203      	str	r2, [sp, #12]
 800743a:	42a8      	cmp	r0, r5
 800743c:	b212      	sxth	r2, r2
 800743e:	9201      	str	r2, [sp, #4]
 8007440:	f340 80b3 	ble.w	80075aa <STO_PLL_CalcElAngle+0x1ba>
 8007444:	6625      	str	r5, [r4, #96]	; 0x60
 8007446:	4628      	mov	r0, r5
 8007448:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800744a:	4295      	cmp	r5, r2
 800744c:	f280 80a7 	bge.w	800759e <STO_PLL_CalcElAngle+0x1ae>
 8007450:	6665      	str	r5, [r4, #100]	; 0x64
 8007452:	462a      	mov	r2, r5
 8007454:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8007458:	f8b1 9006 	ldrh.w	r9, [r1, #6]
 800745c:	888d      	ldrh	r5, [r1, #4]
 800745e:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
 8007462:	f8bd 7000 	ldrh.w	r7, [sp]
 8007466:	f8b1 a008 	ldrh.w	sl, [r1, #8]
 800746a:	f9b1 8000 	ldrsh.w	r8, [r1]
 800746e:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8007472:	f8a4 7070 	strh.w	r7, [r4, #112]	; 0x70
 8007476:	fa40 f703 	asr.w	r7, r0, r3
 800747a:	fa42 f303 	asr.w	r3, r2, r3
 800747e:	fb13 f10b 	smulbb	r1, r3, fp
 8007482:	1b7d      	subs	r5, r7, r5
 8007484:	eba3 0309 	sub.w	r3, r3, r9
 8007488:	fb17 f70b 	smulbb	r7, r7, fp
 800748c:	f9b4 9022 	ldrsh.w	r9, [r4, #34]	; 0x22
 8007490:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8007494:	f8a4 b072 	strh.w	fp, [r4, #114]	; 0x72
 8007498:	1a51      	subs	r1, r2, r1
 800749a:	b22d      	sxth	r5, r5
 800749c:	fb0a f208 	mul.w	r2, sl, r8
 80074a0:	1bc0      	subs	r0, r0, r7
 80074a2:	f9b4 8028 	ldrsh.w	r8, [r4, #40]	; 0x28
 80074a6:	8e67      	ldrh	r7, [r4, #50]	; 0x32
 80074a8:	f9b4 b124 	ldrsh.w	fp, [r4, #292]	; 0x124
 80074ac:	fb09 0005 	mla	r0, r9, r5, r0
 80074b0:	1412      	asrs	r2, r2, #16
 80074b2:	fb08 0202 	mla	r2, r8, r2, r0
 80074b6:	9801      	ldr	r0, [sp, #4]
 80074b8:	f1bb 0f00 	cmp.w	fp, #0
 80074bc:	b21b      	sxth	r3, r3
 80074be:	fa40 fb07 	asr.w	fp, r0, r7
 80074c2:	fb0a f606 	mul.w	r6, sl, r6
 80074c6:	9800      	ldr	r0, [sp, #0]
 80074c8:	fb09 1a03 	mla	sl, r9, r3, r1
 80074cc:	ea4f 4626 	mov.w	r6, r6, asr #16
 80074d0:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 80074d4:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 80074d8:	fb08 a606 	mla	r6, r8, r6, sl
 80074dc:	fa40 f707 	asr.w	r7, r0, r7
 80074e0:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 80074e4:	f9b4 a024 	ldrsh.w	sl, [r4, #36]	; 0x24
 80074e8:	fb09 e303 	mla	r3, r9, r3, lr
 80074ec:	fb07 f701 	mul.w	r7, r7, r1
 80074f0:	fb01 fb0b 	mul.w	fp, r1, fp
 80074f4:	fb07 3718 	mls	r7, r7, r8, r3
 80074f8:	9900      	ldr	r1, [sp, #0]
 80074fa:	9b01      	ldr	r3, [sp, #4]
 80074fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007500:	fb05 c509 	mla	r5, r5, r9, ip
 8007504:	bfb8      	it	lt
 8007506:	4681      	movlt	r9, r0
 8007508:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800750c:	bfa8      	it	ge
 800750e:	f04f 0901 	movge.w	r9, #1
 8007512:	fb0a 6613 	mls	r6, sl, r3, r6
 8007516:	fb08 550b 	mla	r5, r8, fp, r5
 800751a:	fb0a 2b11 	mls	fp, sl, r1, r2
 800751e:	f7f9 fa1d 	bl	800095c <MCM_Trig_Functions>
 8007522:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007526:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800752a:	fb13 f309 	smulbb	r3, r3, r9
 800752e:	fb12 f109 	smulbb	r1, r2, r9
 8007532:	425b      	negs	r3, r3
 8007534:	fb10 f303 	smulbb	r3, r0, r3
 8007538:	fb10 f021 	smultb	r0, r0, r1
 800753c:	f343 33cf 	sbfx	r3, r3, #15, #16
 8007540:	f340 31cf 	sbfx	r1, r0, #15, #16
 8007544:	1a59      	subs	r1, r3, r1
 8007546:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800754a:	f7fd ffff 	bl	800554c <PI_Controller>
 800754e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 8007552:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 8007556:	8220      	strh	r0, [r4, #16]
 8007558:	3301      	adds	r3, #1
 800755a:	b2db      	uxtb	r3, r3
 800755c:	429a      	cmp	r2, r3
 800755e:	bf0a      	itet	eq
 8007560:	2200      	moveq	r2, #0
 8007562:	461a      	movne	r2, r3
 8007564:	4613      	moveq	r3, r2
 8007566:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800756a:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800756e:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8007572:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 8007576:	88a2      	ldrh	r2, [r4, #4]
 8007578:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 800757c:	4410      	add	r0, r2
 800757e:	b200      	sxth	r0, r0
 8007580:	f8c4 b060 	str.w	fp, [r4, #96]	; 0x60
 8007584:	66a5      	str	r5, [r4, #104]	; 0x68
 8007586:	6666      	str	r6, [r4, #100]	; 0x64
 8007588:	66e7      	str	r7, [r4, #108]	; 0x6c
 800758a:	80a0      	strh	r0, [r4, #4]
 800758c:	b007      	add	sp, #28
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	1a1d      	subs	r5, r3, r0
 8007594:	45ac      	cmp	ip, r5
 8007596:	bfdc      	itt	le
 8007598:	66a5      	strle	r5, [r4, #104]	; 0x68
 800759a:	46ac      	movle	ip, r5
 800759c:	e737      	b.n	800740e <STO_PLL_CalcElAngle+0x1e>
 800759e:	1b9b      	subs	r3, r3, r6
 80075a0:	429a      	cmp	r2, r3
 80075a2:	bfdc      	itt	le
 80075a4:	6663      	strle	r3, [r4, #100]	; 0x64
 80075a6:	461a      	movle	r2, r3
 80075a8:	e754      	b.n	8007454 <STO_PLL_CalcElAngle+0x64>
 80075aa:	1b9a      	subs	r2, r3, r6
 80075ac:	4290      	cmp	r0, r2
 80075ae:	bfdc      	itt	le
 80075b0:	6622      	strle	r2, [r4, #96]	; 0x60
 80075b2:	4610      	movle	r0, r2
 80075b4:	e748      	b.n	8007448 <STO_PLL_CalcElAngle+0x58>
 80075b6:	1a1b      	subs	r3, r3, r0
 80075b8:	459e      	cmp	lr, r3
 80075ba:	bfdc      	itt	le
 80075bc:	66e3      	strle	r3, [r4, #108]	; 0x6c
 80075be:	469e      	movle	lr, r3
 80075c0:	e733      	b.n	800742a <STO_PLL_CalcElAngle+0x3a>
 80075c2:	bf00      	nop

080075c4 <STO_PLL_CalcAvrgMecSpeedUnit>:
 80075c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075c6:	f890 710e 	ldrb.w	r7, [r0, #270]	; 0x10e
 80075ca:	2f00      	cmp	r7, #0
 80075cc:	f000 8099 	beq.w	8007702 <STO_PLL_CalcAvrgMecSpeedUnit+0x13e>
 80075d0:	1e7e      	subs	r6, r7, #1
 80075d2:	b2f6      	uxtb	r6, r6
 80075d4:	363a      	adds	r6, #58	; 0x3a
 80075d6:	f100 0472 	add.w	r4, r0, #114	; 0x72
 80075da:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80075de:	4622      	mov	r2, r4
 80075e0:	2300      	movs	r3, #0
 80075e2:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 80075e6:	4296      	cmp	r6, r2
 80075e8:	442b      	add	r3, r5
 80075ea:	d1fa      	bne.n	80075e2 <STO_PLL_CalcAvrgMecSpeedUnit+0x1e>
 80075ec:	2500      	movs	r5, #0
 80075ee:	fb93 f6f7 	sdiv	r6, r3, r7
 80075f2:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 80075f6:	1b9b      	subs	r3, r3, r6
 80075f8:	42a2      	cmp	r2, r4
 80075fa:	fb03 5503 	mla	r5, r3, r3, r5
 80075fe:	d1f8      	bne.n	80075f2 <STO_PLL_CalcAvrgMecSpeedUnit+0x2e>
 8007600:	fb95 f5f7 	sdiv	r5, r5, r7
 8007604:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 8007608:	8b43      	ldrh	r3, [r0, #26]
 800760a:	7884      	ldrb	r4, [r0, #2]
 800760c:	f890 7104 	ldrb.w	r7, [r0, #260]	; 0x104
 8007610:	fb06 fe06 	mul.w	lr, r6, r6
 8007614:	fb02 f20e 	mul.w	r2, r2, lr
 8007618:	11d2      	asrs	r2, r2, #7
 800761a:	fb06 f303 	mul.w	r3, r6, r3
 800761e:	42aa      	cmp	r2, r5
 8007620:	fb03 f304 	mul.w	r3, r3, r4
 8007624:	bfd8      	it	le
 8007626:	2600      	movle	r6, #0
 8007628:	69c4      	ldr	r4, [r0, #28]
 800762a:	fb93 f3f4 	sdiv	r3, r3, r4
 800762e:	bfc8      	it	gt
 8007630:	2601      	movgt	r6, #1
 8007632:	7844      	ldrb	r4, [r0, #1]
 8007634:	fb93 f3f4 	sdiv	r3, r3, r4
 8007638:	b21c      	sxth	r4, r3
 800763a:	800c      	strh	r4, [r1, #0]
 800763c:	8184      	strh	r4, [r0, #12]
 800763e:	f880 60f5 	strb.w	r6, [r0, #245]	; 0xf5
 8007642:	b1b7      	cbz	r7, 8007672 <STO_PLL_CalcAvrgMecSpeedUnit+0xae>
 8007644:	2b00      	cmp	r3, #0
 8007646:	f8b0 411a 	ldrh.w	r4, [r0, #282]	; 0x11a
 800764a:	bfb8      	it	lt
 800764c:	425b      	neglt	r3, r3
 800764e:	42a3      	cmp	r3, r4
 8007650:	db30      	blt.n	80076b4 <STO_PLL_CalcAvrgMecSpeedUnit+0xf0>
 8007652:	2300      	movs	r3, #0
 8007654:	461c      	mov	r4, r3
 8007656:	461e      	mov	r6, r3
 8007658:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
 800765c:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
 8007660:	f880 30f9 	strb.w	r3, [r0, #249]	; 0xf9
 8007664:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 8007668:	b944      	cbnz	r4, 800767c <STO_PLL_CalcAvrgMecSpeedUnit+0xb8>
 800766a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800766e:	f7ff b8cd 	b.w	800680c <SPD_IsMecSpeedReliable>
 8007672:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
 8007676:	2301      	movs	r3, #1
 8007678:	2c00      	cmp	r4, #0
 800767a:	d0f6      	beq.n	800766a <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
 800767c:	42aa      	cmp	r2, r5
 800767e:	dc10      	bgt.n	80076a2 <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
 8007680:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8007684:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8007688:	3301      	adds	r3, #1
 800768a:	b2db      	uxtb	r3, r3
 800768c:	429a      	cmp	r2, r3
 800768e:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8007692:	d8ea      	bhi.n	800766a <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
 8007694:	2300      	movs	r3, #0
 8007696:	78c2      	ldrb	r2, [r0, #3]
 8007698:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800769c:	7002      	strb	r2, [r0, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0ec      	beq.n	8007680 <STO_PLL_CalcAvrgMecSpeedUnit+0xbc>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 80076ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80076b0:	f7ff b8ac 	b.w	800680c <SPD_IsMecSpeedReliable>
 80076b4:	f890 4119 	ldrb.w	r4, [r0, #281]	; 0x119
 80076b8:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 80076bc:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	; 0x72
 80076c0:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	; 0x70
 80076c4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80076c8:	fb93 f3fe 	sdiv	r3, r3, lr
 80076cc:	fb03 f404 	mul.w	r4, r3, r4
 80076d0:	2c00      	cmp	r4, #0
 80076d2:	bfb8      	it	lt
 80076d4:	343f      	addlt	r4, #63	; 0x3f
 80076d6:	11a4      	asrs	r4, r4, #6
 80076d8:	fb04 f403 	mul.w	r4, r4, r3
 80076dc:	fb07 f707 	mul.w	r7, r7, r7
 80076e0:	2c00      	cmp	r4, #0
 80076e2:	fb06 7606 	mla	r6, r6, r6, r7
 80076e6:	4623      	mov	r3, r4
 80076e8:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 80076ec:	bfb8      	it	lt
 80076ee:	f104 033f 	addlt.w	r3, r4, #63	; 0x3f
 80076f2:	119b      	asrs	r3, r3, #6
 80076f4:	fb07 4313 	mls	r3, r7, r3, r4
 80076f8:	429e      	cmp	r6, r3
 80076fa:	bfd4      	ite	le
 80076fc:	2300      	movle	r3, #0
 80076fe:	2301      	movgt	r3, #1
 8007700:	e7aa      	b.n	8007658 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 8007702:	463d      	mov	r5, r7
 8007704:	463e      	mov	r6, r7
 8007706:	e77d      	b.n	8007604 <STO_PLL_CalcAvrgMecSpeedUnit+0x40>

08007708 <STO_PLL_CalcAvrgElSpeedDpp>:
 8007708:	b470      	push	{r4, r5, r6}
 800770a:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
 800770e:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8007712:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
 8007716:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 800771a:	b2ae      	uxth	r6, r5
 800771c:	1af3      	subs	r3, r6, r3
 800771e:	b29b      	uxth	r3, r3
 8007720:	b1c3      	cbz	r3, 8007754 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8007722:	4413      	add	r3, r2
 8007724:	b29b      	uxth	r3, r3
 8007726:	b219      	sxth	r1, r3
 8007728:	428d      	cmp	r5, r1
 800772a:	bfdc      	itt	le
 800772c:	1b9b      	suble	r3, r3, r6
 800772e:	b219      	sxthle	r1, r3
 8007730:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007734:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007738:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 800773c:	f9b1 2074 	ldrsh.w	r2, [r1, #116]	; 0x74
 8007740:	4423      	add	r3, r4
 8007742:	1a9b      	subs	r3, r3, r2
 8007744:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 8007748:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800774c:	4113      	asrs	r3, r2
 800774e:	81c3      	strh	r3, [r0, #14]
 8007750:	bc70      	pop	{r4, r5, r6}
 8007752:	4770      	bx	lr
 8007754:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007758:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 800775c:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8007760:	4423      	add	r3, r4
 8007762:	1a5b      	subs	r3, r3, r1
 8007764:	e7ee      	b.n	8007744 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
 8007766:	bf00      	nop

08007768 <STO_PLL_Clear>:
 8007768:	b510      	push	{r4, lr}
 800776a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 800776e:	2100      	movs	r1, #0
 8007770:	4604      	mov	r4, r0
 8007772:	6601      	str	r1, [r0, #96]	; 0x60
 8007774:	6641      	str	r1, [r0, #100]	; 0x64
 8007776:	6681      	str	r1, [r0, #104]	; 0x68
 8007778:	66c1      	str	r1, [r0, #108]	; 0x6c
 800777a:	8081      	strh	r1, [r0, #4]
 800777c:	81c1      	strh	r1, [r0, #14]
 800777e:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
 8007782:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
 8007786:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 800778a:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 800778e:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 8007792:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8007796:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 800779a:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 800779e:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 80077a2:	b132      	cbz	r2, 80077b2 <STO_PLL_Clear+0x4a>
 80077a4:	3a01      	subs	r2, #1
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	3201      	adds	r2, #1
 80077aa:	0052      	lsls	r2, r2, #1
 80077ac:	3074      	adds	r0, #116	; 0x74
 80077ae:	f000 f927 	bl	8007a00 <memset>
 80077b2:	2100      	movs	r1, #0
 80077b4:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 80077b8:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 80077bc:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	f7fd beb6 	b.w	8005534 <PID_SetIntegralTerm>

080077c8 <STO_PLL_Init>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4604      	mov	r4, r0
 80077cc:	2101      	movs	r1, #1
 80077ce:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 80077d2:	f9b4 502e 	ldrsh.w	r5, [r4, #46]	; 0x2e
 80077d6:	4b16      	ldr	r3, [pc, #88]	; (8007830 <STO_PLL_Init+0x68>)
 80077d8:	fb93 f3f5 	sdiv	r3, r3, r5
 80077dc:	2200      	movs	r2, #0
 80077de:	b21b      	sxth	r3, r3
 80077e0:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 80077e4:	8662      	strh	r2, [r4, #50]	; 0x32
 80077e6:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 80077ea:	4608      	mov	r0, r1
 80077ec:	b90b      	cbnz	r3, 80077f2 <STO_PLL_Init+0x2a>
 80077ee:	e00b      	b.n	8007808 <STO_PLL_Init+0x40>
 80077f0:	4611      	mov	r1, r2
 80077f2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80077f6:	1c4a      	adds	r2, r1, #1
 80077f8:	105b      	asrs	r3, r3, #1
 80077fa:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80077fe:	b292      	uxth	r2, r2
 8007800:	d1f6      	bne.n	80077f0 <STO_PLL_Init+0x28>
 8007802:	b200      	sxth	r0, r0
 8007804:	8661      	strh	r1, [r4, #50]	; 0x32
 8007806:	4601      	mov	r1, r0
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <STO_PLL_Init+0x6c>)
 800780a:	8620      	strh	r0, [r4, #48]	; 0x30
 800780c:	fb01 f105 	mul.w	r1, r1, r5
 8007810:	fb83 2301 	smull	r2, r3, r3, r1
 8007814:	17c9      	asrs	r1, r1, #31
 8007816:	ebc1 2123 	rsb	r1, r1, r3, asr #8
 800781a:	8561      	strh	r1, [r4, #42]	; 0x2a
 800781c:	4620      	mov	r0, r4
 800781e:	f7ff ffa3 	bl	8007768 <STO_PLL_Clear>
 8007822:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007826:	f7fd fe71 	bl	800550c <PID_HandleInit>
 800782a:	2300      	movs	r3, #0
 800782c:	8263      	strh	r3, [r4, #18]
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	000fea5e 	.word	0x000fea5e
 8007834:	06488dc5 	.word	0x06488dc5

08007838 <STO_PLL_IsObserverConverged>:
 8007838:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 800783c:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
 8007840:	4603      	mov	r3, r0
 8007842:	b10a      	cbz	r2, 8007848 <STO_PLL_IsObserverConverged+0x10>
 8007844:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8007848:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800784c:	2800      	cmp	r0, #0
 800784e:	d143      	bne.n	80078d8 <STO_PLL_IsObserverConverged+0xa0>
 8007850:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8007854:	b430      	push	{r4, r5}
 8007856:	fb02 f501 	mul.w	r5, r2, r1
 800785a:	2d00      	cmp	r5, #0
 800785c:	460c      	mov	r4, r1
 800785e:	dd34      	ble.n	80078ca <STO_PLL_IsObserverConverged+0x92>
 8007860:	2a00      	cmp	r2, #0
 8007862:	bfbc      	itt	lt
 8007864:	4252      	neglt	r2, r2
 8007866:	b212      	sxthlt	r2, r2
 8007868:	2900      	cmp	r1, #0
 800786a:	bfbc      	itt	lt
 800786c:	4249      	neglt	r1, r1
 800786e:	b20c      	sxthlt	r4, r1
 8007870:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 8007874:	b359      	cbz	r1, 80078ce <STO_PLL_IsObserverConverged+0x96>
 8007876:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800787a:	b291      	uxth	r1, r2
 800787c:	428d      	cmp	r5, r1
 800787e:	d226      	bcs.n	80078ce <STO_PLL_IsObserverConverged+0x96>
 8007880:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 8007884:	fb04 f101 	mul.w	r1, r4, r1
 8007888:	2900      	cmp	r1, #0
 800788a:	bfb8      	it	lt
 800788c:	310f      	addlt	r1, #15
 800788e:	f341 110f 	sbfx	r1, r1, #4, #16
 8007892:	428a      	cmp	r2, r1
 8007894:	db1b      	blt.n	80078ce <STO_PLL_IsObserverConverged+0x96>
 8007896:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 800789a:	fb04 f101 	mul.w	r1, r4, r1
 800789e:	2900      	cmp	r1, #0
 80078a0:	bfb8      	it	lt
 80078a2:	310f      	addlt	r1, #15
 80078a4:	f341 110f 	sbfx	r1, r1, #4, #16
 80078a8:	428a      	cmp	r2, r1
 80078aa:	dc10      	bgt.n	80078ce <STO_PLL_IsObserverConverged+0x96>
 80078ac:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 80078b0:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 80078b4:	3201      	adds	r2, #1
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	4291      	cmp	r1, r2
 80078ba:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80078be:	d804      	bhi.n	80078ca <STO_PLL_IsObserverConverged+0x92>
 80078c0:	2001      	movs	r0, #1
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	bc30      	pop	{r4, r5}
 80078cc:	4770      	bx	lr
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80078d4:	bc30      	pop	{r4, r5}
 80078d6:	4770      	bx	lr
 80078d8:	2001      	movs	r0, #1
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	4770      	bx	lr

080078e4 <STO_PLL_GetEstimatedBemf>:
 80078e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80078e6:	2000      	movs	r0, #0
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f362 000f 	bfi	r0, r2, #0, #16
 80078ee:	0c1b      	lsrs	r3, r3, #16
 80078f0:	f363 401f 	bfi	r0, r3, #16, #16
 80078f4:	b082      	sub	sp, #8
 80078f6:	b002      	add	sp, #8
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop

080078fc <STO_PLL_GetEstimatedCurrent>:
 80078fc:	b410      	push	{r4}
 80078fe:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007900:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 8007904:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007906:	4122      	asrs	r2, r4
 8007908:	b292      	uxth	r2, r2
 800790a:	4123      	asrs	r3, r4
 800790c:	2100      	movs	r1, #0
 800790e:	b29b      	uxth	r3, r3
 8007910:	f362 010f 	bfi	r1, r2, #0, #16
 8007914:	f363 411f 	bfi	r1, r3, #16, #16
 8007918:	4608      	mov	r0, r1
 800791a:	b083      	sub	sp, #12
 800791c:	b003      	add	sp, #12
 800791e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007922:	4770      	bx	lr

08007924 <STO_PLL_GetObserverGains>:
 8007924:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8007928:	800b      	strh	r3, [r1, #0]
 800792a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800792e:	8013      	strh	r3, [r2, #0]
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop

08007934 <STO_PLL_SetObserverGains>:
 8007934:	8441      	strh	r1, [r0, #34]	; 0x22
 8007936:	84c2      	strh	r2, [r0, #38]	; 0x26
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop

0800793c <STO_GetPLLGains>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8007942:	4620      	mov	r0, r4
 8007944:	460e      	mov	r6, r1
 8007946:	4615      	mov	r5, r2
 8007948:	f7fd fdec 	bl	8005524 <PID_GetKP>
 800794c:	8030      	strh	r0, [r6, #0]
 800794e:	4620      	mov	r0, r4
 8007950:	f7fd fdec 	bl	800552c <PID_GetKI>
 8007954:	8028      	strh	r0, [r5, #0]
 8007956:	bd70      	pop	{r4, r5, r6, pc}

08007958 <STO_SetPLLGains>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800795e:	4615      	mov	r5, r2
 8007960:	4620      	mov	r0, r4
 8007962:	f7fd fddb 	bl	800551c <PID_SetKP>
 8007966:	4629      	mov	r1, r5
 8007968:	4620      	mov	r0, r4
 800796a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800796e:	f7fd bdd7 	b.w	8005520 <PID_SetKI>
 8007972:	bf00      	nop

08007974 <STO_OTF_ResetPLL>:
 8007974:	6800      	ldr	r0, [r0, #0]
 8007976:	2100      	movs	r1, #0
 8007978:	3034      	adds	r0, #52	; 0x34
 800797a:	f7fd bddb 	b.w	8005534 <PID_SetIntegralTerm>
 800797e:	bf00      	nop

08007980 <STO_ResetPLL>:
 8007980:	3034      	adds	r0, #52	; 0x34
 8007982:	2100      	movs	r1, #0
 8007984:	f7fd bdd6 	b.w	8005534 <PID_SetIntegralTerm>

08007988 <STO_PLL_GetEstimatedBemfLevel>:
 8007988:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop

08007990 <STO_PLL_GetObservedBemfLevel>:
 8007990:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop

08007998 <STO_PLL_IsVarianceTight>:
 8007998:	6803      	ldr	r3, [r0, #0]
 800799a:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800799e:	4770      	bx	lr

080079a0 <STO_PLL_ForceConvergency1>:
 80079a0:	6803      	ldr	r3, [r0, #0]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop

080079ac <STO_PLL_ForceConvergency2>:
 80079ac:	6803      	ldr	r3, [r0, #0]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop

080079b8 <__libc_init_array>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	4e0d      	ldr	r6, [pc, #52]	; (80079f0 <__libc_init_array+0x38>)
 80079bc:	4c0d      	ldr	r4, [pc, #52]	; (80079f4 <__libc_init_array+0x3c>)
 80079be:	1ba4      	subs	r4, r4, r6
 80079c0:	10a4      	asrs	r4, r4, #2
 80079c2:	2500      	movs	r5, #0
 80079c4:	42a5      	cmp	r5, r4
 80079c6:	d109      	bne.n	80079dc <__libc_init_array+0x24>
 80079c8:	4e0b      	ldr	r6, [pc, #44]	; (80079f8 <__libc_init_array+0x40>)
 80079ca:	4c0c      	ldr	r4, [pc, #48]	; (80079fc <__libc_init_array+0x44>)
 80079cc:	f000 f820 	bl	8007a10 <_init>
 80079d0:	1ba4      	subs	r4, r4, r6
 80079d2:	10a4      	asrs	r4, r4, #2
 80079d4:	2500      	movs	r5, #0
 80079d6:	42a5      	cmp	r5, r4
 80079d8:	d105      	bne.n	80079e6 <__libc_init_array+0x2e>
 80079da:	bd70      	pop	{r4, r5, r6, pc}
 80079dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079e0:	4798      	blx	r3
 80079e2:	3501      	adds	r5, #1
 80079e4:	e7ee      	b.n	80079c4 <__libc_init_array+0xc>
 80079e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079ea:	4798      	blx	r3
 80079ec:	3501      	adds	r5, #1
 80079ee:	e7f2      	b.n	80079d6 <__libc_init_array+0x1e>
 80079f0:	08007d10 	.word	0x08007d10
 80079f4:	08007d10 	.word	0x08007d10
 80079f8:	08007d10 	.word	0x08007d10
 80079fc:	08007d14 	.word	0x08007d14

08007a00 <memset>:
 8007a00:	4402      	add	r2, r0
 8007a02:	4603      	mov	r3, r0
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d100      	bne.n	8007a0a <memset+0xa>
 8007a08:	4770      	bx	lr
 8007a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0e:	e7f9      	b.n	8007a04 <memset+0x4>

08007a10 <_init>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	bf00      	nop
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr

08007a1c <_fini>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr
