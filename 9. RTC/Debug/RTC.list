
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000381c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a38  08003a38  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a38  08003a38  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a38  08003a38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08003ab0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003ab0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa71  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f35  00000000  00000000  0002fb11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000838  00000000  00000000  00031a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  00032280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d1a  00000000  00000000  000329e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fc1  00000000  00000000  0004b6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086506  00000000  00000000  000546bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dabc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000238c  00000000  00000000  000dac3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003994 	.word	0x08003994

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003994 	.word	0x08003994

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_Init+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_Init+0x28>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 f949 	bl	8000518 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f808 	bl	800029c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800028c:	f002 fde2 	bl	8002e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_InitTick+0x54>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <HAL_InitTick+0x58>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f961 	bl	8000582 <HAL_SYSTICK_Config>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00e      	b.n	80002e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d80a      	bhi.n	80002e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d0:	2200      	movs	r2, #0
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f000 f929 	bl	800052e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_InitTick+0x5c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000008 	.word	0x20000008
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	20000098 	.word	0x20000098

08000324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return uwTick;  
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <HAL_GetTick+0x14>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000098 	.word	0x20000098

0800033c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000344:	f7ff ffee 	bl	8000324 <HAL_GetTick>
 8000348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000354:	d005      	beq.n	8000362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Delay+0x40>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4413      	add	r3, r2
 8000360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000362:	bf00      	nop
 8000364:	f7ff ffde 	bl	8000324 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	d8f7      	bhi.n	8000364 <HAL_Delay+0x28>
  {
  }
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000004 	.word	0x20000004

08000380 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f003 0307 	and.w	r3, r3, #7
 800038e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800039c:	4013      	ands	r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	60d3      	str	r3, [r2, #12]
}
 80003b8:	bf00      	nop
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <NVIC_GetPriorityGrouping+0x18>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	f003 0307 	and.w	r3, r3, #7
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f003 021f 	and.w	r2, r3, #31
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <NVIC_EnableIRQ+0x30>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	095b      	lsrs	r3, r3, #5
 80003fc:	2001      	movs	r0, #1
 80003fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000e100 	.word	0xe000e100

08000418 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	da0b      	bge.n	8000444 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	b2da      	uxtb	r2, r3
 8000430:	490c      	ldr	r1, [pc, #48]	; (8000464 <NVIC_SetPriority+0x4c>)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	f003 030f 	and.w	r3, r3, #15
 8000438:	3b04      	subs	r3, #4
 800043a:	0112      	lsls	r2, r2, #4
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	440b      	add	r3, r1
 8000440:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000442:	e009      	b.n	8000458 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4907      	ldr	r1, [pc, #28]	; (8000468 <NVIC_SetPriority+0x50>)
 800044a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044e:	0112      	lsls	r2, r2, #4
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	440b      	add	r3, r1
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00
 8000468:	e000e100 	.word	0xe000e100

0800046c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800046c:	b480      	push	{r7}
 800046e:	b089      	sub	sp, #36	; 0x24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f003 0307 	and.w	r3, r3, #7
 800047e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	f1c3 0307 	rsb	r3, r3, #7
 8000486:	2b04      	cmp	r3, #4
 8000488:	bf28      	it	cs
 800048a:	2304      	movcs	r3, #4
 800048c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	3304      	adds	r3, #4
 8000492:	2b06      	cmp	r3, #6
 8000494:	d902      	bls.n	800049c <NVIC_EncodePriority+0x30>
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	3b03      	subs	r3, #3
 800049a:	e000      	b.n	800049e <NVIC_EncodePriority+0x32>
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	f04f 32ff 	mov.w	r2, #4294967295
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	fa02 f303 	lsl.w	r3, r2, r3
 80004aa:	43da      	mvns	r2, r3
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	401a      	ands	r2, r3
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004b4:	f04f 31ff 	mov.w	r1, #4294967295
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	43d9      	mvns	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004c4:	4313      	orrs	r3, r2
         );
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3724      	adds	r7, #36	; 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3b01      	subs	r3, #1
 80004e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004e4:	d301      	bcc.n	80004ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004e6:	2301      	movs	r3, #1
 80004e8:	e00f      	b.n	800050a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <SysTick_Config+0x40>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004f2:	210f      	movs	r1, #15
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f7ff ff8e 	bl	8000418 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <SysTick_Config+0x40>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <SysTick_Config+0x40>)
 8000504:	2207      	movs	r2, #7
 8000506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	e000e010 	.word	0xe000e010

08000518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff ff2d 	bl	8000380 <NVIC_SetPriorityGrouping>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	4603      	mov	r3, r0
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
 800053a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000540:	f7ff ff42 	bl	80003c8 <NVIC_GetPriorityGrouping>
 8000544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	68b9      	ldr	r1, [r7, #8]
 800054a:	6978      	ldr	r0, [r7, #20]
 800054c:	f7ff ff8e 	bl	800046c <NVIC_EncodePriority>
 8000550:	4602      	mov	r2, r0
 8000552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff5d 	bl	8000418 <NVIC_SetPriority>
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff35 	bl	80003e4 <NVIC_EnableIRQ>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff ffa2 	bl	80004d4 <SysTick_Config>
 8000590:	4603      	mov	r3, r0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005b2:	e14e      	b.n	8000852 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	2101      	movs	r1, #1
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f000 8140 	beq.w	800084c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d003      	beq.n	80005dc <HAL_GPIO_Init+0x40>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b12      	cmp	r3, #18
 80005da:	d123      	bne.n	8000624 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	08da      	lsrs	r2, r3, #3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3208      	adds	r2, #8
 80005e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f003 0307 	and.w	r3, r3, #7
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	220f      	movs	r2, #15
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	691a      	ldr	r2, [r3, #16]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4313      	orrs	r3, r2
 8000614:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	08da      	lsrs	r2, r3, #3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3208      	adds	r2, #8
 800061e:	6939      	ldr	r1, [r7, #16]
 8000620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	2203      	movs	r2, #3
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	43db      	mvns	r3, r3
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	4013      	ands	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f003 0203 	and.w	r2, r3, #3
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	4313      	orrs	r3, r2
 8000650:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00b      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d007      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800066c:	2b11      	cmp	r3, #17
 800066e:	d003      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	2b12      	cmp	r3, #18
 8000676:	d130      	bne.n	80006da <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	2203      	movs	r2, #3
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	68da      	ldr	r2, [r3, #12]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4313      	orrs	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ae:	2201      	movs	r2, #1
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43db      	mvns	r3, r3
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	4013      	ands	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	091b      	lsrs	r3, r3, #4
 80006c4:	f003 0201 	and.w	r2, r3, #1
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	2203      	movs	r2, #3
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	4013      	ands	r3, r2
 80006f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	4313      	orrs	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	2b00      	cmp	r3, #0
 8000714:	f000 809a 	beq.w	800084c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a54      	ldr	r2, [pc, #336]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b52      	ldr	r3, [pc, #328]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000730:	4a50      	ldr	r2, [pc, #320]	; (8000874 <HAL_GPIO_Init+0x2d8>)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	3302      	adds	r3, #2
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	220f      	movs	r2, #15
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	4013      	ands	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800075a:	d013      	beq.n	8000784 <HAL_GPIO_Init+0x1e8>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a46      	ldr	r2, [pc, #280]	; (8000878 <HAL_GPIO_Init+0x2dc>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d00d      	beq.n	8000780 <HAL_GPIO_Init+0x1e4>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a45      	ldr	r2, [pc, #276]	; (800087c <HAL_GPIO_Init+0x2e0>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d007      	beq.n	800077c <HAL_GPIO_Init+0x1e0>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a44      	ldr	r2, [pc, #272]	; (8000880 <HAL_GPIO_Init+0x2e4>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d101      	bne.n	8000778 <HAL_GPIO_Init+0x1dc>
 8000774:	2303      	movs	r3, #3
 8000776:	e006      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000778:	2305      	movs	r3, #5
 800077a:	e004      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 800077c:	2302      	movs	r3, #2
 800077e:	e002      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000784:	2300      	movs	r3, #0
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	f002 0203 	and.w	r2, r2, #3
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	4093      	lsls	r3, r2
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	4313      	orrs	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000796:	4937      	ldr	r1, [pc, #220]	; (8000874 <HAL_GPIO_Init+0x2d8>)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	3302      	adds	r3, #2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	43db      	mvns	r3, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d003      	beq.n	80007c8 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80007c8:	4a2e      	ldr	r2, [pc, #184]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	43db      	mvns	r3, r3
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	4013      	ands	r3, r2
 80007dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d003      	beq.n	80007f2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	43db      	mvns	r3, r3
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d003      	beq.n	800081c <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4313      	orrs	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	fa22 f303 	lsr.w	r3, r2, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	f47f aea9 	bne.w	80005b4 <HAL_GPIO_Init+0x18>
  }
}
 8000862:	bf00      	nop
 8000864:	371c      	adds	r7, #28
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	40010000 	.word	0x40010000
 8000878:	48000400 	.word	0x48000400
 800087c:	48000800 	.word	0x48000800
 8000880:	48000c00 	.word	0x48000c00
 8000884:	40010400 	.word	0x40010400

08000888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	807b      	strh	r3, [r7, #2]
 8000894:	4613      	mov	r3, r2
 8000896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000898:	787b      	ldrb	r3, [r7, #1]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008a4:	e002      	b.n	80008ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008a6:	887a      	ldrh	r2, [r7, #2]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80008be:	af00      	add	r7, sp, #0
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f000 beda 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 816e 	beq.w	8000bbe <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008e2:	4bb5      	ldr	r3, [pc, #724]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 030c 	and.w	r3, r3, #12
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d00c      	beq.n	8000908 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008ee:	4bb2      	ldr	r3, [pc, #712]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d15a      	bne.n	80009b0 <HAL_RCC_OscConfig+0xf8>
 80008fa:	4baf      	ldr	r3, [pc, #700]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000906:	d153      	bne.n	80009b0 <HAL_RCC_OscConfig+0xf8>
 8000908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800090c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000910:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000914:	fa93 f3a3 	rbit	r3, r3
 8000918:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800091c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b01      	cmp	r3, #1
 8000932:	d102      	bne.n	800093a <HAL_RCC_OscConfig+0x82>
 8000934:	4ba0      	ldr	r3, [pc, #640]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	e015      	b.n	8000966 <HAL_RCC_OscConfig+0xae>
 800093a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800093e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000942:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000946:	fa93 f3a3 	rbit	r3, r3
 800094a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800094e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000952:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000956:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800095a:	fa93 f3a3 	rbit	r3, r3
 800095e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000962:	4b95      	ldr	r3, [pc, #596]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800096a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800096e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000972:	fa92 f2a2 	rbit	r2, r2
 8000976:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800097a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800097e:	fab2 f282 	clz	r2, r2
 8000982:	b252      	sxtb	r2, r2
 8000984:	f042 0220 	orr.w	r2, r2, #32
 8000988:	b252      	sxtb	r2, r2
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	f002 021f 	and.w	r2, r2, #31
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	4013      	ands	r3, r2
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 810f 	beq.w	8000bbc <HAL_RCC_OscConfig+0x304>
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f040 8109 	bne.w	8000bbc <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f000 be6b 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ba:	d106      	bne.n	80009ca <HAL_RCC_OscConfig+0x112>
 80009bc:	4b7e      	ldr	r3, [pc, #504]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a7d      	ldr	r2, [pc, #500]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	e030      	b.n	8000a2c <HAL_RCC_OscConfig+0x174>
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d10c      	bne.n	80009ee <HAL_RCC_OscConfig+0x136>
 80009d4:	4b78      	ldr	r3, [pc, #480]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a77      	ldr	r2, [pc, #476]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b75      	ldr	r3, [pc, #468]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a74      	ldr	r2, [pc, #464]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	e01e      	b.n	8000a2c <HAL_RCC_OscConfig+0x174>
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009f8:	d10c      	bne.n	8000a14 <HAL_RCC_OscConfig+0x15c>
 80009fa:	4b6f      	ldr	r3, [pc, #444]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a6e      	ldr	r2, [pc, #440]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	4b6c      	ldr	r3, [pc, #432]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a6b      	ldr	r2, [pc, #428]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e00b      	b.n	8000a2c <HAL_RCC_OscConfig+0x174>
 8000a14:	4b68      	ldr	r3, [pc, #416]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a67      	ldr	r2, [pc, #412]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b65      	ldr	r3, [pc, #404]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a64      	ldr	r2, [pc, #400]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a2c:	4b62      	ldr	r3, [pc, #392]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	f023 020f 	bic.w	r2, r3, #15
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	495f      	ldr	r1, [pc, #380]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d05a      	beq.n	8000b00 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a4a:	f7ff fc6b 	bl	8000324 <HAL_GetTick>
 8000a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a52:	e00a      	b.n	8000a6a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a54:	f7ff fc66 	bl	8000324 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	2b64      	cmp	r3, #100	; 0x64
 8000a62:	d902      	bls.n	8000a6a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a64:	2303      	movs	r3, #3
 8000a66:	f000 be0e 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a6e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a72:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a76:	fa93 f3a3 	rbit	r3, r3
 8000a7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a82:	fab3 f383 	clz	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	095b      	lsrs	r3, r3, #5
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d102      	bne.n	8000a9c <HAL_RCC_OscConfig+0x1e4>
 8000a96:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	e015      	b.n	8000ac8 <HAL_RCC_OscConfig+0x210>
 8000a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aa0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000aa8:	fa93 f3a3 	rbit	r3, r3
 8000aac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ab8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000abc:	fa93 f3a3 	rbit	r3, r3
 8000ac0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000acc:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ad0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ad4:	fa92 f2a2 	rbit	r2, r2
 8000ad8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000adc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b252      	sxtb	r2, r2
 8000ae6:	f042 0220 	orr.w	r2, r2, #32
 8000aea:	b252      	sxtb	r2, r2
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	f002 021f 	and.w	r2, r2, #31
 8000af2:	2101      	movs	r1, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0aa      	beq.n	8000a54 <HAL_RCC_OscConfig+0x19c>
 8000afe:	e05e      	b.n	8000bbe <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b00:	f7ff fc10 	bl	8000324 <HAL_GetTick>
 8000b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b08:	e00a      	b.n	8000b20 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0a:	f7ff fc0b 	bl	8000324 <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b64      	cmp	r3, #100	; 0x64
 8000b18:	d902      	bls.n	8000b20 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	f000 bdb3 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b24:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b2c:	fa93 f3a3 	rbit	r3, r3
 8000b30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000b34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b38:	fab3 f383 	clz	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d102      	bne.n	8000b52 <HAL_RCC_OscConfig+0x29a>
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	e015      	b.n	8000b7e <HAL_RCC_OscConfig+0x2c6>
 8000b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b56:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b5e:	fa93 f3a3 	rbit	r3, r3
 8000b62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b72:	fa93 f3a3 	rbit	r3, r3
 8000b76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b82:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b8a:	fa92 f2a2 	rbit	r2, r2
 8000b8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	b252      	sxtb	r2, r2
 8000b9c:	f042 0220 	orr.w	r2, r2, #32
 8000ba0:	b252      	sxtb	r2, r2
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	f002 021f 	and.w	r2, r2, #31
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1aa      	bne.n	8000b0a <HAL_RCC_OscConfig+0x252>
 8000bb4:	e003      	b.n	8000bbe <HAL_RCC_OscConfig+0x306>
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8170 	beq.w	8000eae <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bce:	4bd0      	ldr	r3, [pc, #832]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 030c 	and.w	r3, r3, #12
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00b      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bda:	4bcd      	ldr	r3, [pc, #820]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d16d      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x40a>
 8000be6:	4bca      	ldr	r3, [pc, #808]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d167      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x40a>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000bfc:	fa93 f3a3 	rbit	r3, r3
 8000c00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000c04:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c08:	fab3 f383 	clz	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d102      	bne.n	8000c22 <HAL_RCC_OscConfig+0x36a>
 8000c1c:	4bbc      	ldr	r3, [pc, #752]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	e013      	b.n	8000c4a <HAL_RCC_OscConfig+0x392>
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c2c:	fa93 f3a3 	rbit	r3, r3
 8000c30:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000c3a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000c3e:	fa93 f3a3 	rbit	r3, r3
 8000c42:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c46:	4bb2      	ldr	r3, [pc, #712]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c50:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c54:	fa92 f2a2 	rbit	r2, r2
 8000c58:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c5c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b252      	sxtb	r2, r2
 8000c66:	f042 0220 	orr.w	r2, r2, #32
 8000c6a:	b252      	sxtb	r2, r2
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	f002 021f 	and.w	r2, r2, #31
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <HAL_RCC_OscConfig+0x3d6>
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d002      	beq.n	8000c8e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f000 bcfc 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8e:	4ba0      	ldr	r3, [pc, #640]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6959      	ldr	r1, [r3, #20]
 8000c9c:	23f8      	movs	r3, #248	; 0xf8
 8000c9e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000ca6:	fa93 f3a3 	rbit	r3, r3
 8000caa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000cae:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000cb2:	fab3 f383 	clz	r3, r3
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	4995      	ldr	r1, [pc, #596]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc0:	e0f5      	b.n	8000eae <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 8085 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x520>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cd8:	fa93 f3a3 	rbit	r3, r3
 8000cdc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000ce0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fb14 	bl	8000324 <HAL_GetTick>
 8000cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	e00a      	b.n	8000d18 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d02:	f7ff fb0f 	bl	8000324 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d902      	bls.n	8000d18 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	f000 bcb7 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000d2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2e:	fab3 f383 	clz	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	095b      	lsrs	r3, r3, #5
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <HAL_RCC_OscConfig+0x490>
 8000d42:	4b73      	ldr	r3, [pc, #460]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	e013      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b8>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d6c:	4b68      	ldr	r3, [pc, #416]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	2202      	movs	r2, #2
 8000d72:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d76:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d7a:	fa92 f2a2 	rbit	r2, r2
 8000d7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b252      	sxtb	r2, r2
 8000d8c:	f042 0220 	orr.w	r2, r2, #32
 8000d90:	b252      	sxtb	r2, r2
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	f002 021f 	and.w	r2, r2, #31
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0ae      	beq.n	8000d02 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da4:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6959      	ldr	r1, [r3, #20]
 8000db2:	23f8      	movs	r3, #248	; 0xf8
 8000db4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000dbc:	fa93 f3a3 	rbit	r3, r3
 8000dc0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000dc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	494f      	ldr	r1, [pc, #316]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	600b      	str	r3, [r1, #0]
 8000dd6:	e06a      	b.n	8000eae <HAL_RCC_OscConfig+0x5f6>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000dea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dee:	fab3 f383 	clz	r3, r3
 8000df2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000df6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2300      	movs	r3, #0
 8000e00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fa8f 	bl	8000324 <HAL_GetTick>
 8000e06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0a:	e00a      	b.n	8000e22 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fa8a 	bl	8000324 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d902      	bls.n	8000e22 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f000 bc32 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000e22:	2302      	movs	r3, #2
 8000e24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000e34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d102      	bne.n	8000e52 <HAL_RCC_OscConfig+0x59a>
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	e013      	b.n	8000e7a <HAL_RCC_OscConfig+0x5c2>
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e5c:	fa93 f3a3 	rbit	r3, r3
 8000e60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e80:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e84:	fa92 f2a2 	rbit	r2, r2
 8000e88:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e8c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	b252      	sxtb	r2, r2
 8000e96:	f042 0220 	orr.w	r2, r2, #32
 8000e9a:	b252      	sxtb	r2, r2
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f002 021f 	and.w	r2, r2, #31
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1ae      	bne.n	8000e0c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80d8 	beq.w	800106e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d067      	beq.n	8000f98 <HAL_RCC_OscConfig+0x6e0>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000eda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_RCC_OscConfig+0x65c>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	461a      	mov	r2, r3
 8000eec:	2301      	movs	r3, #1
 8000eee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fa18 	bl	8000324 <HAL_GetTick>
 8000ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef8:	e00e      	b.n	8000f18 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000efa:	f7ff fa13 	bl	8000324 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d906      	bls.n	8000f18 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e3bb      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	10908120 	.word	0x10908120
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f34:	fa93 f2a3 	rbit	r2, r3
 8000f38:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f42:	2202      	movs	r2, #2
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	fa93 f2a3 	rbit	r2, r3
 8000f50:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f56:	4ba5      	ldr	r3, [pc, #660]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8000f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f5a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f5e:	2102      	movs	r1, #2
 8000f60:	6019      	str	r1, [r3, #0]
 8000f62:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	fa93 f1a3 	rbit	r1, r3
 8000f6c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f70:	6019      	str	r1, [r3, #0]
  return(result);
 8000f72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0b1      	beq.n	8000efa <HAL_RCC_OscConfig+0x642>
 8000f96:	e06a      	b.n	800106e <HAL_RCC_OscConfig+0x7b6>
 8000f98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	fa93 f2a3 	rbit	r2, r3
 8000faa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fae:	601a      	str	r2, [r3, #0]
  return(result);
 8000fb0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <HAL_RCC_OscConfig+0x938>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc8:	f7ff f9ac 	bl	8000324 <HAL_GetTick>
 8000fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd0:	e009      	b.n	8000fe6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff f9a7 	bl	8000324 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e34f      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 8000fe6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fea:	2202      	movs	r2, #2
 8000fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	fa93 f2a3 	rbit	r2, r3
 8000ff8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001002:	2202      	movs	r2, #2
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	fa93 f2a3 	rbit	r2, r3
 8001010:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800101a:	2202      	movs	r2, #2
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	fa93 f2a3 	rbit	r2, r3
 8001028:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800102c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102e:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001032:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001036:	2102      	movs	r1, #2
 8001038:	6019      	str	r1, [r3, #0]
 800103a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	fa93 f1a3 	rbit	r1, r3
 8001044:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001048:	6019      	str	r1, [r3, #0]
  return(result);
 800104a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	b25b      	sxtb	r3, r3
 8001056:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800105a:	b25b      	sxtb	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1b1      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 8159 	beq.w	8001330 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001084:	4b59      	ldr	r3, [pc, #356]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	4b56      	ldr	r3, [pc, #344]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	4a55      	ldr	r2, [pc, #340]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	61d3      	str	r3, [r2, #28]
 800109c:	4b53      	ldr	r3, [pc, #332]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b6:	4b4f      	ldr	r3, [pc, #316]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11a      	bne.n	80010f8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010c2:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ce:	f7ff f929 	bl	8000324 <HAL_GetTick>
 80010d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d6:	e009      	b.n	80010ec <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d8:	f7ff f924 	bl	8000324 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b64      	cmp	r3, #100	; 0x64
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e2cc      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ef      	beq.n	80010d8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x858>
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a39      	ldr	r2, [pc, #228]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	e02f      	b.n	8001170 <HAL_RCC_OscConfig+0x8b8>
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x87c>
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a33      	ldr	r2, [pc, #204]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	6213      	str	r3, [r2, #32]
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800112c:	f023 0304 	bic.w	r3, r3, #4
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0x8b8>
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b05      	cmp	r3, #5
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x8a0>
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6213      	str	r3, [r2, #32]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0x8b8>
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a23      	ldr	r2, [pc, #140]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a20      	ldr	r2, [pc, #128]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800116a:	f023 0304 	bic.w	r3, r3, #4
 800116e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06b      	beq.n	8001252 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff f8d3 	bl	8000324 <HAL_GetTick>
 800117e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001184:	f7ff f8ce 	bl	8000324 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f241 3288 	movw	r2, #5000	; 0x1388
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e274      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 800119c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a0:	2202      	movs	r2, #2
 80011a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	fa93 f2a3 	rbit	r2, r3
 80011ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011b8:	2202      	movs	r2, #2
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	fa93 f2a3 	rbit	r2, r3
 80011c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011ca:	601a      	str	r2, [r3, #0]
  return(result);
 80011cc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	095b      	lsrs	r3, r3, #5
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d108      	bne.n	80011f8 <HAL_RCC_OscConfig+0x940>
 80011e6:	4b01      	ldr	r3, [pc, #4]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	e013      	b.n	8001214 <HAL_RCC_OscConfig+0x95c>
 80011ec:	40021000 	.word	0x40021000
 80011f0:	10908120 	.word	0x10908120
 80011f4:	40007000 	.word	0x40007000
 80011f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011fc:	2202      	movs	r2, #2
 80011fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	fa93 f2a3 	rbit	r2, r3
 800120a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	4bbb      	ldr	r3, [pc, #748]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001218:	2102      	movs	r1, #2
 800121a:	6011      	str	r1, [r2, #0]
 800121c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	fa92 f1a2 	rbit	r1, r2
 8001226:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800122a:	6011      	str	r1, [r2, #0]
  return(result);
 800122c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	fab2 f282 	clz	r2, r2
 8001236:	b252      	sxtb	r2, r2
 8001238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800123c:	b252      	sxtb	r2, r2
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f002 021f 	and.w	r2, r2, #31
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d099      	beq.n	8001184 <HAL_RCC_OscConfig+0x8cc>
 8001250:	e064      	b.n	800131c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff f867 	bl	8000324 <HAL_GetTick>
 8001256:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800125c:	f7ff f862 	bl	8000324 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e208      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 8001274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001278:	2202      	movs	r2, #2
 800127a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	fa93 f2a3 	rbit	r2, r3
 8001286:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	fa93 f2a3 	rbit	r2, r3
 800129e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012a2:	601a      	str	r2, [r3, #0]
  return(result);
 80012a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	095b      	lsrs	r3, r3, #5
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0xa0c>
 80012be:	4b90      	ldr	r3, [pc, #576]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	e00d      	b.n	80012e0 <HAL_RCC_OscConfig+0xa28>
 80012c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012c8:	2202      	movs	r2, #2
 80012ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	fa93 f2a3 	rbit	r2, r3
 80012d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	4b88      	ldr	r3, [pc, #544]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012e4:	2102      	movs	r1, #2
 80012e6:	6011      	str	r1, [r2, #0]
 80012e8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	fa92 f1a2 	rbit	r1, r2
 80012f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012f6:	6011      	str	r1, [r2, #0]
  return(result);
 80012f8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b252      	sxtb	r2, r2
 8001304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001308:	b252      	sxtb	r2, r2
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f002 021f 	and.w	r2, r2, #31
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d19f      	bne.n	800125c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800131c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001320:	2b01      	cmp	r3, #1
 8001322:	d105      	bne.n	8001330 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001324:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 800132a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 81a4 	beq.w	8001684 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800133c:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	f000 819b 	beq.w	8001680 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b02      	cmp	r3, #2
 8001352:	f040 8113 	bne.w	800157c <HAL_RCC_OscConfig+0xcc4>
 8001356:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800135a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800135e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	fa93 f2a3 	rbit	r2, r3
 800136a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800136e:	601a      	str	r2, [r3, #0]
  return(result);
 8001370:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001374:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	fab3 f383 	clz	r3, r3
 800137a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800137e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	2300      	movs	r3, #0
 8001388:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7fe ffcb 	bl	8000324 <HAL_GetTick>
 800138e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001392:	e009      	b.n	80013a8 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001394:	f7fe ffc6 	bl	8000324 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e16e      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 80013a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fa93 f2a3 	rbit	r2, r3
 80013bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013c0:	601a      	str	r2, [r3, #0]
  return(result);
 80013c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <HAL_RCC_OscConfig+0xb2a>
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	e01b      	b.n	800141a <HAL_RCC_OscConfig+0xb62>
 80013e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fa93 f2a3 	rbit	r2, r3
 80013f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800141e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001422:	6011      	str	r1, [r2, #0]
 8001424:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	fa92 f1a2 	rbit	r1, r2
 800142e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001432:	6011      	str	r1, [r2, #0]
  return(result);
 8001434:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	fab2 f282 	clz	r2, r2
 800143e:	b252      	sxtb	r2, r2
 8001440:	f042 0220 	orr.w	r2, r2, #32
 8001444:	b252      	sxtb	r2, r2
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f002 021f 	and.w	r2, r2, #31
 800144c:	2101      	movs	r1, #1
 800144e:	fa01 f202 	lsl.w	r2, r1, r2
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d19d      	bne.n	8001394 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	430b      	orrs	r3, r1
 800146e:	4924      	ldr	r1, [pc, #144]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
 8001474:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800147c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f2a3 	rbit	r2, r3
 8001488:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800148c:	601a      	str	r2, [r3, #0]
  return(result);
 800148e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001492:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800149c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	461a      	mov	r2, r3
 80014a4:	2301      	movs	r3, #1
 80014a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7fe ff3c 	bl	8000324 <HAL_GetTick>
 80014ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b2:	f7fe ff37 	bl	8000324 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0df      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 80014c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014de:	601a      	str	r2, [r3, #0]
  return(result);
 80014e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d104      	bne.n	8001504 <HAL_RCC_OscConfig+0xc4c>
 80014fa:	4b01      	ldr	r3, [pc, #4]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xc84>
 8001500:	40021000 	.word	0x40021000
 8001504:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800150c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fa93 f2a3 	rbit	r2, r3
 8001532:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_RCC_OscConfig+0xdd8>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001544:	6011      	str	r1, [r2, #0]
 8001546:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	fa92 f1a2 	rbit	r1, r2
 8001550:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001554:	6011      	str	r1, [r2, #0]
  return(result);
 8001556:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	fab2 f282 	clz	r2, r2
 8001560:	b252      	sxtb	r2, r2
 8001562:	f042 0220 	orr.w	r2, r2, #32
 8001566:	b252      	sxtb	r2, r2
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 021f 	and.w	r2, r2, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d09b      	beq.n	80014b2 <HAL_RCC_OscConfig+0xbfa>
 800157a:	e083      	b.n	8001684 <HAL_RCC_OscConfig+0xdcc>
 800157c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001594:	601a      	str	r2, [r3, #0]
  return(result);
 8001596:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800159a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	461a      	mov	r2, r3
 80015ac:	2300      	movs	r3, #0
 80015ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7fe feb8 	bl	8000324 <HAL_GetTick>
 80015b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b8:	e009      	b.n	80015ce <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ba:	f7fe feb3 	bl	8000324 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e05b      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 80015ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fa93 f2a3 	rbit	r2, r3
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	601a      	str	r2, [r3, #0]
  return(result);
 80015e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ee:	fab3 f383 	clz	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	095b      	lsrs	r3, r3, #5
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d102      	bne.n	8001608 <HAL_RCC_OscConfig+0xd50>
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_RCC_OscConfig+0xdd8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	e01b      	b.n	8001640 <HAL_RCC_OscConfig+0xd88>
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fa93 f2a3 	rbit	r2, r3
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f107 0318 	add.w	r3, r7, #24
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_RCC_OscConfig+0xdd8>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f107 0214 	add.w	r2, r7, #20
 8001644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001648:	6011      	str	r1, [r2, #0]
 800164a:	f107 0214 	add.w	r2, r7, #20
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	fa92 f1a2 	rbit	r1, r2
 8001654:	f107 0210 	add.w	r2, r7, #16
 8001658:	6011      	str	r1, [r2, #0]
  return(result);
 800165a:	f107 0210 	add.w	r2, r7, #16
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	fab2 f282 	clz	r2, r2
 8001664:	b252      	sxtb	r2, r2
 8001666:	f042 0220 	orr.w	r2, r2, #32
 800166a:	b252      	sxtb	r2, r2
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f002 021f 	and.w	r2, r2, #31
 8001672:	2101      	movs	r1, #1
 8001674:	fa01 f202 	lsl.w	r2, r1, r2
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d19d      	bne.n	80015ba <HAL_RCC_OscConfig+0xd02>
 800167e:	e001      	b.n	8001684 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b09e      	sub	sp, #120	; 0x78
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e164      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d910      	bls.n	80016dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b8f      	ldr	r3, [pc, #572]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 0207 	bic.w	r2, r3, #7
 80016c2:	498d      	ldr	r1, [pc, #564]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e14c      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b84      	ldr	r3, [pc, #528]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4981      	ldr	r1, [pc, #516]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80df 	beq.w	80018c6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d13d      	bne.n	800178c <HAL_RCC_ClockConfig+0xf8>
 8001710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001714:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800171e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d102      	bne.n	800173a <HAL_RCC_ClockConfig+0xa6>
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	e00f      	b.n	800175a <HAL_RCC_ClockConfig+0xc6>
 800173a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	667b      	str	r3, [r7, #100]	; 0x64
 8001748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174c:	663b      	str	r3, [r7, #96]	; 0x60
 800174e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001756:	4b69      	ldr	r3, [pc, #420]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800175e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001760:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001762:	fa92 f2a2 	rbit	r2, r2
 8001766:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b252      	sxtb	r2, r2
 8001770:	f042 0220 	orr.w	r2, r2, #32
 8001774:	b252      	sxtb	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d17d      	bne.n	8001884 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0f4      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d13d      	bne.n	8001810 <HAL_RCC_ClockConfig+0x17c>
 8001794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001798:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80017a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_RCC_ClockConfig+0x12a>
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	e00f      	b.n	80017de <HAL_RCC_ClockConfig+0x14a>
 80017be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
 80017cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
 80017d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017da:	4b48      	ldr	r3, [pc, #288]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80017e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e6:	fa92 f2a2 	rbit	r2, r2
 80017ea:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	b252      	sxtb	r2, r2
 80017f4:	f042 0220 	orr.w	r2, r2, #32
 80017f8:	b252      	sxtb	r2, r2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d13b      	bne.n	8001884 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b2      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
 8001810:	2302      	movs	r3, #2
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d102      	bne.n	8001838 <HAL_RCC_ClockConfig+0x1a4>
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	e00d      	b.n	8001854 <HAL_RCC_ClockConfig+0x1c0>
 8001838:	2302      	movs	r3, #2
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2202      	movs	r2, #2
 8001856:	61ba      	str	r2, [r7, #24]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	fa92 f2a2 	rbit	r2, r2
 800185e:	617a      	str	r2, [r7, #20]
  return(result);
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	fab2 f282 	clz	r2, r2
 8001866:	b252      	sxtb	r2, r2
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	b252      	sxtb	r2, r2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f002 021f 	and.w	r2, r2, #31
 8001874:	2101      	movs	r1, #1
 8001876:	fa01 f202 	lsl.w	r2, r1, r2
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e078      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 0203 	bic.w	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	491a      	ldr	r1, [pc, #104]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001896:	f7fe fd45 	bl	8000324 <HAL_GetTick>
 800189a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189e:	f7fe fd41 	bl	8000324 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e060      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 020c 	and.w	r2, r3, #12
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d1eb      	bne.n	800189e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d215      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 0207 	bic.w	r2, r3, #7
 80018dc:	4906      	ldr	r1, [pc, #24]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d006      	beq.n	8001900 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e03f      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
 80018f6:	bf00      	nop
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4919      	ldr	r1, [pc, #100]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4911      	ldr	r1, [pc, #68]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800193e:	f000 f825 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8001942:	4601      	mov	r1, r0
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800194c:	23f0      	movs	r3, #240	; 0xf0
 800194e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	60fb      	str	r3, [r7, #12]
  return(result);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_RCC_ClockConfig+0x2f0>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	fa21 f303 	lsr.w	r3, r1, r3
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_RCC_ClockConfig+0x2f4>)
 800196c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800196e:	2000      	movs	r0, #0
 8001970:	f7fe fc94 	bl	800029c <HAL_InitTick>
  
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3778      	adds	r7, #120	; 0x78
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	080039ec 	.word	0x080039ec
 8001988:	20000008 	.word	0x20000008

0800198c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x30>
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x36>
 80019ba:	e03c      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019be:	623b      	str	r3, [r7, #32]
      break;
 80019c0:	e03c      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019c8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80019cc:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	607b      	str	r3, [r7, #4]
  return(result);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f003 020f 	and.w	r2, r3, #15
 80019ee:	230f      	movs	r3, #15
 80019f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	e004      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	623b      	str	r3, [r7, #32]
      break;
 8001a34:	e002      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a38:	623b      	str	r3, [r7, #32]
      break;
 8001a3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	372c      	adds	r7, #44	; 0x2c
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	007a1200 	.word	0x007a1200
 8001a54:	080039cc 	.word	0x080039cc
 8001a58:	080039dc 	.word	0x080039dc
 8001a5c:	003d0900 	.word	0x003d0900

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000008 	.word	0x20000008

08001a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a7e:	f7ff ffef 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001a82:	4601      	mov	r1, r0
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a8c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a90:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	603b      	str	r3, [r7, #0]
  return(result);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	080039fc 	.word	0x080039fc

08001abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ac2:	f7ff ffcd 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001ac6:	4601      	mov	r1, r0
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001ad0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ad4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	603b      	str	r3, [r7, #0]
  return(result);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x40>)
 8001aea:	5cd3      	ldrb	r3, [r2, r3]
 8001aec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	080039fc 	.word	0x080039fc

08001b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b092      	sub	sp, #72	; 0x48
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80d6 	beq.w	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b24:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10e      	bne.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	61d3      	str	r3, [r2, #28]
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a40      	ldr	r2, [pc, #256]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7fe fbdd 	bl	8000324 <HAL_GetTick>
 8001b6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7fe fbd9 	bl	8000324 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b64      	cmp	r3, #100	; 0x64
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e14a      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8083 	beq.w	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d07b      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bfe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d04c      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fb8b 	bl	8000324 <HAL_GetTick>
 8001c0e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7fe fb87 	bl	8000324 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0f6      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c40:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d108      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001c56:	4b01      	ldr	r3, [pc, #4]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	e00d      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	10908100 	.word	0x10908100
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2202      	movs	r2, #2
 8001c7a:	613a      	str	r2, [r7, #16]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	fa92 f2a2 	rbit	r2, r2
 8001c82:	60fa      	str	r2, [r7, #12]
  return(result);
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	fab2 f282 	clz	r2, r2
 8001c8a:	b252      	sxtb	r2, r2
 8001c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c90:	b252      	sxtb	r2, r2
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f002 021f 	and.w	r2, r2, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0b6      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	495b      	ldr	r1, [pc, #364]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d105      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cd6:	4b52      	ldr	r3, [pc, #328]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	494f      	ldr	r1, [pc, #316]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	f023 0210 	bic.w	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4947      	ldr	r1, [pc, #284]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4940      	ldr	r1, [pc, #256]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f023 0220 	bic.w	r2, r3, #32
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4938      	ldr	r1, [pc, #224]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	4931      	ldr	r1, [pc, #196]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	4929      	ldr	r1, [pc, #164]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	4922      	ldr	r1, [pc, #136]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	491a      	ldr	r1, [pc, #104]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	4913      	ldr	r1, [pc, #76]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	490b      	ldr	r1, [pc, #44]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	4904      	ldr	r1, [pc, #16]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3748      	adds	r7, #72	; 0x48
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e083      	b.n	8001f3e <HAL_RTC_Init+0x11a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7f5b      	ldrb	r3, [r3, #29]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f001 f828 	bl	8002e9c <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	22ca      	movs	r2, #202	; 0xca
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2253      	movs	r2, #83	; 0x53
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 faea 	bl	800243c <RTC_EnterInitMode>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e05e      	b.n	8001f3e <HAL_RTC_Init+0x11a>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e92:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68d2      	ldr	r2, [r2, #12]
 8001eba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6919      	ldr	r1, [r3, #16]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	041a      	lsls	r2, r3, #16
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ede:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10e      	bne.n	8001f0c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa7c 	bl	80023ec <HAL_RTC_WaitForSynchro>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	22ff      	movs	r2, #255	; 0xff
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2204      	movs	r2, #4
 8001f06:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e018      	b.n	8001f3e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
  }
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001f78:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001f7c:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d11a      	bne.n	8001ff8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fa82 	bl	80024d0 <RTC_Bcd2ToByte>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fa79 	bl	80024d0 <RTC_Bcd2ToByte>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	789b      	ldrb	r3, [r3, #2]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fa70 	bl	80024d0 <RTC_Bcd2ToByte>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format 
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
          
  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800201c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002020:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	0c1b      	lsrs	r3, r3, #16
 8002026:	b2da      	uxtb	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	b2da      	uxtb	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002044:	b2da      	uxtb	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	0b5b      	lsrs	r3, r3, #13
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	b2da      	uxtb	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d11a      	bne.n	8002096 <HAL_RTC_GetDate+0x94>
  {    
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	78db      	ldrb	r3, [r3, #3]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fa33 	bl	80024d0 <RTC_Bcd2ToByte>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fa2a 	bl	80024d0 <RTC_Bcd2ToByte>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	789b      	ldrb	r3, [r3, #2]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fa21 	bl	80024d0 <RTC_Bcd2ToByte>
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	7f1b      	ldrb	r3, [r3, #28]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_RTC_SetAlarm_IT+0x24>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e13c      	b.n	800233e <HAL_RTC_SetAlarm_IT+0x29e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2202      	movs	r2, #2
 80020ce:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d137      	bne.n	8002146 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2200      	movs	r2, #0
 80020e8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f9d0 	bl	8002494 <RTC_ByteToBcd2>
 80020f4:	4603      	mov	r3, r0
 80020f6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 f9c9 	bl	8002494 <RTC_ByteToBcd2>
 8002102:	4603      	mov	r3, r0
 8002104:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002106:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f9c1 	bl	8002494 <RTC_ByteToBcd2>
 8002112:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002114:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	78db      	ldrb	r3, [r3, #3]
 800211c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800211e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f9b3 	bl	8002494 <RTC_ByteToBcd2>
 800212e:	4603      	mov	r3, r0
 8002130:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002132:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800213a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002140:	4313      	orrs	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e040      	b.n	80021c8 <HAL_RTC_SetAlarm_IT+0x128>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_RTC_SetAlarm_IT+0xc4>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f9b9 	bl	80024d0 <RTC_Bcd2ToByte>
 800215e:	4603      	mov	r3, r0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e002      	b.n	800216a <HAL_RTC_SetAlarm_IT+0xca>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_RTC_SetAlarm_IT+0xe4>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f9a9 	bl	80024d0 <RTC_Bcd2ToByte>
 800217e:	4603      	mov	r3, r0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e007      	b.n	8002194 <HAL_RTC_SetAlarm_IT+0xf4>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f9a0 	bl	80024d0 <RTC_Bcd2ToByte>
 8002190:	4603      	mov	r3, r0
 8002192:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80021a0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80021a6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	78db      	ldrb	r3, [r3, #3]
 80021ac:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80021ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80021b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80021be:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	22ca      	movs	r2, #202	; 0xca
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2253      	movs	r2, #83	; 0x53
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ec:	d148      	bne.n	8002280 <HAL_RTC_SetAlarm_IT+0x1e0>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021fc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800220e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002210:	f7fe f888 	bl	8000324 <HAL_GetTick>
 8002214:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002216:	e013      	b.n	8002240 <HAL_RTC_SetAlarm_IT+0x1a0>
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002218:	f7fe f884 	bl	8000324 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002226:	d90b      	bls.n	8002240 <HAL_RTC_SetAlarm_IT+0x1a0>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	22ff      	movs	r2, #255	; 0xff
 800222e:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2203      	movs	r2, #3
 8002234:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	771a      	strb	r2, [r3, #28]
        
        return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e07e      	b.n	800233e <HAL_RTC_SetAlarm_IT+0x29e>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0e4      	beq.n	8002218 <HAL_RTC_SetAlarm_IT+0x178>
      }  
    }
    
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800226c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	e047      	b.n	8002310 <HAL_RTC_SetAlarm_IT+0x270>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800228e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f462 7220 	orn	r2, r2, #640	; 0x280
 80022a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80022a2:	f7fe f83f 	bl	8000324 <HAL_GetTick>
 80022a6:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80022a8:	e013      	b.n	80022d2 <HAL_RTC_SetAlarm_IT+0x232>
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80022aa:	f7fe f83b 	bl	8000324 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b8:	d90b      	bls.n	80022d2 <HAL_RTC_SetAlarm_IT+0x232>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	22ff      	movs	r2, #255	; 0xff
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2203      	movs	r2, #3
 80022c6:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	771a      	strb	r2, [r3, #28]
        
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e035      	b.n	800233e <HAL_RTC_SetAlarm_IT+0x29e>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0e4      	beq.n	80022aa <HAL_RTC_SetAlarm_IT+0x20a>
      }  
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800230e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RTC_SetAlarm_IT+0x2a8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_RTC_SetAlarm_IT+0x2a8>)
 8002316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231a:	6013      	str	r3, [r2, #0]
  
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_RTC_SetAlarm_IT+0x2a8>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a09      	ldr	r2, [pc, #36]	; (8002348 <HAL_RTC_SetAlarm_IT+0x2a8>)
 8002322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002326:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	bf00      	nop
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */ 
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f831 	bl	80023d8 <HAL_RTC_AlarmAEventCallback>
      
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002386:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00b      	beq.n	80023bc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */ 
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f8b1 	bl	800250c <HAL_RTCEx_AlarmBEventCallback>
      
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80023ba:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80023be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023c2:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	775a      	strb	r2, [r3, #29]
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40010400 	.word	0x40010400

080023d8 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002406:	60da      	str	r2, [r3, #12]
  
  tickstart = HAL_GetTick();
 8002408:	f7fd ff8c 	bl	8000324 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800240e:	e009      	b.n	8002424 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002410:	f7fd ff88 	bl	8000324 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800241e:	d901      	bls.n	8002424 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e007      	b.n	8002434 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ee      	beq.n	8002410 <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d119      	bne.n	800248a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f04f 32ff 	mov.w	r2, #4294967295
 800245e:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 8002460:	f7fd ff60 	bl	8000324 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002466:	e009      	b.n	800247c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002468:	f7fd ff5c 	bl	8000324 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002476:	d901      	bls.n	800247c <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e007      	b.n	800248c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0ee      	beq.n	8002468 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 80024a2:	e005      	b.n	80024b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3301      	adds	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	3b0a      	subs	r3, #10
 80024ae:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b09      	cmp	r3, #9
 80024b4:	d8f6      	bhi.n	80024a4 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b2db      	uxtb	r3, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	b2db      	uxtb	r3, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e043      	b.n	80025ba <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fcd2 	bl	8002ef0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f82d 	bl	80025c4 <UART_SetConfig>
 800256a:	4603      	mov	r3, r0
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e022      	b.n	80025ba <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f987 	bl	8002890 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002590:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025a0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa0e 	bl	80029d4 <UART_CheckIdleState>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80025d0:	2310      	movs	r3, #16
 80025d2:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80025d8:	2300      	movs	r3, #0
 80025da:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4b9f      	ldr	r3, [pc, #636]	; (800287c <UART_SetConfig+0x2b8>)
 8002600:	4013      	ands	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	68f9      	ldr	r1, [r7, #12]
 8002608:	430b      	orrs	r3, r1
 800260a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a8e      	ldr	r2, [pc, #568]	; (8002880 <UART_SetConfig+0x2bc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d121      	bne.n	8002690 <UART_SetConfig+0xcc>
 800264c:	4b8d      	ldr	r3, [pc, #564]	; (8002884 <UART_SetConfig+0x2c0>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b03      	cmp	r3, #3
 8002656:	d817      	bhi.n	8002688 <UART_SetConfig+0xc4>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <UART_SetConfig+0x9c>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002671 	.word	0x08002671
 8002664:	0800267d 	.word	0x0800267d
 8002668:	08002683 	.word	0x08002683
 800266c:	08002677 	.word	0x08002677
 8002670:	2300      	movs	r3, #0
 8002672:	75fb      	strb	r3, [r7, #23]
 8002674:	e01e      	b.n	80026b4 <UART_SetConfig+0xf0>
 8002676:	2302      	movs	r3, #2
 8002678:	75fb      	strb	r3, [r7, #23]
 800267a:	e01b      	b.n	80026b4 <UART_SetConfig+0xf0>
 800267c:	2304      	movs	r3, #4
 800267e:	75fb      	strb	r3, [r7, #23]
 8002680:	e018      	b.n	80026b4 <UART_SetConfig+0xf0>
 8002682:	2308      	movs	r3, #8
 8002684:	75fb      	strb	r3, [r7, #23]
 8002686:	e015      	b.n	80026b4 <UART_SetConfig+0xf0>
 8002688:	2310      	movs	r3, #16
 800268a:	75fb      	strb	r3, [r7, #23]
 800268c:	bf00      	nop
 800268e:	e011      	b.n	80026b4 <UART_SetConfig+0xf0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a7c      	ldr	r2, [pc, #496]	; (8002888 <UART_SetConfig+0x2c4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d102      	bne.n	80026a0 <UART_SetConfig+0xdc>
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
 800269e:	e009      	b.n	80026b4 <UART_SetConfig+0xf0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a79      	ldr	r2, [pc, #484]	; (800288c <UART_SetConfig+0x2c8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d102      	bne.n	80026b0 <UART_SetConfig+0xec>
 80026aa:	2300      	movs	r3, #0
 80026ac:	75fb      	strb	r3, [r7, #23]
 80026ae:	e001      	b.n	80026b4 <UART_SetConfig+0xf0>
 80026b0:	2310      	movs	r3, #16
 80026b2:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026bc:	d16f      	bne.n	800279e <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d857      	bhi.n	8002774 <UART_SetConfig+0x1b0>
 80026c4:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <UART_SetConfig+0x108>)
 80026c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ca:	bf00      	nop
 80026cc:	080026f1 	.word	0x080026f1
 80026d0:	0800270d 	.word	0x0800270d
 80026d4:	08002729 	.word	0x08002729
 80026d8:	08002775 	.word	0x08002775
 80026dc:	08002743 	.word	0x08002743
 80026e0:	08002775 	.word	0x08002775
 80026e4:	08002775 	.word	0x08002775
 80026e8:	08002775 	.word	0x08002775
 80026ec:	0800275f 	.word	0x0800275f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026f0:	f7ff f9c2 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 80026f4:	4603      	mov	r3, r0
 80026f6:	005a      	lsls	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	441a      	add	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	82bb      	strh	r3, [r7, #20]
        break;
 800270a:	e036      	b.n	800277a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800270c:	f7ff f9d6 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 8002710:	4603      	mov	r3, r0
 8002712:	005a      	lsls	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	441a      	add	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	82bb      	strh	r3, [r7, #20]
        break;
 8002726:	e028      	b.n	800277a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002732:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6852      	ldr	r2, [r2, #4]
 800273a:	fbb3 f3f2 	udiv	r3, r3, r2
 800273e:	82bb      	strh	r3, [r7, #20]
        break;
 8002740:	e01b      	b.n	800277a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002742:	f7ff f923 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8002746:	4603      	mov	r3, r0
 8002748:	005a      	lsls	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	441a      	add	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	82bb      	strh	r3, [r7, #20]
        break;
 800275c:	e00d      	b.n	800277a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	82bb      	strh	r3, [r7, #20]
        break;
 8002772:	e002      	b.n	800277a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	74fb      	strb	r3, [r7, #19]
        break;
 8002778:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800277a:	8abb      	ldrh	r3, [r7, #20]
 800277c:	f023 030f 	bic.w	r3, r3, #15
 8002780:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002782:	8abb      	ldrh	r3, [r7, #20]
 8002784:	105b      	asrs	r3, r3, #1
 8002786:	b29b      	uxth	r3, r3
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	b29a      	uxth	r2, r3
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	4313      	orrs	r3, r2
 8002792:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	897a      	ldrh	r2, [r7, #10]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	e069      	b.n	8002872 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d863      	bhi.n	800286c <UART_SetConfig+0x2a8>
 80027a4:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <UART_SetConfig+0x1e8>)
 80027a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027aa:	bf00      	nop
 80027ac:	080027d1 	.word	0x080027d1
 80027b0:	080027f1 	.word	0x080027f1
 80027b4:	08002811 	.word	0x08002811
 80027b8:	0800286d 	.word	0x0800286d
 80027bc:	08002831 	.word	0x08002831
 80027c0:	0800286d 	.word	0x0800286d
 80027c4:	0800286d 	.word	0x0800286d
 80027c8:	0800286d 	.word	0x0800286d
 80027cc:	08002851 	.word	0x08002851
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027d0:	f7ff f952 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	441a      	add	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60da      	str	r2, [r3, #12]
        break;
 80027ee:	e040      	b.n	8002872 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027f0:	f7ff f964 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	b29a      	uxth	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60da      	str	r2, [r3, #12]
        break;
 800280e:	e030      	b.n	8002872 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800281a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6852      	ldr	r2, [r2, #4]
 8002822:	fbb3 f3f2 	udiv	r3, r3, r2
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60da      	str	r2, [r3, #12]
        break;
 800282e:	e020      	b.n	8002872 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002830:	f7ff f8ac 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	441a      	add	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60da      	str	r2, [r3, #12]
        break;
 800284e:	e010      	b.n	8002872 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	b29a      	uxth	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60da      	str	r2, [r3, #12]
        break;
 800286a:	e002      	b.n	8002872 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	74fb      	strb	r3, [r7, #19]
        break;
 8002870:	bf00      	nop
    }
  }

  return ret;
 8002872:	7cfb      	ldrb	r3, [r7, #19]

}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	efff69f3 	.word	0xefff69f3
 8002880:	40013800 	.word	0x40013800
 8002884:	40021000 	.word	0x40021000
 8002888:	40004400 	.word	0x40004400
 800288c:	40004800 	.word	0x40004800

08002890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01a      	beq.n	80029a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298e:	d10a      	bne.n	80029a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	605a      	str	r2, [r3, #4]
  }
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af02      	add	r7, sp, #8
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80029e6:	f7fd fc9d 	bl	8000324 <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d10e      	bne.n	8002a18 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f82c 	bl	8002a66 <UART_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e022      	b.n	8002a5e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d10e      	bne.n	8002a44 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f816 	bl	8002a66 <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e00c      	b.n	8002a5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a76:	e02c      	b.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d028      	beq.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a86:	f7fd fc4d 	bl	8000324 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d21d      	bcs.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002aa4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e00f      	b.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4013      	ands	r3, r2
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d0c3      	beq.n	8002a78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <set_alarm>:
	    }
	    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1,0x32f2);

}
void set_alarm(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm = {0};
 8002b02:	463b      	mov	r3, r7
 8002b04:	2228      	movs	r2, #40	; 0x28
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fb35 	bl	8003178 <memset>
	/** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0x10;
 8002b0e:	2310      	movs	r3, #16
 8002b10:	703b      	strb	r3, [r7, #0]
	  sAlarm.AlarmTime.Minutes = 0x23;
 8002b12:	2323      	movs	r3, #35	; 0x23
 8002b14:	707b      	strb	r3, [r7, #1]
	  sAlarm.AlarmTime.Seconds = 0x0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	70bb      	strb	r3, [r7, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDay = 0x14;
 8002b32:	2314      	movs	r3, #20
 8002b34:	f887 3020 	strb.w	r3, [r7, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b3e:	463b      	mov	r3, r7
 8002b40:	2201      	movs	r2, #1
 8002b42:	4619      	mov	r1, r3
 8002b44:	4805      	ldr	r0, [pc, #20]	; (8002b5c <set_alarm+0x60>)
 8002b46:	f7ff faab 	bl	80020a0 <HAL_RTC_SetAlarm_IT>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <set_alarm+0x58>
	  {
	    Error_Handler();
 8002b50:	f000 f978 	bl	8002e44 <Error_Handler>
	  }
}
 8002b54:	bf00      	nop
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	2000009c 	.word	0x2000009c

08002b60 <get_time>:

void get_time(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate={0};
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
	RTC_TimeTypeDef gTime={0};
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002b78:	463b      	mov	r3, r7
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4813      	ldr	r0, [pc, #76]	; (8002bcc <get_time+0x6c>)
 8002b80:	f7ff f9e1 	bl	8001f46 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480f      	ldr	r0, [pc, #60]	; (8002bcc <get_time+0x6c>)
 8002b8e:	f7ff fa38 	bl	8002002 <HAL_RTC_GetDate>
	sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 8002b92:	783b      	ldrb	r3, [r7, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	787b      	ldrb	r3, [r7, #1]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	78bb      	ldrb	r3, [r7, #2]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	490b      	ldr	r1, [pc, #44]	; (8002bd0 <get_time+0x70>)
 8002ba2:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <get_time+0x74>)
 8002ba4:	f000 faf0 	bl	8003188 <siprintf>
	sprintf((char*)date,"%02d/%02d/%02d",gDate.Date,gDate.Month, 2000+gDate.Year);
 8002ba8:	7dbb      	ldrb	r3, [r7, #22]
 8002baa:	461a      	mov	r2, r3
 8002bac:	7d7b      	ldrb	r3, [r7, #21]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <get_time+0x78>)
 8002bbc:	4807      	ldr	r0, [pc, #28]	; (8002bdc <get_time+0x7c>)
 8002bbe:	f000 fae3 	bl	8003188 <siprintf>


}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000009c 	.word	0x2000009c
 8002bd0:	080039ac 	.word	0x080039ac
 8002bd4:	200000bc 	.word	0x200000bc
 8002bd8:	080039bc 	.word	0x080039bc
 8002bdc:	20000138 	.word	0x20000138

08002be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002be4:	f7fd fb44 	bl	8000270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002be8:	f000 f80e 	bl	8002c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bec:	f000 f8c0 	bl	8002d70 <MX_GPIO_Init>
  MX_RTC_Init();
 8002bf0:	f000 f868 	bl	8002cc4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8002bf4:	f000 f88c 	bl	8002d10 <MX_USART2_UART_Init>
  /* uSER CODE BEGIN 2 */
	//set_time();
   set_alarm();
 8002bf8:	f7ff ff80 	bl	8002afc <set_alarm>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
     get_time();
 8002bfc:	f7ff ffb0 	bl	8002b60 <get_time>
     HAL_Delay(200);
 8002c00:	20c8      	movs	r0, #200	; 0xc8
 8002c02:	f7fd fb9b 	bl	800033c <HAL_Delay>
     get_time();
 8002c06:	e7f9      	b.n	8002bfc <main+0x1c>

08002c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b09c      	sub	sp, #112	; 0x70
 8002c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c12:	2228      	movs	r2, #40	; 0x28
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 faae 	bl	8003178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c2c:	463b      	mov	r3, r7
 8002c2e:	2234      	movs	r2, #52	; 0x34
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 faa0 	bl	8003178 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002c38:	2309      	movs	r3, #9
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c42:	2300      	movs	r3, #0
 8002c44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c46:	2301      	movs	r3, #1
 8002c48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c56:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c58:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fe28 	bl	80008b8 <HAL_RCC_OscConfig>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002c6e:	f000 f8e9 	bl	8002e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c72:	230f      	movs	r3, #15
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c76:	2302      	movs	r3, #2
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c84:	2300      	movs	r3, #0
 8002c86:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fd00 	bl	8001694 <HAL_RCC_ClockConfig>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c9a:	f000 f8d3 	bl	8002e44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca8:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002caa:	463b      	mov	r3, r7
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe ff27 	bl	8001b00 <HAL_RCCEx_PeriphCLKConfig>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002cb8:	f000 f8c4 	bl	8002e44 <Error_Handler>
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	3770      	adds	r7, #112	; 0x70
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <MX_RTC_Init+0x44>)
 8002cca:	4a10      	ldr	r2, [pc, #64]	; (8002d0c <MX_RTC_Init+0x48>)
 8002ccc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MX_RTC_Init+0x44>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_RTC_Init+0x44>)
 8002cd6:	227f      	movs	r2, #127	; 0x7f
 8002cd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <MX_RTC_Init+0x44>)
 8002cdc:	22ff      	movs	r2, #255	; 0xff
 8002cde:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_RTC_Init+0x44>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <MX_RTC_Init+0x44>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_RTC_Init+0x44>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_RTC_Init+0x44>)
 8002cf4:	f7ff f896 	bl	8001e24 <HAL_RTC_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002cfe:	f000 f8a1 	bl	8002e44 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	2000009c 	.word	0x2000009c
 8002d0c:	40002800 	.word	0x40002800

08002d10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d16:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <MX_USART2_UART_Init+0x5c>)
 8002d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d1c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d36:	220c      	movs	r2, #12
 8002d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d52:	4805      	ldr	r0, [pc, #20]	; (8002d68 <MX_USART2_UART_Init+0x58>)
 8002d54:	f7ff fbe4 	bl	8002520 <HAL_UART_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d5e:	f000 f871 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	200000c8 	.word	0x200000c8
 8002d6c:	40004400 	.word	0x40004400

08002d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
 8002d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d86:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d90:	6153      	str	r3, [r2, #20]
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d9e:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da8:	6153      	str	r3, [r2, #20]
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	6153      	str	r3, [r2, #20]
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd8:	6153      	str	r3, [r2, #20]
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <MX_GPIO_Init+0xc4>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002de6:	2200      	movs	r2, #0
 8002de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dec:	4812      	ldr	r0, [pc, #72]	; (8002e38 <MX_GPIO_Init+0xc8>)
 8002dee:	f7fd fd4b 	bl	8000888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <MX_GPIO_Init+0xcc>)
 8002dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4619      	mov	r1, r3
 8002e06:	480e      	ldr	r0, [pc, #56]	; (8002e40 <MX_GPIO_Init+0xd0>)
 8002e08:	f7fd fbc8 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <MX_GPIO_Init+0xc8>)
 8002e26:	f7fd fbb9 	bl	800059c <HAL_GPIO_Init>

}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	48000400 	.word	0x48000400
 8002e3c:	10210000 	.word	0x10210000
 8002e40:	48000800 	.word	0x48000800

08002e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <HAL_MspInit+0x44>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <HAL_MspInit+0x44>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6193      	str	r3, [r2, #24]
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_MspInit+0x44>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_MspInit+0x44>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <HAL_MspInit+0x44>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_MspInit+0x44>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e8a:	2007      	movs	r0, #7
 8002e8c:	f7fd fb44 	bl	8000518 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <HAL_RTC_MspInit+0x4c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d118      	bne.n	8002ee0 <HAL_RTC_MspInit+0x44>
 8002eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_RTC_MspInit+0x50>)
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2301      	movs	r3, #1
 8002ece:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	2029      	movs	r0, #41	; 0x29
 8002ed6:	f7fd fb2a 	bl	800052e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002eda:	2029      	movs	r0, #41	; 0x29
 8002edc:	f7fd fb43 	bl	8000566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40002800 	.word	0x40002800
 8002eec:	10908100 	.word	0x10908100

08002ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_UART_MspInit+0x7c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d128      	bne.n	8002f64 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_UART_MspInit+0x80>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_UART_MspInit+0x80>)
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	61d3      	str	r3, [r2, #28]
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_UART_MspInit+0x80>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <HAL_UART_MspInit+0x80>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <HAL_UART_MspInit+0x80>)
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f34:	6153      	str	r3, [r2, #20]
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <HAL_UART_MspInit+0x80>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f42:	230c      	movs	r3, #12
 8002f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f52:	2307      	movs	r3, #7
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f60:	f7fd fb1c 	bl	800059c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f64:	bf00      	nop
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40004400 	.word	0x40004400
 8002f70:	40021000 	.word	0x40021000

08002f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f86:	e7fe      	b.n	8002f86 <HardFault_Handler+0x4>

08002f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <MemManage_Handler+0x4>

08002f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <BusFault_Handler+0x4>

08002f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <UsageFault_Handler+0x4>

08002f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fc8:	f7fd f998 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <RTC_Alarm_IRQHandler+0x10>)
 8002fd6:	f7ff f9b9 	bl	800234c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000009c 	.word	0x2000009c

08002fe4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <_sbrk+0x50>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <_sbrk+0x16>
		heap_end = &end;
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <_sbrk+0x50>)
 8002ff6:	4a10      	ldr	r2, [pc, #64]	; (8003038 <_sbrk+0x54>)
 8002ff8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <_sbrk+0x50>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <_sbrk+0x50>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	466a      	mov	r2, sp
 800300a:	4293      	cmp	r3, r2
 800300c:	d907      	bls.n	800301e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800300e:	f000 f889 	bl	8003124 <__errno>
 8003012:	4602      	mov	r2, r0
 8003014:	230c      	movs	r3, #12
 8003016:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
 800301c:	e006      	b.n	800302c <_sbrk+0x48>
	}

	heap_end += incr;
 800301e:	4b05      	ldr	r3, [pc, #20]	; (8003034 <_sbrk+0x50>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	4a03      	ldr	r2, [pc, #12]	; (8003034 <_sbrk+0x50>)
 8003028:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800302a:	68fb      	ldr	r3, [r7, #12]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	2000008c 	.word	0x2000008c
 8003038:	20000148 	.word	0x20000148

0800303c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003040:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <SystemInit+0x84>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <SystemInit+0x84>)
 8003048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800304c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <SystemInit+0x88>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <SystemInit+0x88>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <SystemInit+0x88>)
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	4918      	ldr	r1, [pc, #96]	; (80030c4 <SystemInit+0x88>)
 8003062:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <SystemInit+0x8c>)
 8003064:	4013      	ands	r3, r2
 8003066:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003068:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <SystemInit+0x88>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <SystemInit+0x88>)
 800306e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003076:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003078:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <SystemInit+0x88>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <SystemInit+0x88>)
 800307e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003082:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <SystemInit+0x88>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <SystemInit+0x88>)
 800308a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800308e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <SystemInit+0x88>)
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <SystemInit+0x88>)
 8003096:	f023 030f 	bic.w	r3, r3, #15
 800309a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <SystemInit+0x88>)
 800309e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a0:	4908      	ldr	r1, [pc, #32]	; (80030c4 <SystemInit+0x88>)
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <SystemInit+0x90>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <SystemInit+0x88>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <SystemInit+0x84>)
 80030b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030b4:	609a      	str	r2, [r3, #8]
#endif
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00
 80030c4:	40021000 	.word	0x40021000
 80030c8:	f87fc00c 	.word	0xf87fc00c
 80030cc:	ff00fccc 	.word	0xff00fccc

080030d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003108 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80030d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80030d6:	e003      	b.n	80030e0 <LoopCopyDataInit>

080030d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80030da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80030dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80030de:	3104      	adds	r1, #4

080030e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80030e0:	480b      	ldr	r0, [pc, #44]	; (8003110 <LoopForever+0xa>)
	ldr	r3, =_edata
 80030e2:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <LoopForever+0xe>)
	adds	r2, r0, r1
 80030e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80030e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80030e8:	d3f6      	bcc.n	80030d8 <CopyDataInit>
	ldr	r2, =_sbss
 80030ea:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <LoopForever+0x12>)
	b	LoopFillZerobss
 80030ec:	e002      	b.n	80030f4 <LoopFillZerobss>

080030ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80030ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80030f0:	f842 3b04 	str.w	r3, [r2], #4

080030f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <LoopForever+0x16>)
	cmp	r2, r3
 80030f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80030f8:	d3f9      	bcc.n	80030ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030fa:	f7ff ff9f 	bl	800303c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030fe:	f000 f817 	bl	8003130 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003102:	f7ff fd6d 	bl	8002be0 <main>

08003106 <LoopForever>:

LoopForever:
    b LoopForever
 8003106:	e7fe      	b.n	8003106 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003108:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 800310c:	08003a40 	.word	0x08003a40
	ldr	r0, =_sdata
 8003110:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003114:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003118:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800311c:	20000148 	.word	0x20000148

08003120 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003120:	e7fe      	b.n	8003120 <ADC1_IRQHandler>
	...

08003124 <__errno>:
 8003124:	4b01      	ldr	r3, [pc, #4]	; (800312c <__errno+0x8>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	2000000c 	.word	0x2000000c

08003130 <__libc_init_array>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	4e0d      	ldr	r6, [pc, #52]	; (8003168 <__libc_init_array+0x38>)
 8003134:	4c0d      	ldr	r4, [pc, #52]	; (800316c <__libc_init_array+0x3c>)
 8003136:	1ba4      	subs	r4, r4, r6
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	2500      	movs	r5, #0
 800313c:	42a5      	cmp	r5, r4
 800313e:	d109      	bne.n	8003154 <__libc_init_array+0x24>
 8003140:	4e0b      	ldr	r6, [pc, #44]	; (8003170 <__libc_init_array+0x40>)
 8003142:	4c0c      	ldr	r4, [pc, #48]	; (8003174 <__libc_init_array+0x44>)
 8003144:	f000 fc26 	bl	8003994 <_init>
 8003148:	1ba4      	subs	r4, r4, r6
 800314a:	10a4      	asrs	r4, r4, #2
 800314c:	2500      	movs	r5, #0
 800314e:	42a5      	cmp	r5, r4
 8003150:	d105      	bne.n	800315e <__libc_init_array+0x2e>
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003158:	4798      	blx	r3
 800315a:	3501      	adds	r5, #1
 800315c:	e7ee      	b.n	800313c <__libc_init_array+0xc>
 800315e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003162:	4798      	blx	r3
 8003164:	3501      	adds	r5, #1
 8003166:	e7f2      	b.n	800314e <__libc_init_array+0x1e>
 8003168:	08003a38 	.word	0x08003a38
 800316c:	08003a38 	.word	0x08003a38
 8003170:	08003a38 	.word	0x08003a38
 8003174:	08003a3c 	.word	0x08003a3c

08003178 <memset>:
 8003178:	4402      	add	r2, r0
 800317a:	4603      	mov	r3, r0
 800317c:	4293      	cmp	r3, r2
 800317e:	d100      	bne.n	8003182 <memset+0xa>
 8003180:	4770      	bx	lr
 8003182:	f803 1b01 	strb.w	r1, [r3], #1
 8003186:	e7f9      	b.n	800317c <memset+0x4>

08003188 <siprintf>:
 8003188:	b40e      	push	{r1, r2, r3}
 800318a:	b500      	push	{lr}
 800318c:	b09c      	sub	sp, #112	; 0x70
 800318e:	ab1d      	add	r3, sp, #116	; 0x74
 8003190:	9002      	str	r0, [sp, #8]
 8003192:	9006      	str	r0, [sp, #24]
 8003194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003198:	4809      	ldr	r0, [pc, #36]	; (80031c0 <siprintf+0x38>)
 800319a:	9107      	str	r1, [sp, #28]
 800319c:	9104      	str	r1, [sp, #16]
 800319e:	4909      	ldr	r1, [pc, #36]	; (80031c4 <siprintf+0x3c>)
 80031a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80031a4:	9105      	str	r1, [sp, #20]
 80031a6:	6800      	ldr	r0, [r0, #0]
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	a902      	add	r1, sp, #8
 80031ac:	f000 f866 	bl	800327c <_svfiprintf_r>
 80031b0:	9b02      	ldr	r3, [sp, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	b01c      	add	sp, #112	; 0x70
 80031b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031bc:	b003      	add	sp, #12
 80031be:	4770      	bx	lr
 80031c0:	2000000c 	.word	0x2000000c
 80031c4:	ffff0208 	.word	0xffff0208

080031c8 <__ssputs_r>:
 80031c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	688e      	ldr	r6, [r1, #8]
 80031ce:	429e      	cmp	r6, r3
 80031d0:	4682      	mov	sl, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	4690      	mov	r8, r2
 80031d6:	4699      	mov	r9, r3
 80031d8:	d837      	bhi.n	800324a <__ssputs_r+0x82>
 80031da:	898a      	ldrh	r2, [r1, #12]
 80031dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031e0:	d031      	beq.n	8003246 <__ssputs_r+0x7e>
 80031e2:	6825      	ldr	r5, [r4, #0]
 80031e4:	6909      	ldr	r1, [r1, #16]
 80031e6:	1a6f      	subs	r7, r5, r1
 80031e8:	6965      	ldr	r5, [r4, #20]
 80031ea:	2302      	movs	r3, #2
 80031ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80031f4:	f109 0301 	add.w	r3, r9, #1
 80031f8:	443b      	add	r3, r7
 80031fa:	429d      	cmp	r5, r3
 80031fc:	bf38      	it	cc
 80031fe:	461d      	movcc	r5, r3
 8003200:	0553      	lsls	r3, r2, #21
 8003202:	d530      	bpl.n	8003266 <__ssputs_r+0x9e>
 8003204:	4629      	mov	r1, r5
 8003206:	f000 fb2b 	bl	8003860 <_malloc_r>
 800320a:	4606      	mov	r6, r0
 800320c:	b950      	cbnz	r0, 8003224 <__ssputs_r+0x5c>
 800320e:	230c      	movs	r3, #12
 8003210:	f8ca 3000 	str.w	r3, [sl]
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800321a:	81a3      	strh	r3, [r4, #12]
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003224:	463a      	mov	r2, r7
 8003226:	6921      	ldr	r1, [r4, #16]
 8003228:	f000 faa8 	bl	800377c <memcpy>
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	6126      	str	r6, [r4, #16]
 800323a:	6165      	str	r5, [r4, #20]
 800323c:	443e      	add	r6, r7
 800323e:	1bed      	subs	r5, r5, r7
 8003240:	6026      	str	r6, [r4, #0]
 8003242:	60a5      	str	r5, [r4, #8]
 8003244:	464e      	mov	r6, r9
 8003246:	454e      	cmp	r6, r9
 8003248:	d900      	bls.n	800324c <__ssputs_r+0x84>
 800324a:	464e      	mov	r6, r9
 800324c:	4632      	mov	r2, r6
 800324e:	4641      	mov	r1, r8
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	f000 fa9e 	bl	8003792 <memmove>
 8003256:	68a3      	ldr	r3, [r4, #8]
 8003258:	1b9b      	subs	r3, r3, r6
 800325a:	60a3      	str	r3, [r4, #8]
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	441e      	add	r6, r3
 8003260:	6026      	str	r6, [r4, #0]
 8003262:	2000      	movs	r0, #0
 8003264:	e7dc      	b.n	8003220 <__ssputs_r+0x58>
 8003266:	462a      	mov	r2, r5
 8003268:	f000 fb54 	bl	8003914 <_realloc_r>
 800326c:	4606      	mov	r6, r0
 800326e:	2800      	cmp	r0, #0
 8003270:	d1e2      	bne.n	8003238 <__ssputs_r+0x70>
 8003272:	6921      	ldr	r1, [r4, #16]
 8003274:	4650      	mov	r0, sl
 8003276:	f000 faa5 	bl	80037c4 <_free_r>
 800327a:	e7c8      	b.n	800320e <__ssputs_r+0x46>

0800327c <_svfiprintf_r>:
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	461d      	mov	r5, r3
 8003282:	898b      	ldrh	r3, [r1, #12]
 8003284:	061f      	lsls	r7, r3, #24
 8003286:	b09d      	sub	sp, #116	; 0x74
 8003288:	4680      	mov	r8, r0
 800328a:	460c      	mov	r4, r1
 800328c:	4616      	mov	r6, r2
 800328e:	d50f      	bpl.n	80032b0 <_svfiprintf_r+0x34>
 8003290:	690b      	ldr	r3, [r1, #16]
 8003292:	b96b      	cbnz	r3, 80032b0 <_svfiprintf_r+0x34>
 8003294:	2140      	movs	r1, #64	; 0x40
 8003296:	f000 fae3 	bl	8003860 <_malloc_r>
 800329a:	6020      	str	r0, [r4, #0]
 800329c:	6120      	str	r0, [r4, #16]
 800329e:	b928      	cbnz	r0, 80032ac <_svfiprintf_r+0x30>
 80032a0:	230c      	movs	r3, #12
 80032a2:	f8c8 3000 	str.w	r3, [r8]
 80032a6:	f04f 30ff 	mov.w	r0, #4294967295
 80032aa:	e0c8      	b.n	800343e <_svfiprintf_r+0x1c2>
 80032ac:	2340      	movs	r3, #64	; 0x40
 80032ae:	6163      	str	r3, [r4, #20]
 80032b0:	2300      	movs	r3, #0
 80032b2:	9309      	str	r3, [sp, #36]	; 0x24
 80032b4:	2320      	movs	r3, #32
 80032b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032ba:	2330      	movs	r3, #48	; 0x30
 80032bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032c0:	9503      	str	r5, [sp, #12]
 80032c2:	f04f 0b01 	mov.w	fp, #1
 80032c6:	4637      	mov	r7, r6
 80032c8:	463d      	mov	r5, r7
 80032ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80032ce:	b10b      	cbz	r3, 80032d4 <_svfiprintf_r+0x58>
 80032d0:	2b25      	cmp	r3, #37	; 0x25
 80032d2:	d13e      	bne.n	8003352 <_svfiprintf_r+0xd6>
 80032d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80032d8:	d00b      	beq.n	80032f2 <_svfiprintf_r+0x76>
 80032da:	4653      	mov	r3, sl
 80032dc:	4632      	mov	r2, r6
 80032de:	4621      	mov	r1, r4
 80032e0:	4640      	mov	r0, r8
 80032e2:	f7ff ff71 	bl	80031c8 <__ssputs_r>
 80032e6:	3001      	adds	r0, #1
 80032e8:	f000 80a4 	beq.w	8003434 <_svfiprintf_r+0x1b8>
 80032ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ee:	4453      	add	r3, sl
 80032f0:	9309      	str	r3, [sp, #36]	; 0x24
 80032f2:	783b      	ldrb	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 809d 	beq.w	8003434 <_svfiprintf_r+0x1b8>
 80032fa:	2300      	movs	r3, #0
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003304:	9304      	str	r3, [sp, #16]
 8003306:	9307      	str	r3, [sp, #28]
 8003308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800330c:	931a      	str	r3, [sp, #104]	; 0x68
 800330e:	462f      	mov	r7, r5
 8003310:	2205      	movs	r2, #5
 8003312:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003316:	4850      	ldr	r0, [pc, #320]	; (8003458 <_svfiprintf_r+0x1dc>)
 8003318:	f7fc ff5a 	bl	80001d0 <memchr>
 800331c:	9b04      	ldr	r3, [sp, #16]
 800331e:	b9d0      	cbnz	r0, 8003356 <_svfiprintf_r+0xda>
 8003320:	06d9      	lsls	r1, r3, #27
 8003322:	bf44      	itt	mi
 8003324:	2220      	movmi	r2, #32
 8003326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800332a:	071a      	lsls	r2, r3, #28
 800332c:	bf44      	itt	mi
 800332e:	222b      	movmi	r2, #43	; 0x2b
 8003330:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003334:	782a      	ldrb	r2, [r5, #0]
 8003336:	2a2a      	cmp	r2, #42	; 0x2a
 8003338:	d015      	beq.n	8003366 <_svfiprintf_r+0xea>
 800333a:	9a07      	ldr	r2, [sp, #28]
 800333c:	462f      	mov	r7, r5
 800333e:	2000      	movs	r0, #0
 8003340:	250a      	movs	r5, #10
 8003342:	4639      	mov	r1, r7
 8003344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003348:	3b30      	subs	r3, #48	; 0x30
 800334a:	2b09      	cmp	r3, #9
 800334c:	d94d      	bls.n	80033ea <_svfiprintf_r+0x16e>
 800334e:	b1b8      	cbz	r0, 8003380 <_svfiprintf_r+0x104>
 8003350:	e00f      	b.n	8003372 <_svfiprintf_r+0xf6>
 8003352:	462f      	mov	r7, r5
 8003354:	e7b8      	b.n	80032c8 <_svfiprintf_r+0x4c>
 8003356:	4a40      	ldr	r2, [pc, #256]	; (8003458 <_svfiprintf_r+0x1dc>)
 8003358:	1a80      	subs	r0, r0, r2
 800335a:	fa0b f000 	lsl.w	r0, fp, r0
 800335e:	4318      	orrs	r0, r3
 8003360:	9004      	str	r0, [sp, #16]
 8003362:	463d      	mov	r5, r7
 8003364:	e7d3      	b.n	800330e <_svfiprintf_r+0x92>
 8003366:	9a03      	ldr	r2, [sp, #12]
 8003368:	1d11      	adds	r1, r2, #4
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	9103      	str	r1, [sp, #12]
 800336e:	2a00      	cmp	r2, #0
 8003370:	db01      	blt.n	8003376 <_svfiprintf_r+0xfa>
 8003372:	9207      	str	r2, [sp, #28]
 8003374:	e004      	b.n	8003380 <_svfiprintf_r+0x104>
 8003376:	4252      	negs	r2, r2
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	9207      	str	r2, [sp, #28]
 800337e:	9304      	str	r3, [sp, #16]
 8003380:	783b      	ldrb	r3, [r7, #0]
 8003382:	2b2e      	cmp	r3, #46	; 0x2e
 8003384:	d10c      	bne.n	80033a0 <_svfiprintf_r+0x124>
 8003386:	787b      	ldrb	r3, [r7, #1]
 8003388:	2b2a      	cmp	r3, #42	; 0x2a
 800338a:	d133      	bne.n	80033f4 <_svfiprintf_r+0x178>
 800338c:	9b03      	ldr	r3, [sp, #12]
 800338e:	1d1a      	adds	r2, r3, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	9203      	str	r2, [sp, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	bfb8      	it	lt
 8003398:	f04f 33ff 	movlt.w	r3, #4294967295
 800339c:	3702      	adds	r7, #2
 800339e:	9305      	str	r3, [sp, #20]
 80033a0:	4d2e      	ldr	r5, [pc, #184]	; (800345c <_svfiprintf_r+0x1e0>)
 80033a2:	7839      	ldrb	r1, [r7, #0]
 80033a4:	2203      	movs	r2, #3
 80033a6:	4628      	mov	r0, r5
 80033a8:	f7fc ff12 	bl	80001d0 <memchr>
 80033ac:	b138      	cbz	r0, 80033be <_svfiprintf_r+0x142>
 80033ae:	2340      	movs	r3, #64	; 0x40
 80033b0:	1b40      	subs	r0, r0, r5
 80033b2:	fa03 f000 	lsl.w	r0, r3, r0
 80033b6:	9b04      	ldr	r3, [sp, #16]
 80033b8:	4303      	orrs	r3, r0
 80033ba:	3701      	adds	r7, #1
 80033bc:	9304      	str	r3, [sp, #16]
 80033be:	7839      	ldrb	r1, [r7, #0]
 80033c0:	4827      	ldr	r0, [pc, #156]	; (8003460 <_svfiprintf_r+0x1e4>)
 80033c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033c6:	2206      	movs	r2, #6
 80033c8:	1c7e      	adds	r6, r7, #1
 80033ca:	f7fc ff01 	bl	80001d0 <memchr>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d038      	beq.n	8003444 <_svfiprintf_r+0x1c8>
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <_svfiprintf_r+0x1e8>)
 80033d4:	bb13      	cbnz	r3, 800341c <_svfiprintf_r+0x1a0>
 80033d6:	9b03      	ldr	r3, [sp, #12]
 80033d8:	3307      	adds	r3, #7
 80033da:	f023 0307 	bic.w	r3, r3, #7
 80033de:	3308      	adds	r3, #8
 80033e0:	9303      	str	r3, [sp, #12]
 80033e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e4:	444b      	add	r3, r9
 80033e6:	9309      	str	r3, [sp, #36]	; 0x24
 80033e8:	e76d      	b.n	80032c6 <_svfiprintf_r+0x4a>
 80033ea:	fb05 3202 	mla	r2, r5, r2, r3
 80033ee:	2001      	movs	r0, #1
 80033f0:	460f      	mov	r7, r1
 80033f2:	e7a6      	b.n	8003342 <_svfiprintf_r+0xc6>
 80033f4:	2300      	movs	r3, #0
 80033f6:	3701      	adds	r7, #1
 80033f8:	9305      	str	r3, [sp, #20]
 80033fa:	4619      	mov	r1, r3
 80033fc:	250a      	movs	r5, #10
 80033fe:	4638      	mov	r0, r7
 8003400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003404:	3a30      	subs	r2, #48	; 0x30
 8003406:	2a09      	cmp	r2, #9
 8003408:	d903      	bls.n	8003412 <_svfiprintf_r+0x196>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0c8      	beq.n	80033a0 <_svfiprintf_r+0x124>
 800340e:	9105      	str	r1, [sp, #20]
 8003410:	e7c6      	b.n	80033a0 <_svfiprintf_r+0x124>
 8003412:	fb05 2101 	mla	r1, r5, r1, r2
 8003416:	2301      	movs	r3, #1
 8003418:	4607      	mov	r7, r0
 800341a:	e7f0      	b.n	80033fe <_svfiprintf_r+0x182>
 800341c:	ab03      	add	r3, sp, #12
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	4622      	mov	r2, r4
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <_svfiprintf_r+0x1ec>)
 8003424:	a904      	add	r1, sp, #16
 8003426:	4640      	mov	r0, r8
 8003428:	f3af 8000 	nop.w
 800342c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003430:	4681      	mov	r9, r0
 8003432:	d1d6      	bne.n	80033e2 <_svfiprintf_r+0x166>
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	065b      	lsls	r3, r3, #25
 8003438:	f53f af35 	bmi.w	80032a6 <_svfiprintf_r+0x2a>
 800343c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800343e:	b01d      	add	sp, #116	; 0x74
 8003440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003444:	ab03      	add	r3, sp, #12
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	4622      	mov	r2, r4
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <_svfiprintf_r+0x1ec>)
 800344c:	a904      	add	r1, sp, #16
 800344e:	4640      	mov	r0, r8
 8003450:	f000 f882 	bl	8003558 <_printf_i>
 8003454:	e7ea      	b.n	800342c <_svfiprintf_r+0x1b0>
 8003456:	bf00      	nop
 8003458:	08003a04 	.word	0x08003a04
 800345c:	08003a0a 	.word	0x08003a0a
 8003460:	08003a0e 	.word	0x08003a0e
 8003464:	00000000 	.word	0x00000000
 8003468:	080031c9 	.word	0x080031c9

0800346c <_printf_common>:
 800346c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003470:	4691      	mov	r9, r2
 8003472:	461f      	mov	r7, r3
 8003474:	688a      	ldr	r2, [r1, #8]
 8003476:	690b      	ldr	r3, [r1, #16]
 8003478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800347c:	4293      	cmp	r3, r2
 800347e:	bfb8      	it	lt
 8003480:	4613      	movlt	r3, r2
 8003482:	f8c9 3000 	str.w	r3, [r9]
 8003486:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800348a:	4606      	mov	r6, r0
 800348c:	460c      	mov	r4, r1
 800348e:	b112      	cbz	r2, 8003496 <_printf_common+0x2a>
 8003490:	3301      	adds	r3, #1
 8003492:	f8c9 3000 	str.w	r3, [r9]
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	0699      	lsls	r1, r3, #26
 800349a:	bf42      	ittt	mi
 800349c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034a0:	3302      	addmi	r3, #2
 80034a2:	f8c9 3000 	strmi.w	r3, [r9]
 80034a6:	6825      	ldr	r5, [r4, #0]
 80034a8:	f015 0506 	ands.w	r5, r5, #6
 80034ac:	d107      	bne.n	80034be <_printf_common+0x52>
 80034ae:	f104 0a19 	add.w	sl, r4, #25
 80034b2:	68e3      	ldr	r3, [r4, #12]
 80034b4:	f8d9 2000 	ldr.w	r2, [r9]
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	42ab      	cmp	r3, r5
 80034bc:	dc28      	bgt.n	8003510 <_printf_common+0xa4>
 80034be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034c2:	6822      	ldr	r2, [r4, #0]
 80034c4:	3300      	adds	r3, #0
 80034c6:	bf18      	it	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	0692      	lsls	r2, r2, #26
 80034cc:	d42d      	bmi.n	800352a <_printf_common+0xbe>
 80034ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d2:	4639      	mov	r1, r7
 80034d4:	4630      	mov	r0, r6
 80034d6:	47c0      	blx	r8
 80034d8:	3001      	adds	r0, #1
 80034da:	d020      	beq.n	800351e <_printf_common+0xb2>
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	68e5      	ldr	r5, [r4, #12]
 80034e0:	f8d9 2000 	ldr.w	r2, [r9]
 80034e4:	f003 0306 	and.w	r3, r3, #6
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	bf08      	it	eq
 80034ec:	1aad      	subeq	r5, r5, r2
 80034ee:	68a3      	ldr	r3, [r4, #8]
 80034f0:	6922      	ldr	r2, [r4, #16]
 80034f2:	bf0c      	ite	eq
 80034f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034f8:	2500      	movne	r5, #0
 80034fa:	4293      	cmp	r3, r2
 80034fc:	bfc4      	itt	gt
 80034fe:	1a9b      	subgt	r3, r3, r2
 8003500:	18ed      	addgt	r5, r5, r3
 8003502:	f04f 0900 	mov.w	r9, #0
 8003506:	341a      	adds	r4, #26
 8003508:	454d      	cmp	r5, r9
 800350a:	d11a      	bne.n	8003542 <_printf_common+0xd6>
 800350c:	2000      	movs	r0, #0
 800350e:	e008      	b.n	8003522 <_printf_common+0xb6>
 8003510:	2301      	movs	r3, #1
 8003512:	4652      	mov	r2, sl
 8003514:	4639      	mov	r1, r7
 8003516:	4630      	mov	r0, r6
 8003518:	47c0      	blx	r8
 800351a:	3001      	adds	r0, #1
 800351c:	d103      	bne.n	8003526 <_printf_common+0xba>
 800351e:	f04f 30ff 	mov.w	r0, #4294967295
 8003522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003526:	3501      	adds	r5, #1
 8003528:	e7c3      	b.n	80034b2 <_printf_common+0x46>
 800352a:	18e1      	adds	r1, r4, r3
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	2030      	movs	r0, #48	; 0x30
 8003530:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003534:	4422      	add	r2, r4
 8003536:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800353a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800353e:	3302      	adds	r3, #2
 8003540:	e7c5      	b.n	80034ce <_printf_common+0x62>
 8003542:	2301      	movs	r3, #1
 8003544:	4622      	mov	r2, r4
 8003546:	4639      	mov	r1, r7
 8003548:	4630      	mov	r0, r6
 800354a:	47c0      	blx	r8
 800354c:	3001      	adds	r0, #1
 800354e:	d0e6      	beq.n	800351e <_printf_common+0xb2>
 8003550:	f109 0901 	add.w	r9, r9, #1
 8003554:	e7d8      	b.n	8003508 <_printf_common+0x9c>
	...

08003558 <_printf_i>:
 8003558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800355c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003560:	460c      	mov	r4, r1
 8003562:	7e09      	ldrb	r1, [r1, #24]
 8003564:	b085      	sub	sp, #20
 8003566:	296e      	cmp	r1, #110	; 0x6e
 8003568:	4617      	mov	r7, r2
 800356a:	4606      	mov	r6, r0
 800356c:	4698      	mov	r8, r3
 800356e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003570:	f000 80b3 	beq.w	80036da <_printf_i+0x182>
 8003574:	d822      	bhi.n	80035bc <_printf_i+0x64>
 8003576:	2963      	cmp	r1, #99	; 0x63
 8003578:	d036      	beq.n	80035e8 <_printf_i+0x90>
 800357a:	d80a      	bhi.n	8003592 <_printf_i+0x3a>
 800357c:	2900      	cmp	r1, #0
 800357e:	f000 80b9 	beq.w	80036f4 <_printf_i+0x19c>
 8003582:	2958      	cmp	r1, #88	; 0x58
 8003584:	f000 8083 	beq.w	800368e <_printf_i+0x136>
 8003588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800358c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003590:	e032      	b.n	80035f8 <_printf_i+0xa0>
 8003592:	2964      	cmp	r1, #100	; 0x64
 8003594:	d001      	beq.n	800359a <_printf_i+0x42>
 8003596:	2969      	cmp	r1, #105	; 0x69
 8003598:	d1f6      	bne.n	8003588 <_printf_i+0x30>
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	0605      	lsls	r5, r0, #24
 80035a0:	f103 0104 	add.w	r1, r3, #4
 80035a4:	d52a      	bpl.n	80035fc <_printf_i+0xa4>
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6011      	str	r1, [r2, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da03      	bge.n	80035b6 <_printf_i+0x5e>
 80035ae:	222d      	movs	r2, #45	; 0x2d
 80035b0:	425b      	negs	r3, r3
 80035b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035b6:	486f      	ldr	r0, [pc, #444]	; (8003774 <_printf_i+0x21c>)
 80035b8:	220a      	movs	r2, #10
 80035ba:	e039      	b.n	8003630 <_printf_i+0xd8>
 80035bc:	2973      	cmp	r1, #115	; 0x73
 80035be:	f000 809d 	beq.w	80036fc <_printf_i+0x1a4>
 80035c2:	d808      	bhi.n	80035d6 <_printf_i+0x7e>
 80035c4:	296f      	cmp	r1, #111	; 0x6f
 80035c6:	d020      	beq.n	800360a <_printf_i+0xb2>
 80035c8:	2970      	cmp	r1, #112	; 0x70
 80035ca:	d1dd      	bne.n	8003588 <_printf_i+0x30>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f043 0320 	orr.w	r3, r3, #32
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	e003      	b.n	80035de <_printf_i+0x86>
 80035d6:	2975      	cmp	r1, #117	; 0x75
 80035d8:	d017      	beq.n	800360a <_printf_i+0xb2>
 80035da:	2978      	cmp	r1, #120	; 0x78
 80035dc:	d1d4      	bne.n	8003588 <_printf_i+0x30>
 80035de:	2378      	movs	r3, #120	; 0x78
 80035e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035e4:	4864      	ldr	r0, [pc, #400]	; (8003778 <_printf_i+0x220>)
 80035e6:	e055      	b.n	8003694 <_printf_i+0x13c>
 80035e8:	6813      	ldr	r3, [r2, #0]
 80035ea:	1d19      	adds	r1, r3, #4
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6011      	str	r1, [r2, #0]
 80035f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035f8:	2301      	movs	r3, #1
 80035fa:	e08c      	b.n	8003716 <_printf_i+0x1be>
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6011      	str	r1, [r2, #0]
 8003600:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003604:	bf18      	it	ne
 8003606:	b21b      	sxthne	r3, r3
 8003608:	e7cf      	b.n	80035aa <_printf_i+0x52>
 800360a:	6813      	ldr	r3, [r2, #0]
 800360c:	6825      	ldr	r5, [r4, #0]
 800360e:	1d18      	adds	r0, r3, #4
 8003610:	6010      	str	r0, [r2, #0]
 8003612:	0628      	lsls	r0, r5, #24
 8003614:	d501      	bpl.n	800361a <_printf_i+0xc2>
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	e002      	b.n	8003620 <_printf_i+0xc8>
 800361a:	0668      	lsls	r0, r5, #25
 800361c:	d5fb      	bpl.n	8003616 <_printf_i+0xbe>
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	4854      	ldr	r0, [pc, #336]	; (8003774 <_printf_i+0x21c>)
 8003622:	296f      	cmp	r1, #111	; 0x6f
 8003624:	bf14      	ite	ne
 8003626:	220a      	movne	r2, #10
 8003628:	2208      	moveq	r2, #8
 800362a:	2100      	movs	r1, #0
 800362c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003630:	6865      	ldr	r5, [r4, #4]
 8003632:	60a5      	str	r5, [r4, #8]
 8003634:	2d00      	cmp	r5, #0
 8003636:	f2c0 8095 	blt.w	8003764 <_printf_i+0x20c>
 800363a:	6821      	ldr	r1, [r4, #0]
 800363c:	f021 0104 	bic.w	r1, r1, #4
 8003640:	6021      	str	r1, [r4, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d13d      	bne.n	80036c2 <_printf_i+0x16a>
 8003646:	2d00      	cmp	r5, #0
 8003648:	f040 808e 	bne.w	8003768 <_printf_i+0x210>
 800364c:	4665      	mov	r5, ip
 800364e:	2a08      	cmp	r2, #8
 8003650:	d10b      	bne.n	800366a <_printf_i+0x112>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	07db      	lsls	r3, r3, #31
 8003656:	d508      	bpl.n	800366a <_printf_i+0x112>
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	6862      	ldr	r2, [r4, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	bfde      	ittt	le
 8003660:	2330      	movle	r3, #48	; 0x30
 8003662:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003666:	f105 35ff 	addle.w	r5, r5, #4294967295
 800366a:	ebac 0305 	sub.w	r3, ip, r5
 800366e:	6123      	str	r3, [r4, #16]
 8003670:	f8cd 8000 	str.w	r8, [sp]
 8003674:	463b      	mov	r3, r7
 8003676:	aa03      	add	r2, sp, #12
 8003678:	4621      	mov	r1, r4
 800367a:	4630      	mov	r0, r6
 800367c:	f7ff fef6 	bl	800346c <_printf_common>
 8003680:	3001      	adds	r0, #1
 8003682:	d14d      	bne.n	8003720 <_printf_i+0x1c8>
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	b005      	add	sp, #20
 800368a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800368e:	4839      	ldr	r0, [pc, #228]	; (8003774 <_printf_i+0x21c>)
 8003690:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003694:	6813      	ldr	r3, [r2, #0]
 8003696:	6821      	ldr	r1, [r4, #0]
 8003698:	1d1d      	adds	r5, r3, #4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6015      	str	r5, [r2, #0]
 800369e:	060a      	lsls	r2, r1, #24
 80036a0:	d50b      	bpl.n	80036ba <_printf_i+0x162>
 80036a2:	07ca      	lsls	r2, r1, #31
 80036a4:	bf44      	itt	mi
 80036a6:	f041 0120 	orrmi.w	r1, r1, #32
 80036aa:	6021      	strmi	r1, [r4, #0]
 80036ac:	b91b      	cbnz	r3, 80036b6 <_printf_i+0x15e>
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	f022 0220 	bic.w	r2, r2, #32
 80036b4:	6022      	str	r2, [r4, #0]
 80036b6:	2210      	movs	r2, #16
 80036b8:	e7b7      	b.n	800362a <_printf_i+0xd2>
 80036ba:	064d      	lsls	r5, r1, #25
 80036bc:	bf48      	it	mi
 80036be:	b29b      	uxthmi	r3, r3
 80036c0:	e7ef      	b.n	80036a2 <_printf_i+0x14a>
 80036c2:	4665      	mov	r5, ip
 80036c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80036c8:	fb02 3311 	mls	r3, r2, r1, r3
 80036cc:	5cc3      	ldrb	r3, [r0, r3]
 80036ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036d2:	460b      	mov	r3, r1
 80036d4:	2900      	cmp	r1, #0
 80036d6:	d1f5      	bne.n	80036c4 <_printf_i+0x16c>
 80036d8:	e7b9      	b.n	800364e <_printf_i+0xf6>
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	6825      	ldr	r5, [r4, #0]
 80036de:	6961      	ldr	r1, [r4, #20]
 80036e0:	1d18      	adds	r0, r3, #4
 80036e2:	6010      	str	r0, [r2, #0]
 80036e4:	0628      	lsls	r0, r5, #24
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	d501      	bpl.n	80036ee <_printf_i+0x196>
 80036ea:	6019      	str	r1, [r3, #0]
 80036ec:	e002      	b.n	80036f4 <_printf_i+0x19c>
 80036ee:	066a      	lsls	r2, r5, #25
 80036f0:	d5fb      	bpl.n	80036ea <_printf_i+0x192>
 80036f2:	8019      	strh	r1, [r3, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	6123      	str	r3, [r4, #16]
 80036f8:	4665      	mov	r5, ip
 80036fa:	e7b9      	b.n	8003670 <_printf_i+0x118>
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	1d19      	adds	r1, r3, #4
 8003700:	6011      	str	r1, [r2, #0]
 8003702:	681d      	ldr	r5, [r3, #0]
 8003704:	6862      	ldr	r2, [r4, #4]
 8003706:	2100      	movs	r1, #0
 8003708:	4628      	mov	r0, r5
 800370a:	f7fc fd61 	bl	80001d0 <memchr>
 800370e:	b108      	cbz	r0, 8003714 <_printf_i+0x1bc>
 8003710:	1b40      	subs	r0, r0, r5
 8003712:	6060      	str	r0, [r4, #4]
 8003714:	6863      	ldr	r3, [r4, #4]
 8003716:	6123      	str	r3, [r4, #16]
 8003718:	2300      	movs	r3, #0
 800371a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800371e:	e7a7      	b.n	8003670 <_printf_i+0x118>
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	462a      	mov	r2, r5
 8003724:	4639      	mov	r1, r7
 8003726:	4630      	mov	r0, r6
 8003728:	47c0      	blx	r8
 800372a:	3001      	adds	r0, #1
 800372c:	d0aa      	beq.n	8003684 <_printf_i+0x12c>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	079b      	lsls	r3, r3, #30
 8003732:	d413      	bmi.n	800375c <_printf_i+0x204>
 8003734:	68e0      	ldr	r0, [r4, #12]
 8003736:	9b03      	ldr	r3, [sp, #12]
 8003738:	4298      	cmp	r0, r3
 800373a:	bfb8      	it	lt
 800373c:	4618      	movlt	r0, r3
 800373e:	e7a3      	b.n	8003688 <_printf_i+0x130>
 8003740:	2301      	movs	r3, #1
 8003742:	464a      	mov	r2, r9
 8003744:	4639      	mov	r1, r7
 8003746:	4630      	mov	r0, r6
 8003748:	47c0      	blx	r8
 800374a:	3001      	adds	r0, #1
 800374c:	d09a      	beq.n	8003684 <_printf_i+0x12c>
 800374e:	3501      	adds	r5, #1
 8003750:	68e3      	ldr	r3, [r4, #12]
 8003752:	9a03      	ldr	r2, [sp, #12]
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	42ab      	cmp	r3, r5
 8003758:	dcf2      	bgt.n	8003740 <_printf_i+0x1e8>
 800375a:	e7eb      	b.n	8003734 <_printf_i+0x1dc>
 800375c:	2500      	movs	r5, #0
 800375e:	f104 0919 	add.w	r9, r4, #25
 8003762:	e7f5      	b.n	8003750 <_printf_i+0x1f8>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ac      	bne.n	80036c2 <_printf_i+0x16a>
 8003768:	7803      	ldrb	r3, [r0, #0]
 800376a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800376e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003772:	e76c      	b.n	800364e <_printf_i+0xf6>
 8003774:	08003a15 	.word	0x08003a15
 8003778:	08003a26 	.word	0x08003a26

0800377c <memcpy>:
 800377c:	b510      	push	{r4, lr}
 800377e:	1e43      	subs	r3, r0, #1
 8003780:	440a      	add	r2, r1
 8003782:	4291      	cmp	r1, r2
 8003784:	d100      	bne.n	8003788 <memcpy+0xc>
 8003786:	bd10      	pop	{r4, pc}
 8003788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800378c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003790:	e7f7      	b.n	8003782 <memcpy+0x6>

08003792 <memmove>:
 8003792:	4288      	cmp	r0, r1
 8003794:	b510      	push	{r4, lr}
 8003796:	eb01 0302 	add.w	r3, r1, r2
 800379a:	d807      	bhi.n	80037ac <memmove+0x1a>
 800379c:	1e42      	subs	r2, r0, #1
 800379e:	4299      	cmp	r1, r3
 80037a0:	d00a      	beq.n	80037b8 <memmove+0x26>
 80037a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037aa:	e7f8      	b.n	800379e <memmove+0xc>
 80037ac:	4283      	cmp	r3, r0
 80037ae:	d9f5      	bls.n	800379c <memmove+0xa>
 80037b0:	1881      	adds	r1, r0, r2
 80037b2:	1ad2      	subs	r2, r2, r3
 80037b4:	42d3      	cmn	r3, r2
 80037b6:	d100      	bne.n	80037ba <memmove+0x28>
 80037b8:	bd10      	pop	{r4, pc}
 80037ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037c2:	e7f7      	b.n	80037b4 <memmove+0x22>

080037c4 <_free_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4605      	mov	r5, r0
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d045      	beq.n	8003858 <_free_r+0x94>
 80037cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d0:	1f0c      	subs	r4, r1, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bfb8      	it	lt
 80037d6:	18e4      	addlt	r4, r4, r3
 80037d8:	f000 f8d2 	bl	8003980 <__malloc_lock>
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <_free_r+0x98>)
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	4610      	mov	r0, r2
 80037e2:	b933      	cbnz	r3, 80037f2 <_free_r+0x2e>
 80037e4:	6063      	str	r3, [r4, #4]
 80037e6:	6014      	str	r4, [r2, #0]
 80037e8:	4628      	mov	r0, r5
 80037ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ee:	f000 b8c8 	b.w	8003982 <__malloc_unlock>
 80037f2:	42a3      	cmp	r3, r4
 80037f4:	d90c      	bls.n	8003810 <_free_r+0x4c>
 80037f6:	6821      	ldr	r1, [r4, #0]
 80037f8:	1862      	adds	r2, r4, r1
 80037fa:	4293      	cmp	r3, r2
 80037fc:	bf04      	itt	eq
 80037fe:	681a      	ldreq	r2, [r3, #0]
 8003800:	685b      	ldreq	r3, [r3, #4]
 8003802:	6063      	str	r3, [r4, #4]
 8003804:	bf04      	itt	eq
 8003806:	1852      	addeq	r2, r2, r1
 8003808:	6022      	streq	r2, [r4, #0]
 800380a:	6004      	str	r4, [r0, #0]
 800380c:	e7ec      	b.n	80037e8 <_free_r+0x24>
 800380e:	4613      	mov	r3, r2
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	b10a      	cbz	r2, 8003818 <_free_r+0x54>
 8003814:	42a2      	cmp	r2, r4
 8003816:	d9fa      	bls.n	800380e <_free_r+0x4a>
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	1858      	adds	r0, r3, r1
 800381c:	42a0      	cmp	r0, r4
 800381e:	d10b      	bne.n	8003838 <_free_r+0x74>
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	4401      	add	r1, r0
 8003824:	1858      	adds	r0, r3, r1
 8003826:	4282      	cmp	r2, r0
 8003828:	6019      	str	r1, [r3, #0]
 800382a:	d1dd      	bne.n	80037e8 <_free_r+0x24>
 800382c:	6810      	ldr	r0, [r2, #0]
 800382e:	6852      	ldr	r2, [r2, #4]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	4401      	add	r1, r0
 8003834:	6019      	str	r1, [r3, #0]
 8003836:	e7d7      	b.n	80037e8 <_free_r+0x24>
 8003838:	d902      	bls.n	8003840 <_free_r+0x7c>
 800383a:	230c      	movs	r3, #12
 800383c:	602b      	str	r3, [r5, #0]
 800383e:	e7d3      	b.n	80037e8 <_free_r+0x24>
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	1821      	adds	r1, r4, r0
 8003844:	428a      	cmp	r2, r1
 8003846:	bf04      	itt	eq
 8003848:	6811      	ldreq	r1, [r2, #0]
 800384a:	6852      	ldreq	r2, [r2, #4]
 800384c:	6062      	str	r2, [r4, #4]
 800384e:	bf04      	itt	eq
 8003850:	1809      	addeq	r1, r1, r0
 8003852:	6021      	streq	r1, [r4, #0]
 8003854:	605c      	str	r4, [r3, #4]
 8003856:	e7c7      	b.n	80037e8 <_free_r+0x24>
 8003858:	bd38      	pop	{r3, r4, r5, pc}
 800385a:	bf00      	nop
 800385c:	20000090 	.word	0x20000090

08003860 <_malloc_r>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	1ccd      	adds	r5, r1, #3
 8003864:	f025 0503 	bic.w	r5, r5, #3
 8003868:	3508      	adds	r5, #8
 800386a:	2d0c      	cmp	r5, #12
 800386c:	bf38      	it	cc
 800386e:	250c      	movcc	r5, #12
 8003870:	2d00      	cmp	r5, #0
 8003872:	4606      	mov	r6, r0
 8003874:	db01      	blt.n	800387a <_malloc_r+0x1a>
 8003876:	42a9      	cmp	r1, r5
 8003878:	d903      	bls.n	8003882 <_malloc_r+0x22>
 800387a:	230c      	movs	r3, #12
 800387c:	6033      	str	r3, [r6, #0]
 800387e:	2000      	movs	r0, #0
 8003880:	bd70      	pop	{r4, r5, r6, pc}
 8003882:	f000 f87d 	bl	8003980 <__malloc_lock>
 8003886:	4a21      	ldr	r2, [pc, #132]	; (800390c <_malloc_r+0xac>)
 8003888:	6814      	ldr	r4, [r2, #0]
 800388a:	4621      	mov	r1, r4
 800388c:	b991      	cbnz	r1, 80038b4 <_malloc_r+0x54>
 800388e:	4c20      	ldr	r4, [pc, #128]	; (8003910 <_malloc_r+0xb0>)
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	b91b      	cbnz	r3, 800389c <_malloc_r+0x3c>
 8003894:	4630      	mov	r0, r6
 8003896:	f000 f863 	bl	8003960 <_sbrk_r>
 800389a:	6020      	str	r0, [r4, #0]
 800389c:	4629      	mov	r1, r5
 800389e:	4630      	mov	r0, r6
 80038a0:	f000 f85e 	bl	8003960 <_sbrk_r>
 80038a4:	1c43      	adds	r3, r0, #1
 80038a6:	d124      	bne.n	80038f2 <_malloc_r+0x92>
 80038a8:	230c      	movs	r3, #12
 80038aa:	6033      	str	r3, [r6, #0]
 80038ac:	4630      	mov	r0, r6
 80038ae:	f000 f868 	bl	8003982 <__malloc_unlock>
 80038b2:	e7e4      	b.n	800387e <_malloc_r+0x1e>
 80038b4:	680b      	ldr	r3, [r1, #0]
 80038b6:	1b5b      	subs	r3, r3, r5
 80038b8:	d418      	bmi.n	80038ec <_malloc_r+0x8c>
 80038ba:	2b0b      	cmp	r3, #11
 80038bc:	d90f      	bls.n	80038de <_malloc_r+0x7e>
 80038be:	600b      	str	r3, [r1, #0]
 80038c0:	50cd      	str	r5, [r1, r3]
 80038c2:	18cc      	adds	r4, r1, r3
 80038c4:	4630      	mov	r0, r6
 80038c6:	f000 f85c 	bl	8003982 <__malloc_unlock>
 80038ca:	f104 000b 	add.w	r0, r4, #11
 80038ce:	1d23      	adds	r3, r4, #4
 80038d0:	f020 0007 	bic.w	r0, r0, #7
 80038d4:	1ac3      	subs	r3, r0, r3
 80038d6:	d0d3      	beq.n	8003880 <_malloc_r+0x20>
 80038d8:	425a      	negs	r2, r3
 80038da:	50e2      	str	r2, [r4, r3]
 80038dc:	e7d0      	b.n	8003880 <_malloc_r+0x20>
 80038de:	428c      	cmp	r4, r1
 80038e0:	684b      	ldr	r3, [r1, #4]
 80038e2:	bf16      	itet	ne
 80038e4:	6063      	strne	r3, [r4, #4]
 80038e6:	6013      	streq	r3, [r2, #0]
 80038e8:	460c      	movne	r4, r1
 80038ea:	e7eb      	b.n	80038c4 <_malloc_r+0x64>
 80038ec:	460c      	mov	r4, r1
 80038ee:	6849      	ldr	r1, [r1, #4]
 80038f0:	e7cc      	b.n	800388c <_malloc_r+0x2c>
 80038f2:	1cc4      	adds	r4, r0, #3
 80038f4:	f024 0403 	bic.w	r4, r4, #3
 80038f8:	42a0      	cmp	r0, r4
 80038fa:	d005      	beq.n	8003908 <_malloc_r+0xa8>
 80038fc:	1a21      	subs	r1, r4, r0
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 f82e 	bl	8003960 <_sbrk_r>
 8003904:	3001      	adds	r0, #1
 8003906:	d0cf      	beq.n	80038a8 <_malloc_r+0x48>
 8003908:	6025      	str	r5, [r4, #0]
 800390a:	e7db      	b.n	80038c4 <_malloc_r+0x64>
 800390c:	20000090 	.word	0x20000090
 8003910:	20000094 	.word	0x20000094

08003914 <_realloc_r>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	4607      	mov	r7, r0
 8003918:	4614      	mov	r4, r2
 800391a:	460e      	mov	r6, r1
 800391c:	b921      	cbnz	r1, 8003928 <_realloc_r+0x14>
 800391e:	4611      	mov	r1, r2
 8003920:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003924:	f7ff bf9c 	b.w	8003860 <_malloc_r>
 8003928:	b922      	cbnz	r2, 8003934 <_realloc_r+0x20>
 800392a:	f7ff ff4b 	bl	80037c4 <_free_r>
 800392e:	4625      	mov	r5, r4
 8003930:	4628      	mov	r0, r5
 8003932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003934:	f000 f826 	bl	8003984 <_malloc_usable_size_r>
 8003938:	42a0      	cmp	r0, r4
 800393a:	d20f      	bcs.n	800395c <_realloc_r+0x48>
 800393c:	4621      	mov	r1, r4
 800393e:	4638      	mov	r0, r7
 8003940:	f7ff ff8e 	bl	8003860 <_malloc_r>
 8003944:	4605      	mov	r5, r0
 8003946:	2800      	cmp	r0, #0
 8003948:	d0f2      	beq.n	8003930 <_realloc_r+0x1c>
 800394a:	4631      	mov	r1, r6
 800394c:	4622      	mov	r2, r4
 800394e:	f7ff ff15 	bl	800377c <memcpy>
 8003952:	4631      	mov	r1, r6
 8003954:	4638      	mov	r0, r7
 8003956:	f7ff ff35 	bl	80037c4 <_free_r>
 800395a:	e7e9      	b.n	8003930 <_realloc_r+0x1c>
 800395c:	4635      	mov	r5, r6
 800395e:	e7e7      	b.n	8003930 <_realloc_r+0x1c>

08003960 <_sbrk_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4c06      	ldr	r4, [pc, #24]	; (800397c <_sbrk_r+0x1c>)
 8003964:	2300      	movs	r3, #0
 8003966:	4605      	mov	r5, r0
 8003968:	4608      	mov	r0, r1
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	f7ff fb3a 	bl	8002fe4 <_sbrk>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_sbrk_r+0x1a>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	b103      	cbz	r3, 800397a <_sbrk_r+0x1a>
 8003978:	602b      	str	r3, [r5, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	20000144 	.word	0x20000144

08003980 <__malloc_lock>:
 8003980:	4770      	bx	lr

08003982 <__malloc_unlock>:
 8003982:	4770      	bx	lr

08003984 <_malloc_usable_size_r>:
 8003984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003988:	1f18      	subs	r0, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	bfbc      	itt	lt
 800398e:	580b      	ldrlt	r3, [r1, r0]
 8003990:	18c0      	addlt	r0, r0, r3
 8003992:	4770      	bx	lr

08003994 <_init>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr

080039a0 <_fini>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr
